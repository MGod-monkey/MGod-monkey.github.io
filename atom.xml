<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MGodmonkeyの世界</title>
  
  <subtitle>不在沉默中沉沦</subtitle>
  <link href="https://www.mgodmonkey.cn/atom.xml" rel="self"/>
  
  <link href="https://www.mgodmonkey.cn/"/>
  <updated>2024-09-05T03:36:28.294Z</updated>
  <id>https://www.mgodmonkey.cn/</id>
  
  <author>
    <name>MGodmonkey</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红山社区比赛仿真环境</title>
    <link href="https://www.mgodmonkey.cn/posts/c1763b9b.html"/>
    <id>https://www.mgodmonkey.cn/posts/c1763b9b.html</id>
    <published>2024-08-30T07:57:46.000Z</published>
    <updated>2024-09-05T03:36:28.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-资料">1.资料</h2><ul><li><strong>比赛官方链接：</strong><a href="https://www.osredm.com/competition/JQTJ">https://www.osredm.com/competition/JQTJ</a></li><li><strong>比赛答疑仓库：</strong><a href="https://www.osredm.com/JQZN/jqzn-issue">https://www.osredm.com/JQZN/jqzn-issue</a></li><li><strong>仿真接口文档：</strong><a href="https://jqsdk.osredm.com/">https://jqsdk.osredm.com</a></li></ul><h2 id="2-仿真环境搭建">2.仿真环境搭建</h2><blockquote><p><strong>说明：因为Windows环境下仿真比较简单，并且Windows环境下能用到显卡资源，仿真可以更加流畅，可以先搭Windows环境仿真，后续代码传给我统一在linux下打包即可</strong></p></blockquote><ol><li><p>解压<code>仿真开发包.zip</code>并将文件夹里面的<code>仿真开发包</code>文件夹改名成 英文名，如<code>SimulationPackage</code>，移动到根目录，如<code>E:\SimulationPackage</code>，确保后续环境不会因为路径名出错</p></li><li><p>解压<code>WindowsNoEditor.rar</code>，<code>simuDistro_0.2.3_windows.zip</code>压缩包****</p><p><img src="https://s2.loli.net/2024/08/30/PiAMRpXtGDnTjqc.png" alt="image-20240830161933843"></p></li><li><p>安装SDK环境</p><ol><li><p>安装Anaconda ：用U盘中的安装包或者官网 <a href="https://www.anaconda.com/download/success">https://www.anaconda.com/download/success</a>自行下载</p></li><li><p>创建python3.6虚拟环境</p><ol><li><p>打开cmd终端：win+r输入<strong>cmd</strong> 或者 win+q搜索<strong>Anaconda Prompt</strong>（cmd打开如果前面没有(base)，通过输入<code>conda activate base</code>激活）</p><p><img src="https://s2.loli.net/2024/08/30/GQMun2OUVxqerHb.png" alt="image-20240830163837166"></p></li><li><p>通过下面的指令插件一个python3.6环境</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sim是虚拟环境的名字，安装过程遇到选项输入y然后回车即可</span></span><br><span class="line">conda create -n sim python=3.6</span><br><span class="line"><span class="comment"># 激活sim虚拟环境</span></span><br><span class="line">conda activate sim</span><br></pre></td></tr></table></figure></li><li><p>通过下面的指令安装 SDK环境（不要翻墙，可能会报网络错误）</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install https://jqtj.obs.cn-north-4.myhuaweicloud.com/sdk/windows/swarmae-1.0.1-py3-none-any.whl -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure></li><li><p>验证安装，终端输入<code>python</code>，接着输入<code>from swarmae.SwarmAEClient import SwarmAEClient</code>，没报错就是已经安装成功（输入<code>quit()</code>回车退出python环境）</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(sim) C:\Users\17814&gt;python</span><br><span class="line">Python 3.6.13 |Anaconda, Inc.| (default, Mar 16 2021, 11:37:27) [MSC v.1916 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from swarmae.SwarmAEClient import SwarmAEClient</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><blockquote><p><strong>注：Anaconda安装即创建环境有问题的参考博客</strong><a href="https://blog.csdn.net/weixin_73800108/article/details/137296446">【超详细版Anaconda的安装及使用conda创建、运行虚拟环境以及使用镜像源】</a></p></blockquote><ol start="4"><li><p>UE4仿真包配置</p><ol><li><p>打开<code>E:\SimulationPackage\WindowsNoEditor\WindowsNoEditor</code>，右键<code>CarlaUE4.exe</code>-&gt;显示更多选项-&gt;创建快捷方式</p></li><li><p>修改配置文件：<code>E:\SimulationPackage\WindowsNoEditor\WindowsNoEditor\CarlaUE4\Config\ClusterEval.ini</code>（配置文件格式说明见第三章）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Game]</span><br><span class="line">GameId=<span class="string">&quot;77777&quot;</span> <span class="comment">#随便取</span></span><br><span class="line">SubjectId=5 <span class="comment">#对应科目几，体现在仿真启动后的标题“旋翼无人机自主避障科目”</span></span><br><span class="line">Seconds=600 <span class="comment">#好像没用</span></span><br><span class="line">AirSimComPort=4443</span><br><span class="line">AirSimCmdPort=4446</span><br><span class="line"></span><br><span class="line">[Team]</span><br><span class="line">TeamId=<span class="string">&quot;Team1&quot;</span></span><br><span class="line">IMVNum=5</span><br><span class="line">QRTNum=10</span><br></pre></td></tr></table></figure></li><li><p>接着右键快捷方式，在目标后面加<code>CE_L1 -ConfigName=ClusterEval</code>（别忘了exe后面有空格），然后点击确定</p><p><img src="https://s2.loli.net/2024/08/30/Q1uwF3M5xdlH4Ta.png" alt="image-20240830204643839"></p></li></ol><blockquote><p><strong>说明：CE_L1代表科目一的地图，CE_L2代表科目三的地图，如果是无人机的地图，则需要将其修改为CE_L4~CE_7，更详细的说明见第三章</strong></p></blockquote><ol start="3"><li><p>双击快捷方式进入仿真环境，终端输入<code>netstat -ano | findstr 2000</code>，如果出现2000的端口则说明启动正常</p><p><img src="https://s2.loli.net/2024/08/30/pXKmYNiCxg1e4ah.png" alt="image-20240830170209964"></p><p><img src="https://s2.loli.net/2024/08/30/w5eFBYyv8L21IEn.png" alt="image-20240830171457277"></p></li></ol></li><li><p>启动仿真动力程序</p><ol><li><p>打开<code>E:\SimulationPackage\simuDistro_0.2.3_windows</code>文件夹，双击<code>start.bat</code>即可</p></li><li><p>类型选择<code>2. 四旋翼</code>然后回车</p><p><img src="https://s2.loli.net/2024/08/30/cyND9fASUvlERLV.png" alt="image-20240830192355312"></p></li><li><p>出现下面的心跳包界面说明启动成功</p><p><img src="https://s2.loli.net/2024/08/30/TREO63hWzkcfde9.png" alt="image-20240830192515019"></p></li></ol></li></ol><h2 id="3-配置文件说明">3. 配置文件说明</h2><h3 id="3-1配置文件说明">3.1配置文件说明</h3><table><thead><tr><th style="text-align:center">Game</th><th style="text-align:center">GameId</th><th style="text-align:center">string</th><th style="text-align:center">指定本场比赛ID</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">SubjectId</td><td style="text-align:center">int</td><td style="text-align:center">指定本场科目编号</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Seconds</td><td style="text-align:center">int</td><td style="text-align:center">指定本场比赛时长</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">AirSimIp</td><td style="text-align:center">ip</td><td style="text-align:center">指定固定翼仿真ip地址</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">AirSimComPort</td><td style="text-align:center">port</td><td style="text-align:center">指定仿真引擎连接TCP端口号</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">AirSimCmdPort</td><td style="text-align:center">port</td><td style="text-align:center">指定仿真信息接收UDP端口号</td></tr><tr><td style="text-align:center">Team1</td><td style="text-align:center">TeamId</td><td style="text-align:center">string</td><td style="text-align:center">指定队伍1ID</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">IMVNum</td><td style="text-align:center">int</td><td style="text-align:center">指定步兵机动战车数量</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">CMSNum</td><td style="text-align:center">int</td><td style="text-align:center">指定巡飞弹（自杀式无人机）数量</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">SVLNum</td><td style="text-align:center">int</td><td style="text-align:center">指定察打无人机数量</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">QRTNum</td><td style="text-align:center">int</td><td style="text-align:center">指定小型四旋翼无人机数量</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">QRBNum</td><td style="text-align:center">int</td><td style="text-align:center">指定四旋翼自杀式无人机数量</td></tr><tr><td style="text-align:center">Team2</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">队伍2配置域，配置方法同队伍1</td></tr></tbody></table><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Game]</span><br><span class="line">GameId=<span class="string">&quot;77777&quot;</span> <span class="comment">#随便取</span></span><br><span class="line">SubjectId=5 <span class="comment">#对应科目几，体现在仿真启动后的标题“旋翼无人机自主避障科目”</span></span><br><span class="line">Seconds=600 <span class="comment">#好像没用</span></span><br><span class="line">AirSimComPort=4443</span><br><span class="line">AirSimCmdPort=4446</span><br><span class="line"></span><br><span class="line">[Team]</span><br><span class="line">TeamId=<span class="string">&quot;Team1&quot;</span></span><br><span class="line">IMVNum=1</span><br><span class="line">CMSNum=1</span><br><span class="line">QRTNum=2</span><br><span class="line">QRBNum=1</span><br></pre></td></tr></table></figure><blockquote><p>说明：载具的生成与地图有关，并不是说配置文件里面说了生成啥就是啥，经过测试，地图<strong>CE_L1~CE_L3</strong>只能生成<strong>IMVNum</strong>，即小车，对应小车的科目1到3，<strong>CE_L4~CE_L6</strong>只能生成<strong>QRTNum</strong>，即<strong>四旋翼无人机</strong>，<strong>CE_L7</strong>能生成<strong>小车</strong>和<strong>四旋翼无人机</strong>，<strong>CE_A</strong>地图系列目前不知道是干啥用的</p></blockquote><h3 id="3-2地图说明">3.2地图说明</h3><table><thead><tr><th style="text-align:center">项目</th><th style="text-align:center">科目</th><th style="text-align:center">对应地图</th></tr></thead><tbody><tr><td style="text-align:center">空地</td><td style="text-align:center">1</td><td style="text-align:center">CE_L1</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">2</td><td style="text-align:center">CE_L2</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">3</td><td style="text-align:center">CE_L3</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">4</td><td style="text-align:center">CE_L4</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5</td><td style="text-align:center">CE_L5</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">6</td><td style="text-align:center">CE_L6</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">7</td><td style="text-align:center">CE_L7</td></tr><tr><td style="text-align:center">空中</td><td style="text-align:center">1、4</td><td style="text-align:center">CE_A14</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">2</td><td style="text-align:center">CE_A2</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">3、6</td><td style="text-align:center">CE_A36</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">5</td><td style="text-align:center">CE_A5</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">7</td><td style="text-align:center">CE_A7</td></tr></tbody></table><blockquote><p>说明：空中系列的地图暂时不用管</p></blockquote><h3 id="3-3科目说明">3.3科目说明</h3><p><img src="https://s2.loli.net/2024/08/30/dKLFJT6f2eCtqzQ.png" alt="image-20240830205008117"></p><h2 id="4-完整运行流程">4.完整运行流程</h2><ol><li>双击<code>E:\SimulationPackage\WindowsNoEditor\WindowsNoEditor\CarlaUE4.exe - 快捷方式</code>打开地图</li><li>双击<code>E:\SimulationPackage\simuDistro_0.2.3_windows\start.bat</code>打开动力系统</li><li>用VSCode打开demo文件夹，并且点击上面的终端-&gt;新建终端-&gt;输入<code>conda activate sim</code></li></ol><p><img src="https://s2.loli.net/2024/08/30/JENg3PwA7Dihn6X.png" alt="image-20240830194050266"></p><ol start="4"><li><p>双击<code>game-start.exe</code>, 启动仿真内倒计时，等倒计启动了50s后才能对无人机进行控制（game-start.exe下载地址：<a href="https://www.osredm.com/JQZN/jqzn-issue/tree/master">https://www.osredm.com/JQZN/jqzn-issue/tree/master</a>)</p><p><img src="https://s2.loli.net/2024/09/02/dwGri5KR6gfaTky.png" alt="image-20240902152013010"></p></li><li><p>在终端输入<code>python simple_test.py</code>，后台显示如下，无人机向前飞行，说明仿真成功</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(sim) E:\SimulationPackage\demo&gt;python simple_test.py</span><br><span class="line">--Connecting to UE4 simulation: 127.0.0.1 2000</span><br><span class="line">WARNING: Version mismatch detected: You are trying to connect to a simulator that might be incompatible with this API </span><br><span class="line">WARNING: Client API version     = 1.0-34-g91df42e4-dirty </span><br><span class="line">WARNING: Simulator API version  = a59b6e5-dirty </span><br><span class="line">vehicle.QRT.Phantom*</span><br><span class="line">--Node registered successfully: 节点1, Type: 四旋翼</span><br><span class="line">Node moved to new position: x=290.29998779296875, y=566.7999877929688, z=487.0</span><br><span class="line">Node moved to new position: x=290.3046875, y=566.8058471679688, z=487.4312438964844</span><br><span class="line">Node moved to new position: x=290.79931640625, y=567.7300415039062, z=491.5119323730469</span><br><span class="line">Node moved to new position: x=292.13153076171875, y=570.321533203125, z=496.00872802734375</span><br></pre></td></tr></table></figure><h2 id="5-示例代码">5.示例代码</h2><h3 id="5-1多无人机控制案例">5.1多无人机控制案例</h3><blockquote><p>配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Game]</span><br><span class="line">GameId=&quot;77777&quot; #随便取</span><br><span class="line">SubjectId=4 #对应科目几，体现在仿真启动后的标题“旋翼无人机自主避障科目”</span><br><span class="line">Seconds=600 #好像没用</span><br><span class="line">AirSimComPort=4443</span><br><span class="line">AirSimCmdPort=4446</span><br><span class="line"></span><br><span class="line">[Team]</span><br><span class="line">TeamId=&quot;Team1&quot;</span><br><span class="line">IMVNum=1</span><br><span class="line">CMSNum=1</span><br><span class="line">QRTNum=10</span><br><span class="line">QRBNum=1</span><br></pre></td></tr></table></figure><p>启动：</p><p><code>python simple_test.py -n 10</code>（加参数-n 10表示注册10辆无人机进行控制）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> swarmae.SwarmAEClient <span class="keyword">import</span> SwarmAEClient</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwarmaeClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.ae_client = <span class="literal">None</span></span><br><span class="line">        self.nodes = []</span><br><span class="line">        self.node_info = &#123;&#125;  <span class="comment"># 存储每个无人机的初始位置和高度</span></span><br><span class="line">        self.positions = []  <span class="comment"># 存储每个无人机的当前位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_client</span>(<span class="params">self, ue_ip=<span class="string">&quot;127.0.0.1&quot;</span>, ue_port=<span class="number">2000</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--Connecting to UE4 simulation:&quot;</span>, ue_ip, ue_port)</span><br><span class="line">        self.ae_client = SwarmAEClient(ue_ip=ue_ip, ue_port=ue_port)</span><br><span class="line">        <span class="keyword">return</span> self.ae_client</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_node</span>(<span class="params">self, <span class="built_in">id</span>, max_retries=<span class="number">3</span></span>):</span><br><span class="line">        <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_retries):</span><br><span class="line">            frame_timestamp = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">            frame_timestamp, sw_node, sw_code = self.ae_client.register_node(</span><br><span class="line">                node_type=<span class="string">&quot;四旋翼&quot;</span>, node_name=<span class="string">&quot;无人机&quot;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>), node_no=<span class="built_in">id</span>, frame_timestamp=frame_timestamp</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> sw_code == <span class="number">200</span>:</span><br><span class="line">                node_name, node_no, team, node_type, _, _ = sw_node.get_node_info()</span><br><span class="line">                initial_location = sw_node.get_location()[:<span class="number">3</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;--UAV <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> registered successfully: <span class="subst">&#123;node_name&#125;</span>, Type: <span class="subst">&#123;node_type&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;--Initial position: x=<span class="subst">&#123;initial_location[<span class="number">0</span>]:<span class="number">.2</span>f&#125;</span>, y=<span class="subst">&#123;initial_location[<span class="number">1</span>]:<span class="number">.2</span>f&#125;</span>, z=<span class="subst">&#123;initial_location[<span class="number">2</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">                self.node_info[sw_node] = &#123;</span><br><span class="line">                    <span class="string">&#x27;flight_altitude&#x27;</span>: initial_location[<span class="number">2</span>] + <span class="number">1.0</span>,  <span class="comment"># 设置飞行高度为起始z位置加1米</span></span><br><span class="line">                    <span class="string">&#x27;ground_height&#x27;</span>: initial_location[<span class="number">2</span>] + <span class="number">0.1</span>  <span class="comment"># 设置地面高度为初始z位置</span></span><br><span class="line">                &#125;</span><br><span class="line">                self.positions.append((sw_node, <span class="built_in">id</span>, initial_location))  <span class="comment"># 保存节点及其编号</span></span><br><span class="line">                self.nodes.append(sw_node)</span><br><span class="line">                <span class="keyword">return</span> sw_code, sw_node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;--UAV <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> registration failed with code <span class="subst">&#123;sw_code&#125;</span>, attempt <span class="subst">&#123;attempt+<span class="number">1</span>&#125;</span> of <span class="subst">&#123;max_retries&#125;</span>&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">2</span>)  <span class="comment"># 等待2秒后重试</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;UAV <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> registration failed after <span class="subst">&#123;max_retries&#125;</span> attempts.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> sw_code, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_to_position_xy</span>(<span class="params">self, node, target_x, target_y, target_z</span>):</span><br><span class="line">        node_index = self.nodes.index(node)</span><br><span class="line">        current_timestamp = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">        node.control_kinetic_simply_global(x=target_x, y=target_y, z=target_z, v=<span class="number">3.0</span>, frame_timestamp=current_timestamp)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            current_location = node.get_location()[:<span class="number">3</span>]</span><br><span class="line">            distance = math.sqrt((current_location[<span class="number">0</span>] - target_x) ** <span class="number">2</span> + (current_location[<span class="number">1</span>] - target_y) ** <span class="number">2</span>)</span><br><span class="line">            self.update_position(node)  <span class="comment"># 实时更新位置</span></span><br><span class="line">            <span class="keyword">if</span> distance &lt;= <span class="number">1.5</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[UAV <span class="subst">&#123;node_index + <span class="number">1</span>&#125;</span>] reached target position: x=<span class="subst">&#123;target_x:<span class="number">.2</span>f&#125;</span>, y=<span class="subst">&#123;target_y:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_to_position_z</span>(<span class="params">self, node, target_x, target_y, target_z</span>):</span><br><span class="line">        node_index = self.nodes.index(node)</span><br><span class="line">        current_timestamp = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">        node.control_kinetic_simply_global(x=target_x, y=target_y, z=target_z, v=<span class="number">3.0</span>, frame_timestamp=current_timestamp)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            current_location = node.get_location()[:<span class="number">3</span>]</span><br><span class="line">            self.update_position(node)  <span class="comment"># 实时更新位置</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(current_location[<span class="number">2</span>] - target_z) &lt;= <span class="number">0.2</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;[UAV <span class="subst">&#123;node_index + <span class="number">1</span>&#125;</span>] reached target altitude: z=<span class="subst">&#123;target_z:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_position</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新并保存无人机的当前位置。&quot;&quot;&quot;</span></span><br><span class="line">        current_location = node.get_location()[:<span class="number">3</span>]</span><br><span class="line">        node_index = self.nodes.index(node)</span><br><span class="line">        self.positions[node_index] = (node, node_index + <span class="number">1</span>, current_location)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">takeoff</span>(<span class="params">self, node</span>):</span><br><span class="line">        location = node.get_location()</span><br><span class="line">        x, y, z = location[:<span class="number">3</span>]</span><br><span class="line">        target_z = self.node_info[node][<span class="string">&#x27;flight_altitude&#x27;</span>]  <span class="comment"># 获取对应的飞行高度</span></span><br><span class="line">        self.move_to_position_z(node, x + <span class="number">0.5</span>, y + <span class="number">0.5</span>, target_z)  <span class="comment"># 垂直起飞需要在x，y上添加一点偏移，否则起飞过慢</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_forward</span>(<span class="params">self, node, distance</span>):</span><br><span class="line">        location = node.get_location()</span><br><span class="line">        x, y, z = location[:<span class="number">3</span>]</span><br><span class="line">        target_x = x + distance</span><br><span class="line">        self.move_to_position_xy(node, target_x, y, z)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_backward</span>(<span class="params">self, node, distance</span>):</span><br><span class="line">        location = node.get_location()</span><br><span class="line">        x, y, z = location[:<span class="number">3</span>]</span><br><span class="line">        target_x = x - distance</span><br><span class="line">        self.move_to_position_xy(node, target_x, y, z)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_left</span>(<span class="params">self, node, distance</span>):</span><br><span class="line">        location = node.get_location()</span><br><span class="line">        x, y, z = location[:<span class="number">3</span>]</span><br><span class="line">        target_y = y - distance</span><br><span class="line">        self.move_to_position_xy(node, x, target_y, z)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_right</span>(<span class="params">self, node, distance</span>):</span><br><span class="line">        location = node.get_location()</span><br><span class="line">        x, y, z = location[:<span class="number">3</span>]</span><br><span class="line">        target_y = y + distance</span><br><span class="line">        self.move_to_position_xy(node, x, target_y, z)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_flight_plan</span>(<span class="params">self, flight_plan_funcs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行所有无人机的飞行计划。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.nodes) &lt; <span class="built_in">len</span>(flight_plan_funcs):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Not all nodes were successfully registered. Adjusting the flight plans.&quot;</span>)</span><br><span class="line">            flight_plan_funcs = flight_plan_funcs[:<span class="built_in">len</span>(self.nodes)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">            futures = []</span><br><span class="line">            <span class="keyword">for</span> node, flight_plan_func <span class="keyword">in</span> <span class="built_in">zip</span>(self.nodes, flight_plan_funcs):</span><br><span class="line">                futures.append(executor.submit(flight_plan_func, node))</span><br><span class="line">            <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">                future.result()  <span class="comment"># 等待所有无人机完成其飞行计划</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parser = argparse.ArgumentParser()</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-i&quot;</span>, <span class="string">&quot;--ip&quot;</span>, default=<span class="string">&quot;127.0.0.1&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定服务器IP&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--port&quot;</span>, default=<span class="number">2000</span>, <span class="built_in">help</span>=<span class="string">&quot;指定服务器Port&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-n&quot;</span>, <span class="string">&quot;--number&quot;</span>, default=<span class="number">1</span>, <span class="built_in">help</span>=<span class="string">&quot;指定飞机数量&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">        t1 = SwarmaeClass()</span><br><span class="line">        t1.create_client(args.ip, args.port)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(args.number):</span><br><span class="line">            t1.create_node(i+<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        <span class="comment">#####################</span></span><br><span class="line">        <span class="comment"># 定义飞行计划</span></span><br><span class="line">        <span class="comment"># 前面的部分不需要改，要控制无人机的飞行，只需修改下面的部分即可</span></span><br><span class="line">        <span class="comment"># flight_plan_n即第n个无人机的飞行计划函数</span></span><br><span class="line">        <span class="comment"># t1.takeoff(node)  # 起飞</span></span><br><span class="line">        <span class="comment"># t1.move_forward(node, distance)  # 向前移动distance米</span></span><br><span class="line">        <span class="comment"># t1.move_backward(node, distance)  # 向后移动distance米</span></span><br><span class="line">        <span class="comment"># t1.move_left(node, distance)  # 向左移动distance米</span></span><br><span class="line">        <span class="comment"># t1.move_right(node, distance)  # 向右移动distance米</span></span><br><span class="line">        <span class="comment">#####################</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义不同无人机的飞行航线</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">flight_plan_1</span>(<span class="params">node</span>):</span><br><span class="line">            t1.takeoff(node)</span><br><span class="line">            t1.move_forward(node, <span class="number">10.0</span>) <span class="comment"># 向前移动10米</span></span><br><span class="line">            t1.move_left(node, <span class="number">5.0</span>) <span class="comment"># 向左移动5米</span></span><br><span class="line">            t1.move_forward(node, <span class="number">10.0</span>) <span class="comment"># 向前移动10米</span></span><br><span class="line">            t1.move_right(node, <span class="number">5.0</span>) <span class="comment"># 向左移动5米</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">flight_plan_2</span>(<span class="params">node</span>):</span><br><span class="line">            t1.takeoff(node)</span><br><span class="line">            t1.move_left(node, <span class="number">10.0</span>)</span><br><span class="line">            t1.move_forward(node, <span class="number">15.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">flight_plan_3</span>(<span class="params">node</span>):</span><br><span class="line">            t1.takeoff(node)</span><br><span class="line">            t1.move_forward(node, <span class="number">10.0</span>)</span><br><span class="line">            t1.move_left(node, <span class="number">25.0</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">flight_plan_4</span>(<span class="params">node</span>):</span><br><span class="line">            t1.takeoff(node)</span><br><span class="line">            t1.move_forward(node, <span class="number">15.0</span>)</span><br><span class="line">            t1.move_right(node, <span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">flight_plan_5</span>(<span class="params">node</span>):</span><br><span class="line">            t1.takeoff(node)</span><br><span class="line">            t1.move_forward(node, <span class="number">30.0</span>)</span><br><span class="line">            t1.move_left(node, <span class="number">15.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 飞行计划列表，每个元素对应一个无人机的飞行路线</span></span><br><span class="line">        flight_plan_funcs = [</span><br><span class="line">            flight_plan_1,</span><br><span class="line">            flight_plan_2,</span><br><span class="line">            flight_plan_3,</span><br><span class="line">            flight_plan_4,</span><br><span class="line">            flight_plan_5</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        t1.execute_flight_plan(flight_plan_funcs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印所有无人机的最终位置</span></span><br><span class="line">        <span class="keyword">for</span> node, index, position <span class="keyword">in</span> t1.positions:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[UAV <span class="subst">&#123;index&#125;</span>] Final position: x=<span class="subst">&#123;position[<span class="number">0</span>]:<span class="number">.2</span>f&#125;</span>, y=<span class="subst">&#123;position[<span class="number">1</span>]:<span class="number">.2</span>f&#125;</span>, z=<span class="subst">&#123;position[<span class="number">2</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n--Simulation interrupted by user.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n--An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注：说明在代码中，将无人机向前后左右飞行封装为一个函数，多线程控制多辆无人机，判断无人机是否到达指定目标点才给下一个目标点进行控制，根据上面的例程进行修改，修改内容为无人机的飞行航线，其余不需要修改</strong></p><p><code>flight_plan_funcs</code>列表表示无人机控制函数列表，<code>flight_plan_1</code>表示第1个无人机的具体飞行控制</p></blockquote><h3 id="5-2多小车控制案例">5.2多小车控制案例</h3><blockquote><p>使用：<code>python simple_test_car.py</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> swarmae.SwarmAEClient <span class="keyword">import</span> SwarmAEClient</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SwarmaeClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.ae_client = <span class="literal">None</span></span><br><span class="line">        self.vehicles = []</span><br><span class="line">        self.vehicle_info = &#123;&#125;  <span class="comment"># 存储每辆车的初始位置和其他信息</span></span><br><span class="line">        self.positions = []  <span class="comment"># 存储每辆车的当前位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_client</span>(<span class="params">self, ue_ip=<span class="string">&quot;127.0.0.1&quot;</span>, ue_port=<span class="number">2000</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--Connecting to UE4 simulation:&quot;</span>, ue_ip, ue_port)</span><br><span class="line">        self.ae_client = SwarmAEClient(ue_ip=ue_ip, ue_port=ue_port)</span><br><span class="line">        <span class="keyword">return</span> self.ae_client</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_vehicle</span>(<span class="params">self, <span class="built_in">id</span>, max_retries=<span class="number">3</span></span>):</span><br><span class="line">        <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_retries):</span><br><span class="line">            frame_timestamp = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">            frame_timestamp, sw_vehicle, sw_code = self.ae_client.register_node(</span><br><span class="line">                node_type=<span class="string">&quot;四轮车&quot;</span>, node_name=<span class="string">&quot;无人车&quot;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>), node_no=<span class="built_in">id</span>, frame_timestamp=frame_timestamp</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> sw_code == <span class="number">200</span>:</span><br><span class="line">                vehicle_name, vehicle_no, team, vehicle_type, _, _ = sw_vehicle.get_node_info()</span><br><span class="line">                initial_location = sw_vehicle.get_location()[:<span class="number">3</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;--Vehicle <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> registered successfully: <span class="subst">&#123;vehicle_name&#125;</span>, Type: <span class="subst">&#123;vehicle_type&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;--Initial position: x=<span class="subst">&#123;initial_location[<span class="number">0</span>]:<span class="number">.2</span>f&#125;</span>, y=<span class="subst">&#123;initial_location[<span class="number">1</span>]:<span class="number">.2</span>f&#125;</span>, z=<span class="subst">&#123;initial_location[<span class="number">2</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">                self.vehicle_info[sw_vehicle] = &#123;</span><br><span class="line">                    <span class="string">&#x27;initial_location&#x27;</span>: initial_location</span><br><span class="line">                &#125;</span><br><span class="line">                self.positions.append((sw_vehicle, <span class="built_in">id</span>, initial_location))  <span class="comment"># 保存车辆及其ID</span></span><br><span class="line">                self.vehicles.append(sw_vehicle)</span><br><span class="line">                <span class="keyword">return</span> sw_code, sw_vehicle</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;--Vehicle <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> registration failed with code <span class="subst">&#123;sw_code&#125;</span>, attempt <span class="subst">&#123;attempt+<span class="number">1</span>&#125;</span> of <span class="subst">&#123;max_retries&#125;</span>&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">2</span>)  <span class="comment"># 等待2秒后重试</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Vehicle <span class="subst">&#123;<span class="built_in">id</span>&#125;</span> registration failed after <span class="subst">&#123;max_retries&#125;</span> attempts.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> sw_code, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_vehicle</span>(<span class="params">self, vehicle, throttle, steer=<span class="number">0.0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;控制车辆的移动和转向&quot;&quot;&quot;</span></span><br><span class="line">        vehicle.apply_control(throttle, steer, <span class="number">0.0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># vehicle.set_vehicle_steer(steer)  # 设置车辆方向盘转角</span></span><br><span class="line">        <span class="comment"># vehicle.control_vehicle(throttle=throttle)  # 控制车辆油门</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;【Vehicle <span class="subst">&#123;self.vehicles.index(vehicle) + <span class="number">1</span>&#125;</span>】 is moving with throttle=<span class="subst">&#123;throttle&#125;</span>, steer=<span class="subst">&#123;steer&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">brake_vehicle</span>(<span class="params">self, vehicle</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;控制车辆刹车并确保车辆停止&quot;&quot;&quot;</span></span><br><span class="line">        vehicle.apply_control(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># while True:</span></span><br><span class="line">        <span class="comment">#     # 获取车辆当前速度信息</span></span><br><span class="line">        <span class="comment">#     velocity_x, velocity_y, velocity_z, velocity, _, _, _, _, _, p, q, r, _ = vehicle.get_velocity()</span></span><br><span class="line">        <span class="comment">#     # speed = math.sqrt(velocity_x**2 + velocity_y**2 + velocity_z**2)  # 计算总速度</span></span><br><span class="line">        <span class="comment">#     # print(velocity_x, velocity_y)</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">#     if velocity_x &lt;= 0.0 or velocity_y &lt;= 0.0:  # 如果速度接近零，则停止车辆</span></span><br><span class="line">        <span class="comment">#         vehicle.apply_control(0.0, 0.0, 0.0, 1, 0)</span></span><br><span class="line">        <span class="comment">#         # vehicle.control_vehicle(throttle=0.0)</span></span><br><span class="line">        <span class="comment">#         print(f&quot;【Vehicle &#123;self.vehicles.index(vehicle) + 1&#125;】 has stopped.&quot;)</span></span><br><span class="line">        <span class="comment">#         break</span></span><br><span class="line">        <span class="comment">#     else:</span></span><br><span class="line">        <span class="comment">#         vehicle.control_vehicle(throttle=-1.0)  # 否则继续减速</span></span><br><span class="line">        <span class="comment">#     time.sleep(0.1)  # 等待0.1秒再次检查速度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_position</span>(<span class="params">self, vehicle</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新并保存车辆的当前位置。&quot;&quot;&quot;</span></span><br><span class="line">        current_location = vehicle.get_location()[:<span class="number">3</span>]</span><br><span class="line">        vehicle_index = self.vehicles.index(vehicle)</span><br><span class="line">        self.positions[vehicle_index] = (vehicle, vehicle_index + <span class="number">1</span>, current_location)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_vehicle_movement</span>(<span class="params">self, movement_func, vehicle</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行单个车辆的移动计划。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> movement_func:</span><br><span class="line">            movement_func(vehicle)  <span class="comment"># 执行传入的移动计划函数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;No movement plan provided for vehicle <span class="subst">&#123;vehicle&#125;</span>. Skipping control.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_movement_plans</span>(<span class="params">self, movement_plan_funcs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行所有车辆的移动计划。&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.vehicles) &lt; <span class="built_in">len</span>(movement_plan_funcs):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Not all vehicles were successfully registered. Adjusting the movement plans.&quot;</span>)</span><br><span class="line">            movement_plan_funcs = movement_plan_funcs[:<span class="built_in">len</span>(self.vehicles)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">            futures = []</span><br><span class="line">            <span class="keyword">for</span> vehicle, movement_plan_func <span class="keyword">in</span> <span class="built_in">zip</span>(self.vehicles, movement_plan_funcs):</span><br><span class="line">                futures.append(executor.submit(self.execute_vehicle_movement, movement_plan_func, vehicle))</span><br><span class="line">            <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">                future.result()  <span class="comment"># 等待所有车辆完成其移动计划</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parser = argparse.ArgumentParser()</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-i&quot;</span>, <span class="string">&quot;--ip&quot;</span>, default=<span class="string">&quot;127.0.0.1&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;指定服务器IP&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--port&quot;</span>, default=<span class="number">2000</span>, <span class="built_in">help</span>=<span class="string">&quot;指定服务器Port&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-n&quot;</span>, <span class="string">&quot;--number&quot;</span>, default=<span class="number">2</span>, <span class="built_in">help</span>=<span class="string">&quot;指定车辆数量&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">        t1 = SwarmaeClass()</span><br><span class="line">        t1.create_client(args.ip, args.port)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(args.number):</span><br><span class="line">            t1.create_vehicle(i+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">#####################</span></span><br><span class="line">        <span class="comment"># 定义移动计划</span></span><br><span class="line">        <span class="comment"># 前面的部分不需要改，要控制车辆的移动，只需修改下面的部分即可</span></span><br><span class="line">        <span class="comment"># movement_plan_n即第n个车辆的移动计划函数</span></span><br><span class="line">        <span class="comment"># t1.move_vehicle(vehicle, throttle, steer)  # 移动</span></span><br><span class="line">        <span class="comment">#####################</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">movement_plan_1</span>(<span class="params">vehicle</span>):</span><br><span class="line">            t1.move_vehicle(vehicle, throttle=<span class="number">1.0</span>)  <span class="comment"># 向前移动</span></span><br><span class="line">            time.sleep(<span class="number">5</span>)  <span class="comment"># 移动5秒</span></span><br><span class="line">            t1.brake_vehicle(vehicle)  <span class="comment"># 刹车并停止</span></span><br><span class="line">            t1.move_vehicle(vehicle, throttle=<span class="number">0.0</span>, steer=-<span class="number">0.5</span>)  <span class="comment"># 向左转</span></span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            t1.brake_vehicle(vehicle)  <span class="comment"># 刹车并停止</span></span><br><span class="line">            t1.move_vehicle(vehicle, throttle=<span class="number">1.0</span>)</span><br><span class="line">            time.sleep(<span class="number">4</span>)</span><br><span class="line">            t1.brake_vehicle(vehicle)  <span class="comment"># 刹车并停止</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">movement_plan_2</span>(<span class="params">vehicle</span>):</span><br><span class="line">            t1.move_vehicle(vehicle, throttle=<span class="number">0.1</span>, steer=-<span class="number">1.0</span>)  <span class="comment"># 向前向左移动</span></span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            t1.move_vehicle(vehicle, throttle=<span class="number">1.0</span>, steer=<span class="number">0</span>)  <span class="comment"># 向前向左移动</span></span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line">            t1.brake_vehicle(vehicle)  <span class="comment"># 刹车并停止</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 移动计划列表，每个元素对应一个车辆的移动路线</span></span><br><span class="line">        movement_plan_funcs = [</span><br><span class="line">            movement_plan_1,</span><br><span class="line">            movement_plan_2,</span><br><span class="line">            <span class="comment"># 添加更多车辆的移动计划</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        t1.execute_movement_plans(movement_plan_funcs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印所有车辆的最终位置</span></span><br><span class="line">        <span class="keyword">for</span> vehicle, index, position <span class="keyword">in</span> t1.positions:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;【Vehicle <span class="subst">&#123;index&#125;</span>】 Final position: x=<span class="subst">&#123;position[<span class="number">0</span>]:<span class="number">.2</span>f&#125;</span>, y=<span class="subst">&#123;position[<span class="number">1</span>]:<span class="number">.2</span>f&#125;</span>, z=<span class="subst">&#123;position[<span class="number">2</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n--Simulation interrupted by user.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n--An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-3地图信息读取">5.3地图信息读取</h3><blockquote><p>使用：<code>python get_map_info.py -s 1</code>（-s 1表示第一个科目的地图信息，需要先打开仿真地图才能获取信息）</p><p>在具体代码中调用：</p><ul><li><p>定义全局变量<code>map_info = &#123;&#125;</code>，方便在其他函数中调用</p></li><li><p>复制对应科目的函数，如<code>def get_subject_one_info(world)</code></p></li><li><p>在main函数中添加<code>map_info = get_subject_one_info(world)</code></p></li><li><p>调用地图信息的方式：</p><ul><li><p><code>map_info['BP_Bridge']['local'][0][0]</code>，表示科目一中第一条桥的x</p></li><li><p><code>map_info['BP_Bridge']['local'][0][1]</code>，表示科目一中第一条桥的y</p></li><li><p><code>map_info['BP_Bridge']['local'][0]</code>，表示科目一中第一条桥的x,y,z</p></li><li><p><code>map_info['BP_Bridge']['local'][1]</code>，表示科目一中第二条桥的x,y,z</p></li><li><p><code>map_info['SM_SpeedBump']['local'][0]</code>，表示科目一中第一条区域线的x,y,z</p></li></ul></li></ul><blockquote><p>如果是科目五中还有门框的旋转信息，则为<code>map_info['SM_DoorFrame']['rotation']</code>，表示科目五中第一条外门框的pitch, yaw, roll</p></blockquote><ol><li>科目一</li></ol><table><thead><tr><th>静态资源名</th><th>名称前缀</th><th>坐标信息示例（SDK方式）</th><th>坐标信息示例（fbx方式）</th><th>备注</th></tr></thead><tbody><tr><td>桥</td><td><code>BP_Bridge</code></td><td>第一段：<code>(x=-515.309021, y=447.157715)</code></td><td><code>x: -511.30445003032685, y: 447.1577346801758, z: 485.1984389305115</code></td><td>整座桥由12部分组成</td></tr><tr><td>区域线</td><td><code>SM_SpeedBump</code></td><td>第一条：<code>x = -1072.7</code>。第二条：<code>x = -1062.7</code></td><td><code>x: -1072.72, y: 439.79998779296875, z: 486.4460653877258</code></td><td>一共五条</td></tr></tbody></table><ol start="2"><li>科目二</li></ol><table><thead><tr><th>静态资源名</th><th>名称前缀</th><th>坐标信息示例（SDK方式）</th><th>坐标信息示例（fbx方式）</th><th>备注</th></tr></thead><tbody><tr><td>火力掩护区域</td><td><code>SM_Wall_Single</code></td><td><code>x=1286.280029, y=423.690002, z=486.449982</code></td><td><code>x: 1286.2800677490218, y: 423.69001159667823, z: 487.70000022888183</code></td><td>获取到遮掩区域的两个顶点信息</td></tr><tr><td>路障</td><td><code>SM_Obstacle</code></td><td><code>x=1761.797974, y=450.703613, z=487.442017</code></td><td><code>x: 1761.797890625, y: 450.7036328125, z: 487.44203125</code></td><td>路障有四个</td></tr></tbody></table><ol start="3"><li>科目四</li></ol><table><thead><tr><th>静态资源名</th><th>名称前缀</th><th>坐标信息示例（SDK方式）</th><th>坐标信息示例（fbx方式）</th><th>备注</th></tr></thead><tbody><tr><td>航路点信息</td><td><code>Waypoint</code></td><td>第一个：<code>x=504.899994, y=89.610001</code></td><td><code>x: 504.89998046875, y: 89.6099609375, z: 490.92625</code></td><td>一共两个航路点。</td></tr></tbody></table><ol start="4"><li>科目五</li></ol><table><thead><tr><th>静态资源名</th><th>名称前缀</th><th>坐标信息示例（SDK方式）</th><th>坐标信息示例（fbx方式）</th><th>备注</th></tr></thead><tbody><tr><td>外门框</td><td><code>SM_DoorFrame</code></td><td>第一个：<code>(x=780.000000, y=937.599976, z=490.551331)门的转向：Rotation(pitch=0.000000, yaw=0.000000, roll=0.000000)</code></td><td></td><td>一共两个门。 fbx方式读取缺少一个门框信息，可直接查询内门框信息实现穿越。</td></tr><tr><td>内门框（需要穿越的门框）</td><td><code>BP_DoorInst</code></td><td>这两个的 X，Y相同，Z 不同，绝对值|Z1 - Z2|是门的高度</td><td><code>x: 780.0, y: 937.6, z: 502.2</code></td><td>一共两个门。</td></tr></tbody></table></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">map_info = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_subject_one_info</span>(<span class="params">world</span>):</span><br><span class="line">    subject_one_info = &#123;</span><br><span class="line">        <span class="string">&#x27;Bridges&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;SpeedBumps&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取桥的坐标信息</span></span><br><span class="line">    BP_Bridges = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.name.startswith(<span class="string">&#x27;BP_Bridge&#x27;</span>), world.get_environment_objects()))</span><br><span class="line">    <span class="keyword">for</span> bridge <span class="keyword">in</span> BP_Bridges:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(bridge, <span class="string">&#x27;transform&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(bridge.transform, <span class="string">&#x27;location&#x27;</span>):</span><br><span class="line">            subject_one_info[<span class="string">&#x27;Bridges&#x27;</span>][<span class="string">&#x27;location&#x27;</span>].append([</span><br><span class="line">                bridge.transform.location.x,</span><br><span class="line">                bridge.transform.location.y,</span><br><span class="line">                bridge.transform.location.z</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取区域线的坐标信息</span></span><br><span class="line">    SM_SpeedBumps = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.name.startswith(<span class="string">&#x27;SM_SpeedBump&#x27;</span>), world.get_environment_objects()))</span><br><span class="line">    <span class="keyword">for</span> speed_bump <span class="keyword">in</span> SM_SpeedBumps:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(speed_bump, <span class="string">&#x27;transform&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(speed_bump.transform, <span class="string">&#x27;location&#x27;</span>):</span><br><span class="line">            subject_one_info[<span class="string">&#x27;SpeedBumps&#x27;</span>][<span class="string">&#x27;location&#x27;</span>].append([</span><br><span class="line">                speed_bump.transform.location.x,</span><br><span class="line">                speed_bump.transform.location.y,</span><br><span class="line">                speed_bump.transform.location.z</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> subject_one_info</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_subject_two_info</span>(<span class="params">world</span>):</span><br><span class="line">    subject_two_info = &#123;</span><br><span class="line">        <span class="string">&#x27;FireCoverArea&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;Obstacles&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取火力掩护区域的坐标信息</span></span><br><span class="line">    SM_Walls = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.name.startswith(<span class="string">&#x27;SM_Wall_Single&#x27;</span>), world.get_environment_objects()))</span><br><span class="line">    <span class="keyword">for</span> wall <span class="keyword">in</span> SM_Walls:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(wall, <span class="string">&#x27;transform&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(wall.transform, <span class="string">&#x27;location&#x27;</span>):</span><br><span class="line">            subject_two_info[<span class="string">&#x27;FireCoverArea&#x27;</span>][<span class="string">&#x27;location&#x27;</span>].append([</span><br><span class="line">                wall.transform.location.x,</span><br><span class="line">                wall.transform.location.y,</span><br><span class="line">                wall.transform.location.z</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取路障的坐标信息</span></span><br><span class="line">    SM_Obstacles = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.name.startswith(<span class="string">&#x27;SM_Obstacle&#x27;</span>), world.get_environment_objects()))</span><br><span class="line">    <span class="keyword">for</span> obstacle <span class="keyword">in</span> SM_Obstacles:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(obstacle, <span class="string">&#x27;transform&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(obstacle.transform, <span class="string">&#x27;location&#x27;</span>):</span><br><span class="line">            subject_two_info[<span class="string">&#x27;Obstacles&#x27;</span>][<span class="string">&#x27;location&#x27;</span>].append([</span><br><span class="line">                obstacle.transform.location.x,</span><br><span class="line">                obstacle.transform.location.y,</span><br><span class="line">                obstacle.transform.location.z</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> subject_two_info</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_subject_four_info</span>(<span class="params">world</span>):</span><br><span class="line">    subject_four_info = &#123;</span><br><span class="line">        <span class="string">&#x27;Waypoints&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取航路点的坐标信息</span></span><br><span class="line">    Waypoints = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.name.startswith(<span class="string">&#x27;Waypoint&#x27;</span>), world.get_environment_objects()))</span><br><span class="line">    <span class="keyword">for</span> waypoint <span class="keyword">in</span> Waypoints:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(waypoint, <span class="string">&#x27;transform&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(waypoint.transform, <span class="string">&#x27;location&#x27;</span>):</span><br><span class="line">            subject_four_info[<span class="string">&#x27;Waypoints&#x27;</span>][<span class="string">&#x27;location&#x27;</span>].append([</span><br><span class="line">                waypoint.transform.location.x,</span><br><span class="line">                waypoint.transform.location.y,</span><br><span class="line">                waypoint.transform.location.z</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> subject_four_info</span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_subject_five_info</span>(<span class="params">world</span>):</span><br><span class="line">    subject_five_info = &#123;</span><br><span class="line">        <span class="string">&#x27;OuterDoorFrames&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span>: [],</span><br><span class="line">            <span class="string">&#x27;rotation&#x27;</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;InnerDoorFrames&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span>: [],</span><br><span class="line">            <span class="string">&#x27;rotation&#x27;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取外门框的位置信息和角度信息</span></span><br><span class="line">    SM_DoorFrames = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.name.startswith(<span class="string">&#x27;SM_DoorFrame&#x27;</span>), world.get_environment_objects()))</span><br><span class="line">    <span class="keyword">for</span> door_frame <span class="keyword">in</span> SM_DoorFrames:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(door_frame, <span class="string">&#x27;transform&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(door_frame.transform, <span class="string">&#x27;location&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(door_frame.transform, <span class="string">&#x27;rotation&#x27;</span>):</span><br><span class="line">            subject_five_info[<span class="string">&#x27;OuterDoorFrames&#x27;</span>][<span class="string">&#x27;location&#x27;</span>].append([</span><br><span class="line">                door_frame.transform.location.x,</span><br><span class="line">                door_frame.transform.location.y,</span><br><span class="line">                door_frame.transform.location.z</span><br><span class="line">            ])</span><br><span class="line">            subject_five_info[<span class="string">&#x27;OuterDoorFrames&#x27;</span>][<span class="string">&#x27;rotation&#x27;</span>].append([</span><br><span class="line">                door_frame.transform.rotation.pitch,</span><br><span class="line">                door_frame.transform.rotation.yaw,</span><br><span class="line">                door_frame.transform.rotation.roll</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取内门框的位置信息和角度信息</span></span><br><span class="line">    BP_DoorInsts = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.name.startswith(<span class="string">&#x27;BP_DoorInst&#x27;</span>), world.get_environment_objects()))</span><br><span class="line">    <span class="keyword">for</span> door_inst <span class="keyword">in</span> BP_DoorInsts:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(door_inst, <span class="string">&#x27;transform&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(door_inst.transform, <span class="string">&#x27;location&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(door_inst.transform, <span class="string">&#x27;rotation&#x27;</span>):</span><br><span class="line">            subject_five_info[<span class="string">&#x27;InnerDoorFrames&#x27;</span>][<span class="string">&#x27;location&#x27;</span>].append([</span><br><span class="line">                door_inst.transform.location.x,</span><br><span class="line">                door_inst.transform.location.y,</span><br><span class="line">                door_inst.transform.location.z</span><br><span class="line">            ])</span><br><span class="line">            subject_five_info[<span class="string">&#x27;InnerDoorFrames&#x27;</span>][<span class="string">&#x27;rotation&#x27;</span>].append([</span><br><span class="line">                door_inst.transform.rotation.pitch,</span><br><span class="line">                door_inst.transform.rotation.yaw,</span><br><span class="line">                door_inst.transform.rotation.roll</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> subject_five_info</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    argparser = argparse.ArgumentParser(description=__doc__)</span><br><span class="line">    argparser.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--address&#x27;</span>, default=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line">    argparser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">2000</span>)</span><br><span class="line">    argparser.add_argument(<span class="string">&#x27;-n&#x27;</span>, <span class="string">&#x27;--number&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">1</span>)</span><br><span class="line">    argparser.add_argument(<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;--subject&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">1</span>)</span><br><span class="line">    args = argparser.parse_args()</span><br><span class="line"></span><br><span class="line">    ue_ip = args.address.strip()</span><br><span class="line">    ue_port = args.port</span><br><span class="line">    num = args.number</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 1. 首先引入sdk</span></span><br><span class="line">        <span class="keyword">from</span> swarmae.SwarmAEClient <span class="keyword">import</span> SwarmAEClient</span><br><span class="line">        <span class="keyword">from</span> swarmae.SwarmAEWorld <span class="keyword">import</span> SwarmAEWorld</span><br><span class="line">        <span class="comment"># 2. 连接UE</span></span><br><span class="line">        client = SwarmAEClient(ue_ip=ue_ip, ue_port=ue_port)</span><br><span class="line">        <span class="comment"># sdk读取仿真世界，需要 1.0.1 sdk 才支持</span></span><br><span class="line">        timestamp, world, code = client.get_world()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取科目的地图信息</span></span><br><span class="line">        <span class="keyword">if</span> args.subject == <span class="number">1</span>:</span><br><span class="line">            map_info = get_subject_one_info(world)</span><br><span class="line">        <span class="keyword">elif</span> args.subject == <span class="number">2</span>:</span><br><span class="line">            map_info = get_subject_two_info(world)</span><br><span class="line">        <span class="keyword">elif</span> args.subject == <span class="number">4</span>:</span><br><span class="line">            map_info = get_subject_four_info(world)</span><br><span class="line">        <span class="keyword">elif</span> args.subject == <span class="number">5</span>:</span><br><span class="line">            map_info = get_subject_five_info(world)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(map_info)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="6-Linux中运行仿真环境">6.Linux中运行仿真环境</h2><h3 id="6-1安装wsl-显卡驱动-开启OpenGL渲染">6.1安装wsl+显卡驱动+开启OpenGL渲染</h3><ol><li><p>安装WSL2 Ubuntu20.04：参考<a href="https://blog.csdn.net/weixin_57367513/article/details/135001273">https://blog.csdn.net/weixin_57367513/article/details/135001273</a></p></li><li><p>更新WSL2：确保你已经安装了最新版本的WSL2。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure><ol start="3"><li>确保在WSL2中启用了CUDA支持。你可以按照以下步骤安装CUDA工具包：</li></ol><p>​添加NVIDIA的APT源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin</span><br><span class="line">sudo <span class="built_in">mv</span> cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/3bf863cc.pub</span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/ /&quot;</span></span><br></pre></td></tr></table></figure><p>​更新软件包列表并安装CUDA工具包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install cuda</span><br></pre></td></tr></table></figure><p>​验证CUDA支持： 完成安装后，你可以通过以下命令验证CUDA是否正确安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>​显示如下内容说明显卡驱动安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(base) laohanba@DESKTOP-37R6FD6:~$ nvidia-smi</span><br><span class="line">Mon Sep  2 16:18:30 2024       </span><br><span class="line">+-----------------------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 560.31.01              Driver Version: 560.81         CUDA Version: 12.6     |</span><br><span class="line">|-----------------------------------------+------------------------+----------------------+</span><br><span class="line">| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                                         |                        |               MIG M. |</span><br><span class="line">|=========================================+========================+======================|</span><br><span class="line">|   0  NVIDIA GeForce RTX 4060 Ti     On  |   00000000:01:00.0  On |                  N/A |</span><br><span class="line">|  0%   40C    P3             34W /  165W |    2420MiB /  16380MiB |     22%      Default |</span><br><span class="line">|                                         |                        |                  N/A |</span><br><span class="line">+-----------------------------------------+------------------------+----------------------+</span><br><span class="line">                                                                                         </span><br><span class="line">+-----------------------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                              |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |</span><br><span class="line">|        ID   ID                                                               Usage      |</span><br><span class="line">|=========================================================================================|</span><br><span class="line">|    0   N/A  N/A        27      G   /Xwayland                                   N/A      |</span><br><span class="line">|    0   N/A  N/A        65      G   /Xwayland                                   N/A      |</span><br><span class="line">+-----------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><ol start="4"><li><p>开启OpenGL渲染</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:kisak/kisak-mesa</span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2修改配置文件">5.2修改配置文件</h3><blockquote><p>此处见Windows部分，都是一样的，部分指令不同</p></blockquote><h3 id="5-3-按流程启动仿真">5.3 按流程启动仿真</h3><ul><li><p>启动仿真</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-资料&quot;&gt;1.资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;比赛官方链接：&lt;/strong&gt;&lt;a href=&quot;https://www.osredm.com/competition/JQTJ&quot;&gt;https://www.osredm.com/competitio</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【ESP-IDF5.x】 ESP32/ESP8266驱动SHT3x温湿度传感器</title>
    <link href="https://www.mgodmonkey.cn/posts/a2ae83d0.html"/>
    <id>https://www.mgodmonkey.cn/posts/a2ae83d0.html</id>
    <published>2024-08-23T07:11:17.000Z</published>
    <updated>2024-08-23T08:28:30.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境">环境</h2><ul><li>软件环境<ul><li>VScode</li><li>ESP-IDF5.x</li></ul></li><li>硬件环境<ul><li>esp32 / esp8266</li><li>sht3x温湿度传感器</li></ul></li></ul><p>SHT3x周围电路连接如下</p><p><img src="https://s2.loli.net/2024/08/23/J2VezYiwqmTxsC9.png" alt=""></p><p>下面是SHT3x与ESP32-S3的引脚接线示例，ESP32或者ESP8266根据开发板的I2C引脚进行接线</p><table><thead><tr><th>引脚</th><th>接线</th></tr></thead><tbody><tr><td>VDD</td><td>3.3/5V</td></tr><tr><td>ADDR</td><td>GND</td></tr><tr><td>SDA</td><td>4</td></tr><tr><td>SCL</td><td>5</td></tr></tbody></table><hr><h2 id="说明">说明</h2><blockquote><p>代码示例见：<a href="https://github.com/MGod-monkey/sht3x-esp-idf5x">https://github.com/MGod-monkey/sht3x-esp-idf5x</a></p></blockquote><p>将上面的代码下载到本地并通过VScode打开，需要先选择自己芯片的平台，然后编译</p><p><img src="https://s2.loli.net/2024/08/23/bCW7pufY18lLZv9.png" alt="image-20240823155719287"></p><p>驱动sht3x的代码封装在<code>components\sht3x\sht3x.h</code>，每个函数的说明如下：</p><ol><li><p><strong><code>sht3x_init_sensor</code></strong></p><ul><li>初始化一个 SHT3x 传感器。</li><li>创建一个描述传感器的数据结构并初始化传感器设备。</li><li>参数：<ul><li><code>bus</code>: 传感器连接的 I2C 总线。</li><li><code>addr</code>: 传感器的 I2C 从设备地址。</li></ul></li><li>返回值：指向传感器数据结构的指针，初始化失败时返回 NULL。</li></ul></li><li><p><strong><code>sht3x_measure</code></strong></p><ul><li>高级测量函数，执行一次测量。</li><li>包含三个步骤：<ol><li>以高可靠性启动一次单次测量。</li><li>使用 <code>vTaskDelay</code> 等待测量结果可用。</li><li>返回浮点类型的传感器测量值。</li></ol></li><li>参数：<ul><li><code>dev</code>: 指向传感器设备数据结构的指针。</li><li><code>temperature</code>: 返回的温度值（摄氏度）。</li><li><code>humidity</code>: 返回的湿度值（百分比）。</li></ul></li><li>返回值：成功时返回 <code>true</code>，失败时返回 <code>false</code>。</li></ul></li><li><p><strong><code>sht3x_start_measurement</code></strong></p><ul><li>启动单次测量或周期性测量。</li><li>可以选择单次测量模式或周期性测量模式，以及设置测量的重复性。</li><li>参数：<ul><li><code>dev</code>: 指向传感器设备数据结构的指针。</li><li><code>mode</code>: 测量模式（单次或周期性），参见 <code>sht3x_mode_t</code> 类型。</li><li><code>repeat</code>: 测量的重复性，参见 <code>sht3x_repeat_t</code> 类型。</li></ul></li><li>返回值：成功时返回 <code>true</code>，失败时返回 <code>false</code>。</li></ul></li><li><p><strong><code>sht3x_get_measurement_duration</code></strong></p><ul><li>获取测量所需的 RTOS tick 数。</li><li>返回给定重复性下执行一次测量所需的时间。</li><li>用户任务可以直接使用此函数返回的持续时间来等待测量结果。</li><li>参数：<ul><li><code>repeat</code>: 测量的重复性，参见 <code>sht3x_repeat_t</code> 类型。</li></ul></li><li>返回值：测量持续时间，单位为 RTOS ticks。</li></ul></li><li><p><strong><code>sht3x_get_raw_data</code></strong></p><ul><li>从传感器读取测量结果并存储为原始数据。</li><li>读取温度和压力的测量结果，检查 CRC 校验码并存储在字节数组中。</li><li>参数：<ul><li><code>dev</code>: 指向传感器设备数据结构的指针。</li><li><code>raw_data</code>: 存储原始数据的字节数组。</li></ul></li><li>返回值：成功时返回 <code>true</code>，失败时返回 <code>false</code>。</li></ul></li><li><p><strong><code>sht3x_compute_values</code></strong></p><ul><li>从原始数据计算出传感器的温度和湿度值。</li><li>参数：<ul><li><code>raw_data</code>: 包含原始数据的字节数组。</li><li><code>temperature</code>: 返回的温度值（摄氏度）。</li><li><code>humidity</code>: 返回的湿度值（百分比）。</li></ul></li><li>返回值：成功时返回 <code>true</code>，失败时返回 <code>false</code>。</li></ul></li><li><p><strong><code>sht3x_get_results</code></strong></p><ul><li>获取传感器测量结果并返回传感器值。</li><li>该函数结合了 <code>sht3x_read_raw_data</code> 和 <code>sht3x_compute_values</code> 函数，读取原始数据并计算出传感器的温度和湿度值。</li><li>参数：<ul><li><code>dev</code>: 指向传感器设备数据结构的指针。</li><li><code>temperature</code>: 返回的温度值（摄氏度）。</li><li><code>humidity</code>: 返回的湿度值（百分比）。</li></ul></li><li>返回值：成功时返回 <code>true</code>，失败时返回 <code>false</code>。</li></ul></li></ol><p>获取SHT3x温湿度传感器的示例代码如下：</p><ul><li><p>测量模式选择：SINGLE_SHOT_HIGH_LEVEL、SINGLE_SHOT_LOW_LEVEL或周期模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #define SINGLE_SHOT_LOW_LEVEL</span></span><br><span class="line"><span class="comment">// #define SINGLE_SHOT_HIGH_LEVEL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(SINGLE_SHOT_HIGH_LEVEL)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">user_task</span> <span class="params">(<span class="type">void</span> *pvParameters)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> temperature;</span><br><span class="line">    <span class="type">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    TickType_t last_wakeup = xTaskGetTickCount();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// perform one measurement and do something with the results</span></span><br><span class="line">        <span class="keyword">if</span> (sht3x_measure (sensor, &amp;temperature, &amp;humidity))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.3f SHT3x Sensor: %.2f °C, %.2f %%\n&quot;</span>, </span><br><span class="line">        (<span class="type">double</span>)sdk_system_get_time()*<span class="number">1e-3</span>, temperature, humidity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// wait until 5 seconds are over</span></span><br><span class="line">        vTaskDelayUntil(&amp;last_wakeup, <span class="number">5000</span> / portTICK_PERIOD_MS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(SINGLE_SHOT_LOW_LEVEL)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">user_task</span> <span class="params">(<span class="type">void</span> *pvParameters)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> temperature;</span><br><span class="line">    <span class="type">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    TickType_t last_wakeup = xTaskGetTickCount();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the measurement duration for high repeatability;</span></span><br><span class="line">    <span class="type">uint8_t</span> duration = sht3x_get_measurement_duration(sht3x_high);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Trigger one measurement in single shot mode with high repeatability.</span></span><br><span class="line">        sht3x_start_measurement (sensor, sht3x_single_shot, sht3x_high);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Wait until measurement is ready (constant time of at least 30 ms</span></span><br><span class="line">        <span class="comment">// or the duration returned from *sht3x_get_measurement_duration*).</span></span><br><span class="line">        vTaskDelay (duration);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// retrieve the values and do something with them</span></span><br><span class="line">        <span class="keyword">if</span> (sht3x_get_results (sensor, &amp;temperature, &amp;humidity))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.3f SHT3x Sensor: %.2f °C, %.2f %%\n&quot;</span>, </span><br><span class="line">        (<span class="type">double</span>)sdk_system_get_time()*<span class="number">1e-3</span>, temperature, humidity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// wait until 5 seconds are over</span></span><br><span class="line">        vTaskDelayUntil(&amp;last_wakeup, <span class="number">5000</span> / portTICK_PERIOD_MS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span>  <span class="comment">// PERIODIC MODE</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">user_task</span> <span class="params">(<span class="type">void</span> *pvParameters)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> temperature;</span><br><span class="line">    <span class="type">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start periodic measurements with 1 measurement per second.</span></span><br><span class="line">    sht3x_start_measurement (sensor, sht3x_periodic_1mps, sht3x_high);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait until first measurement is ready (constant time of at least 30 ms</span></span><br><span class="line">    <span class="comment">// or the duration returned from *sht3x_get_measurement_duration*).</span></span><br><span class="line">    vTaskDelay (sht3x_get_measurement_duration(sht3x_high));</span><br><span class="line"></span><br><span class="line">    TickType_t last_wakeup = xTaskGetTickCount();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Get the values and do something with them.</span></span><br><span class="line">        <span class="keyword">if</span> (sht3x_get_results (sensor, &amp;temperature, &amp;humidity))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.3f SHT3x Sensor: %.2f °C, %.2f %%\n&quot;</span>, </span><br><span class="line">        (<span class="type">double</span>)sdk_system_get_time()*<span class="number">1e-3</span>, temperature, humidity);</span><br><span class="line">        <span class="comment">// Wait until 2 seconds (cycle time) are over.</span></span><br><span class="line">        vTaskDelayUntil(&amp;last_wakeup, <span class="number">2000</span> / portTICK_PERIOD_MS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li><p>单次测量模式</p><ul><li><p>在单次测量模式下，一条测量命令会触发精确采集一个数据对。每个数据对包括 16 位十进制的温度和湿度值。由于测量持续时间长达 15 毫秒，因此测量过程被分成多个步骤，以避免在测量过程中阻塞用户任务：</p><ol><li><p>使用函数 sht3x_start_measurement 触发传感器，执行一次测量。</p></li><li><p>使用函数 vTaskDelay 等待测量持续时间，直到获得测量结果。使用至少 30 毫秒的恒定持续时间或函数 sht3x_get_measurement_duration 返回的以 RTOS ticks 为单位的持续时间进行等待。</p></li><li><p>使用函数 sht3x_get_results 或函数 sht3x_get_raw_data 获取浮点传感器值或原始数据。</p></li></ol></li><li><p>在单次模式下，每次需要新的传感器值时，用户任务都必须执行所有步骤。</p></li></ul></li></ul><blockquote><p>为方便起见，一个高级函数 sht3x_measure（sht3x_measure）只需一个函数即可完成上述三个步骤的测量。该函数是使用传感器的最简单方法。它最适合不想控制传感器细节的用户。<br>这种模式的优点是，传感器可以在连续测量之间切换到睡眠模式，从而更加节能。当测量速率小于每秒1次测量时，这种模式尤其有用。</p></blockquote><ul><li><p>周期模式</p><ul><li><p>在这种模式下，发出的一条测量命令会产生一个数据对流。每个数据对由 16 位十进制的温度和湿度值组成。测量命令一经发送至传感器，传感器就会自动以每秒 0.5、1、2、4 或 10 次的测量速率定期执行测量。数据对可以以相同或更低的速率获取。与单次测量模式一样，测量过程分为以下几个步骤：</p><ol><li><p>使用函数 sht3x_start_measurement，以给定的速率触发传感器，开始周期性测量。</p></li><li><p>使用函数 vTaskDelay 等待测量持续时间，直到获得第一个结果。使用至少 30 毫秒的恒定持续时间或函数 sht3x_get_measurement_duration 返回的以 RTOS ticks 为单位的持续时间进行等待。</p></li></ol></li></ul></li></ul></li></ul><blockquote><p>使用函数 sht3x_get_results 或函数 sht3x_get_raw_data 获取浮点传感器值或原始数据。<br>与单次测量模式不同的是，步骤1和2只需执行一次。一旦开始测量，用户任务只需定期获取数据即可，但传感器在整个过程中一直保持活跃状态，因此能耗较高</p></blockquote><blockquote><p><strong>注：获取测量结果的速率不得大于传感器的周期性测量速率。为避免因传感器的定时容差造成冲突，应小于该速率。</strong></p></blockquote><ul><li><p>初试化I2C并读取SHT3x温湿度的值</p><blockquote><p>注：如果SHT3x的ADDR引脚接的不是GND，而是VCC，则需要将地址改为SHT3x_ADDR_2</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_SCL_IO           GPIO_NUM_5      <span class="comment">/*!&lt; GPIO number used for I2C master clock */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_SDA_IO           GPIO_NUM_4      <span class="comment">/*!&lt; GPIO number used for I2C master data  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_NUM              0              <span class="comment">/*!&lt; I2C master i2c port number, the number of i2c peripheral interfaces available will depend on the chip */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_FREQ_HZ          400000           <span class="comment">/*!&lt; I2C master clock frequency */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_TX_BUF_DISABLE   0                <span class="comment">/*!&lt; I2C master doesn&#x27;t need buffer */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_RX_BUF_DISABLE   0                <span class="comment">/*!&lt; I2C master doesn&#x27;t need buffer */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_TIMEOUT_MS       1000             <span class="comment">/*!&lt; I2C master timeout in milliseconds */</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">app_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Set UART Parameter.</span></span><br><span class="line">    uart_set_baud(<span class="number">0</span>, <span class="number">115200</span>);</span><br><span class="line">    <span class="comment">// Give the UART some time to settle</span></span><br><span class="line">    vTaskDelay(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Init I2C bus interfaces at which SHT3x sensors are connected</span></span><br><span class="line">    <span class="type">int</span> i2c_master_port = I2C_MASTER_NUM;</span><br><span class="line"></span><br><span class="line">    <span class="type">i2c_config_t</span> conf = &#123;</span><br><span class="line">        .mode = I2C_MODE_MASTER,</span><br><span class="line">        .sda_io_num = I2C_MASTER_SDA_IO,</span><br><span class="line">        .scl_io_num = I2C_MASTER_SCL_IO,</span><br><span class="line">        .sda_pullup_en = GPIO_PULLUP_ENABLE,</span><br><span class="line">        .scl_pullup_en = GPIO_PULLUP_ENABLE,</span><br><span class="line">        .master.clk_speed = I2C_MASTER_FREQ_HZ,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    i2c_param_config(i2c_master_port, &amp;conf);</span><br><span class="line"></span><br><span class="line">    i2c_driver_install(i2c_master_port, conf.mode, I2C_MASTER_RX_BUF_DISABLE, I2C_MASTER_TX_BUF_DISABLE, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// Create the sensors, multiple sensors are possible.</span></span><br><span class="line">    <span class="keyword">if</span> ((sensor = sht3x_init_sensor(I2C_MASTER_NUM, SHT3x_ADDR_1)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create a user task that uses the sensors.</span></span><br><span class="line">        xTaskCreate(user_task, <span class="string">&quot;user_task&quot;</span>, TASK_STACK_DEPTH, <span class="literal">NULL</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Could not initialize SHT3x sensor\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果串口输出的结果为<code>Could not initialize SHT3x sensor</code>，可以通过下面的程序来扫描I2C设备来确保SHT3x是否连接正常</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;driver/i2c.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_SCL_IO           GPIO_NUM_5      <span class="comment">/*!&lt; GPIO number used for I2C master clock */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_SDA_IO           GPIO_NUM_4      <span class="comment">/*!&lt; GPIO number used for I2C master data  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_NUM              0                          <span class="comment">/*!&lt; I2C master i2c port number, the number of i2c peripheral interfaces available will depend on the chip */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_FREQ_HZ          400000                     <span class="comment">/*!&lt; I2C master clock frequency */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_TX_BUF_DISABLE   0                          <span class="comment">/*!&lt; I2C master doesn&#x27;t need buffer */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_RX_BUF_DISABLE   0                          <span class="comment">/*!&lt; I2C master doesn&#x27;t need buffer */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_MASTER_TIMEOUT_MS       1000                       <span class="comment">/*!&lt; I2C master timeout in milliseconds */</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">i2c_scanner</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">i2c_config_t</span> conf = &#123;</span><br><span class="line">        .mode = I2C_MODE_MASTER,</span><br><span class="line">        .sda_io_num = I2C_MASTER_SDA_IO,</span><br><span class="line">        .scl_io_num = I2C_MASTER_SCL_IO,</span><br><span class="line">        .sda_pullup_en = GPIO_PULLUP_ENABLE,</span><br><span class="line">        .scl_pullup_en = GPIO_PULLUP_ENABLE,</span><br><span class="line">        .master.clk_speed = I2C_MASTER_FREQ_HZ,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    i2c_param_config(I2C_MASTER_NUM, &amp;conf);</span><br><span class="line">    i2c_driver_install(I2C_MASTER_NUM, conf.mode, I2C_MASTER_RX_BUF_DISABLE, I2C_MASTER_TX_BUF_DISABLE, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I2C scanner. Scanning...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> address = <span class="number">1</span>; address &lt; <span class="number">127</span>; address++) &#123;</span><br><span class="line">        <span class="type">i2c_cmd_handle_t</span> cmd = i2c_cmd_link_create();</span><br><span class="line">        i2c_master_start(cmd);</span><br><span class="line">        i2c_master_write_byte(cmd, (address &lt;&lt; <span class="number">1</span>) | I2C_MASTER_WRITE, <span class="literal">true</span>);</span><br><span class="line">        i2c_master_stop(cmd);</span><br><span class="line">        <span class="type">esp_err_t</span> ret = i2c_master_cmd_begin(I2C_MASTER_NUM, cmd, <span class="number">1000</span> / portTICK_PERIOD_MS);</span><br><span class="line">        i2c_cmd_link_delete(cmd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret == ESP_OK) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;I2C device found at address 0x%02x\n&quot;</span>, address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Scan completed.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">app_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    i2c_scanner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果中I2C地址有0x44或者0x45则说明SHT3x连接正常</p><p><img src="https://s2.loli.net/2024/08/23/MzbXm7RA8DodcKV.png" alt="image-20240823162335559"></p><p>最终的结果如下：</p><p><img src="https://s2.loli.net/2024/08/23/XyNKSpIQolcJd3v.png" alt="image-20240823161656056"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;软件环境
&lt;ul&gt;
&lt;li&gt;VScode&lt;/li&gt;
&lt;li&gt;ESP-IDF5.x&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬件环境
&lt;ul&gt;
&lt;li&gt;esp32 / esp8266&lt;/li&gt;
&lt;li&gt;sht3x温湿度传感</summary>
      
    
    
    
    <category term="esp-idf" scheme="https://www.mgodmonkey.cn/categories/esp-idf/"/>
    
    
    <category term="ESP32" scheme="https://www.mgodmonkey.cn/tags/ESP32/"/>
    
    <category term="esp-idf" scheme="https://www.mgodmonkey.cn/tags/esp-idf/"/>
    
  </entry>
  
  <entry>
    <title>Linux/Ubuntu安装图形界面版clash-gui</title>
    <link href="https://www.mgodmonkey.cn/posts/a5d6f412.html"/>
    <id>https://www.mgodmonkey.cn/posts/a5d6f412.html</id>
    <published>2024-06-18T09:40:23.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装Clash">1.安装Clash</h2><ol><li><p>首先，下载<a href="https://github.com/MGod-monkey/clash-for-all-backup/releases/download/v0.20.39/Clash.for.Windows-0.20.39-x64-linux.tar.gz">Clash.for.Windows-0.20.39-x64-linux.tar.gz</a>【网速慢的用gitee进行下载：<a href="https://gitee.com/mgod_wu/clash-for-all-backup/releases/tag/v0.20.39">https://gitee.com/mgod_wu/clash-for-all-backup/releases/tag/v0.20.39</a>】，下载完成后终端进入下载目录运行以下命令进行解压：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf Clash.for.Windows-0.20.39-x64-linux.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压完成后，可以将文件夹改名并移到<code>/opt/</code>：目录中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> Clash\ <span class="keyword">for</span>\ Windows-0.20.39-x64-linux /opt/clash</span><br></pre></td></tr></table></figure></li><li><p>通过<code>sudo ls /opt/clash</code>查看目录内结构：</p><p><img src="https://s2.loli.net/2024/06/18/TQIAzWxSZ5as3rF.png" alt=""></p></li><li><p><code>cfw</code>就是<code>clash for windows</code>的意思，原作者把gui界面也移植到了linux中，我们可以运行以下命令打开：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/clash</span><br><span class="line">./cfw</span><br></pre></td></tr></table></figure><p>打开之后就是以下界面：<br><img src="https://s2.loli.net/2024/06/18/L3DnK28uMkiwjls.png" alt=""></p><p>勾选底下的<code>start with linux</code>，这样就可以开机跟随系统启动了</p></li><li><p>代理地址的导入只需要切换到<code>Profiles</code>页面，输入自己购买的订阅地址即可：<br><img src="https://s2.loli.net/2024/06/18/smnlXTxHBgV84oQ.png" alt=""><br>订阅完成后，切换到<code>Proxis</code>页面就可以切换节点：<br><img src="https://s2.loli.net/2024/06/18/Po7d4r3sflCLYUS.png" alt=""></p></li></ol><h2 id="2-配置桌面图标">2. 配置桌面图标</h2><p><code>clash for windows</code>linux版本默认是没有桌面图标的，如果退出了就只能重新通过命令行进入，比较麻烦，所以这里我们配置一下桌面图标。</p><ol><li><p>进入<code>~/.local/share/applications</code>目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.local/share/applications</span><br></pre></td></tr></table></figure></li><li><p>创建<code>clash_gui.desktop</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano clash_gui.desktop</span><br></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=clash <span class="keyword">for</span> linux</span><br><span class="line">Icon=/opt/clash/clash.png</span><br><span class="line">Exec=/opt/clash/cfw</span><br><span class="line">Type=Application</span><br></pre></td></tr></table></figure><blockquote><p>需要根据自己的情况修改的只有以下两个字段：</p><ul><li><code>Icon</code> 是桌面图标所在地址，可以自己网上找一个clash图标下载即可，例如我的图标是：<a href="https://gitee.com/mgod_wu/clash-for-all-backup/raw/main/clash.png">https://gitee.com/mgod_wu/clash-for-all-backup/raw/main/clash.png</a>，然后复制到软件目录下<code>sudo cp clash.png /opt/clash</code></li><li><code>Exec</code> 表示<code>cfw</code>命令，这里我的<code>cfw</code>文件是在<code>/opt/clash</code>目录下，所以我的执行命令如上所是。<br>然后保存退出。</li></ul><p><strong>注：确保路径正确，否则图标将不会显示</strong></p></blockquote></li><li><p>最后增加权限:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> a+x clash_gui.desktop</span><br></pre></td></tr></table></figure><p>然后便可在应用程序中看到clash的桌面图标了，下次我们直接点击桌面图标进入即可，右键图标还可以选择加入图标。</p><p><img src="https://s2.loli.net/2024/06/18/ERZXeh89fb7Jpma.png" alt=""></p></li></ol><h2 id="3-开启系统代理">3. 开启系统代理</h2><p>不同于windows版本的clash-gui，linux下的系统代理需要自己在系统的网络中进行手动设置，设置过程如下：</p><ul><li>打开ubuntu的系统设置，选择<code>网络</code>—&gt;<code>网络代理</code></li></ul><p><img src="https://s2.loli.net/2024/06/18/pWan3FIfu2lScTg.png" alt=""></p><ul><li>将网络代理切换为<code>手动</code>，如图所示，将HTTP和HTTPS代理端口填写为上面获取到的HTTP端口，Socks主机端口号也填写成如下形式。</li></ul><p><img src="https://s2.loli.net/2024/06/18/964XldcAZ2fwhyv.png" alt=""></p><p>这样系统代理部分就完成了，之后只要在clash中选择节点通常就可以使用了。如果需要关闭代理，那么同样把<code>网络代理</code>从<code>手动</code>改为<code>关闭</code>即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装Clash&quot;&gt;1.安装Clash&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先，下载&lt;a href=&quot;https://github.com/MGod-monkey/clash-for-all-backup/releases/download/v0.20.39/</summary>
      
    
    
    
    <category term="Linux" scheme="https://www.mgodmonkey.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.mgodmonkey.cn/tags/Linux/"/>
    
    <category term="clash" scheme="https://www.mgodmonkey.cn/tags/clash/"/>
    
  </entry>
  
  <entry>
    <title>从0入门自主空中机器人-5-Airsim-PX4仿真环境搭建</title>
    <link href="https://www.mgodmonkey.cn/posts/982cb875.html"/>
    <id>https://www.mgodmonkey.cn/posts/982cb875.html</id>
    <published>2024-06-11T01:44:00.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>AirSim项目地址：</strong><a href="https://github.com/microsoft/AirSim">https://github.com/microsoft/AirSim</a></p><p><strong>AirSim官方教程：</strong><a href="https://microsoft.github.io/AirSim/">Home - AirSim (microsoft.github.io)</a></p><p><strong>CSDN参考教程:</strong> <a href="https://blog.csdn.net/qq_45709806/article/details/136062458">AirSim学习（1）安装Unreal Engine和AirSim</a></p><p><strong>视频教程：</strong></p><ul><li><p><a href="https://www.bilibili.com/video/BV1Rz4y1t7Zf">【AirSim】我有自己的无人机啦 - bilibili</a></p></li><li><p><a href="https://www.zhihu.com/zvideo/1365229339978682368">Chris Lovett的讲解在自己的Windows上实现AirSim仿真 - 知乎 (zhihu.com)</a></p></li></ul></blockquote><h2 id="1-AirSim-Windows环境配置">1.AirSim-Windows环境配置</h2><blockquote><p><strong>注：Windows环境需要自行安装VS2022或以上版本，Unreal Engine &gt;= 4.27（推荐4.27），以及wsl2（在Windows上运行Airsim，在wsl或者vm虚拟机上通过ros控制无人机）</strong></p><ul><li><p>安装虚拟引擎</p><ul><li><p>1.<a href="https://www.unrealengine.com/download">【下载并安装EPIC】</a> ，虽然虚幻引擎是开源和免费下载的，但仍然需要注册</p></li><li><p>2.运行<strong>Epic Games Launcher</strong>，打开左侧窗格中的 “<strong>虚幻引擎</strong>” 选项卡。单击右上角的 “<strong>安装</strong>” 按钮，该按钮应显示下载 <strong>UE&gt; = 4.27（推荐4.27）</strong> 的选项。选择安装位置以满足您的需求，如下图所示。如果您安装了多个版本的<strong>Unreal</strong>，请单击该版本的启动按钮旁边的向下箭头，以确保将您使用的版本设置为 “<strong>当前</strong>”。</p><p><strong>Note</strong>: 如果您有UE 4.16或更旧的项目，请参阅 [升级指南](https:// <a href="http://microsoft.github.io/AirSim/unreal_upgrade/">microsoft.github.io/AirSim/unreal_upgrade/</a>) 来升级您的项目。</p></li></ul></li><li><p>安装VS2022</p><ul><li>1.<a href="https://mp.weixin.qq.com/s?__biz=MzA4MjU4MTg2Ng==&amp;mid=2247523511&amp;idx=7&amp;sn=57646ed6e7f178334c8a7a3593022f0e&amp;chksm=9f815cb2a8f6d5a406cb4bd9ab4d578c67a8556f9296a579f351df0c895290d3ad479dfcd138&amp;scene=21#wechat_redirect">Visual Studio2022安装教程 (qq.com)</a>。确保选择安装时勾选了<strong>C ++桌面开发</strong> 和**Windows 10 SDK 10.0.19041（如果是Windows11还需要选择Windows11的SDK）**进行桌面开发 (默认情况下应选择)，然后选择最新的。<strong>NET Framework SDK</strong>下的 “<strong>单个组件</strong>” 选项卡，同时安装VS 2022。</li></ul><p><img src="https://s2.loli.net/2024/02/28/37yMhW9EUtpa2cB.png" alt=""></p></li><li><p>Windows安装wsl2</p><ul><li><strong>参考这个教程安装（ubuntu版本选择20最好）：</strong><a href="https://zhuanlan.zhihu.com/p/475462241">Windows 11 安装 WSL2 - 知乎</a></li></ul></li></ul></blockquote><h3 id="1-1Build-Airsim">1.1Build Airsim</h3><ol><li><p>下载源码到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/microsoft/AirSim.git</span><br><span class="line"><span class="comment"># 国内网络环境不好时选择下面</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.moeyy.xyz/https://github.com/microsoft/AirSim.git</span><br></pre></td></tr></table></figure></li><li><p>安装依赖项并编译</p><ol><li><p><a href="https://cmake.org/download/">【下载并安装Cmake】</a>，安装时记得勾选添加到环境中</p><img src="https://s2.loli.net/2024/02/28/BnefXiZt3bp8lvY.png" style="zoom:50%;" /></li><li><p>安装<strong>Cmake</strong>完后重启电脑以生效环境，打开<code>Developer Command Prompt for VS 2022</code>，在Windows搜索中搜索然后使用管理员打开，<code>cd AirSim</code>记得cd进入Airsim所在的目录</p></li><li><p>输入<code>.\build.cmd</code>进行编译Airsim，如果在下面的过程中卡壳了，<strong>Ctrl+C</strong>终止编译，然后重新编译，直到下载完成并正常编译完成</p></li></ol></li></ol><img src="https://s2.loli.net/2024/02/28/3RUyckmza5Twj9b.png" style="zoom:50%;" /><ol start="3"><li><p>使用<strong>VS2022</strong>编译打开</p><ol><li><p>使用<code>Developer Command Prompt for VS 2022</code>进入<code>AirSim\Unreal\Environments\Blocks</code>，执行<code>.\update_from_git.bat</code></p></li><li><p>双击打开<code>Blocks.sln</code>，会自动启动<strong>VS2022</strong></p></li><li><p>右键<code>Block</code>设为为启动项目</p><img src="https://s2.loli.net/2024/03/28/6ALzG4JCR3QOdgb.png" style="zoom:80%;" /></li><li><p>编译器选择<code>DebugGame Editor</code>，然后启动<strong>本地Windows调试器</strong>，编译完成自动打开虚幻引擎</p><p><img src="https://s2.loli.net/2024/03/28/V7Isc4tQrbgJvXk.png" alt=""></p></li><li><p>点击运行，点击**‘是’<strong>选择仿真车，点击</strong>’否’**选择仿真无人机，当出现下面的画面则表示环境搭建成功</p><img src="https://s2.loli.net/2024/03/28/oEuhpY5cqtKIGbS.png" style="zoom:50%;" /></li></ol></li></ol><h3 id="1-2自定义场景">1.2自定义场景</h3><blockquote><p>创建一个自定义的虚拟场景，并通过<strong>Airsim</strong>加载</p></blockquote><ol><li><p>打开<strong>Epic</strong> -&gt; 点击<strong>虚幻商城</strong> -&gt; 搜索<strong>环境</strong>类型的素材（推荐免费：搜索&quot;<strong>Assetsville Town或City Park</strong>&quot; -&gt; 筛选结果选择免费 -&gt; 添加致购物车进行购买）-&gt; 点击上方的<strong>库</strong>，选择刚才购买的<strong>City Park</strong>创建工程，选定路径</p><p><img src="https://s2.loli.net/2024/06/11/opNvHEOc7L9dnGV.png" alt="image-20240611162643650"></p><p><img src="https://s2.loli.net/2024/06/11/tlpfGvI9JxaKE2N.png" alt="image-20240611163507427"></p></li><li><p>导入完成后双击打开该工程</p><blockquote><p>注：如果加载过程中黑屏或者卡住可以重启<strong>Unreal Engine</strong>，如果实在打开太卡或太慢可以选择上面购买<strong>City Park</strong>第二个那个轻量版地图</p></blockquote><p><img src="https://s2.loli.net/2024/06/11/oZ7UkgFCfnQ8TVt.png" alt="image-20240611192338259"></p></li><li><p>关闭工程，将<code>AirSim\Unreal\Plugins</code>文件夹复制到刚才的工程目录下，然后双击<code>CityParkEnvironmentMini.uproject</code>，弹出<strong>Rebuild</strong>窗口，点击<strong>是</strong></p><p><img src="https://s2.loli.net/2024/06/11/8Elr6XORuQLNDof.png" alt="image-20240611195006551"></p></li><li><p>重新编译完成后，右下角弹出更新插件，点击<strong>管理插件</strong>即可看到<strong>AirSim插件</strong>添加到工程中，然后点击功能栏的<code>设置</code> -&gt; <code>世界场景设置</code> -&gt; 游戏模式重载选择<code>AirSimGameMode</code></p><p><img src="https://s2.loli.net/2024/06/11/c2L3lwUdXxyzbDT.png" alt="image-20240611195450875"></p><p><img src="https://s2.loli.net/2024/06/11/I1nkLQ9wtahvN8C.png" alt="image-20240611195844988"></p></li><li><p>点击运行，如果出现弹窗，选择<code>是</code>启动车辆仿真，<code>否</code>启动无人机仿真，按<code>F1</code>查看帮助</p><p><img src="https://s2.loli.net/2024/06/11/bmf5LCSIpjDP9Bu.png" alt="image-20240611200347055"></p><ol start="6"><li><p>修改配置文件，前往<code>C:\User\&#123;你的用户名&#125;\Documents\AirSim\Settings.json</code>,文件配置项参考<a href="https://microsoft.github.io/AirSim/settings/">https://microsoft.github.io/AirSim/settings/</a>，以下是推荐的配置文件，需要搭配第二部分的设置使用，其中<strong>LocalHostIp</strong>为Windows本机的IP地址，通过cmd指令输入<code>ipconfig</code>进行查看，一般为192.168.1.x，或者其他，你可以通过<strong>WSL</strong>或者<strong>VM虚拟机</strong>ping一下看看通不通</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;SettingsVersion&quot;</span><span class="punctuation">:</span> <span class="number">1.2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SimMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Multirotor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ClockType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SteppableClock&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Vehicles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;PX4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;VehicleType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PX4Multirotor&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;UseSerial&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;LockStep&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;UseTcp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;TcpPort&quot;</span><span class="punctuation">:</span> <span class="number">4560</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ControlIp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;remote&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ControlPortLocal&quot;</span><span class="punctuation">:</span> <span class="number">14540</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ControlPortRemote&quot;</span><span class="punctuation">:</span> <span class="number">14580</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;LocalHostIp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.1.116&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Sensors&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Barometer&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;SensorType&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;PressureFactorSigma&quot;</span><span class="punctuation">:</span> <span class="number">0.0001825</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Imu&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;SensorType&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Enabled&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;AngularRandomWalk&quot;</span><span class="punctuation">:</span> <span class="number">0.3</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;GyroBiasStabilityTau&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;GyroBiasStability&quot;</span><span class="punctuation">:</span> <span class="number">4.6</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;VelocityRandomWalk&quot;</span><span class="punctuation">:</span> <span class="number">0.24</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;AccelBiasStabilityTau&quot;</span><span class="punctuation">:</span> <span class="number">800</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;AccelBiasStability&quot;</span><span class="punctuation">:</span> <span class="number">36</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Gps&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;SensorType&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Enabled&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EphTimeConstant&quot;</span><span class="punctuation">:</span> <span class="number">0.9</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EpvTimeConstant&quot;</span><span class="punctuation">:</span> <span class="number">0.9</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EphInitial&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EpvInitial&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EphFinal&quot;</span><span class="punctuation">:</span> <span class="number">0.1</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EpvFinal&quot;</span><span class="punctuation">:</span> <span class="number">0.1</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EphMin3d&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EphMin2d&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;UpdateLatency&quot;</span><span class="punctuation">:</span> <span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;UpdateFrequency&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;StartupDelay&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;SensorType&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Enabled&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;MinDistance&quot;</span><span class="punctuation">:</span> <span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;MaxDistance&quot;</span><span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;X&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;Y&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;Z&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Yaw&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;Pitch&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;Roll&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;DrawDebugPoints&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;NAV_RCL_ACT&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;NAV_DLL_ACT&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;COM_OBL_ACT&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;LPE_LAT&quot;</span><span class="punctuation">:</span> <span class="number">47.641468</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;LPE_LON&quot;</span><span class="punctuation">:</span> <span class="number">-122.140165</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-WSL2或者VM虚拟机环境配置">2. WSL2或者VM虚拟机环境配置</h2><blockquote><p>注：WSL或VM虚拟机需要如下环境</p><ul><li>ubuntu系统</li><li>gcc&gt;=8：<code>gcc -v</code> <code>sudo apt install gcc</code></li><li>ROS1或者ROS2：安装参考<a href="https://www.mgodmonkey.cn/posts/232d6cf1.html">ROS 资源汇总</a></li><li>PX4仿真：安装参考<a href="https://www.mgodmonkey.cn/posts/cfe889db.html">从0入门自主空中机器人-4-【PX4与Gazebo入门】</a></li><li>QGC以及一些常见的软件：安装参考<a href="https://www.mgodmonkey.cn/posts/eb82f52e.html">从0入门自主空中机器人-3-【环境与常用软件安装】</a></li></ul></blockquote><ol><li><p>复制一份<code>AirSim</code>工程目录到<strong>WSL</strong>或<strong>VM虚拟机</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu18</span></span><br><span class="line">sudo apt-get install ros-melodic-tf2-sensor-msgs ros-melodic-tf2-geometry-msgs ros-melodic-mavros*</span><br><span class="line"><span class="comment"># Ubuntu20</span></span><br><span class="line">sudo apt-get install ros-noetic-tf2-sensor-msgs ros-noetic-tf2-geometry-msgs ros-noetic-mavros*</span><br><span class="line"><span class="comment"># 初试化AirSim</span></span><br><span class="line"><span class="built_in">cd</span> AirSim</span><br><span class="line">sudo bash ./setup.sh</span><br><span class="line">sudo bash ./build.sh</span><br></pre></td></tr></table></figure></li><li><p>编译ROS包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ROS1</span></span><br><span class="line"><span class="built_in">cd</span> AirSim/ros</span><br><span class="line">catkin_make</span><br><span class="line"><span class="comment"># ROS2</span></span><br><span class="line"><span class="built_in">cd</span> AirSim/ros2</span><br><span class="line">colcon build</span><br></pre></td></tr></table></figure></li><li><p>配置<code>~/.bashrc</code>环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip地址为运行airsim的Windows的ip</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PX4_SIM_HOST_ADDR=192.168.1.116&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="comment"># 记得查看一下自己的路径对不对</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/Airsim/ros/devel/setup.sh&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>开放防火墙（如果没有装防火墙就不需要这一步了）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 4560</span><br><span class="line">sudo ufuw allow 10049</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在Window中启动AirSim（记得修改配置文件后重新启动），窗口显示等待TCP连接</p><p><img src="https://s2.loli.net/2024/06/12/1tAXWDj4BySsT2H.png" alt="image-20240612155513180"></p></li><li><p>在<strong>WSL</strong>或者<strong>VM虚拟机</strong>中启动<code>PX4仿真</code>和<code>ROS&amp;rivz</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/PX4-Autopilot</span><br><span class="line">make px4_sitl_default none_iris</span><br></pre></td></tr></table></figure><p>出现下面的提示则说明PX4与AirSim连接成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PX4 SIM HOST: 192.168.1.117</span><br><span class="line">INFO  [simulator] Simulator using TCP on remote host 192.168.1.117 port 4560</span><br><span class="line">WARN  [simulator] Please ensure port 4560 is not blocked by a firewall.</span><br><span class="line">INFO  [simulator] Waiting <span class="keyword">for</span> simulator to accept connection on TCP port 4560</span><br><span class="line">INFO  [simulator] Simulator connected on TCP port 4560.</span><br><span class="line">INFO  [commander] LED: open /dev/led0 failed (22)</span><br><span class="line">INFO  [init] Mixer: etc/mixers/quad_w.main.mix on /dev/pwm_output0</span><br><span class="line">INFO  [init] setting PWM_AUX_OUT none</span><br><span class="line">INFO  [mavlink] mode: Normal, data rate: 4000000 B/s on udp port 18570 remote port 14550</span><br><span class="line">INFO  [mavlink] mode: Onboard, data rate: 4000000 B/s on udp port 14580 remote port 14540</span><br><span class="line">INFO  [mavlink] mode: Onboard, data rate: 4000 B/s on udp port 14280 remote port 14030</span><br><span class="line">INFO  [mavlink] mode: Gimbal, data rate: 400000 B/s on udp port 13030 remote port 13280</span><br><span class="line">INFO  [logger] logger started (mode=all)</span><br><span class="line">INFO  [logger] Start file <span class="built_in">log</span> (<span class="built_in">type</span>: full)</span><br><span class="line">INFO  [logger] [logger] ./log/2024-06-12/08_20_41.ulg</span><br><span class="line">INFO  [logger] Opened full <span class="built_in">log</span> file: ./log/2024-06-12/08_20_41.ulg</span><br><span class="line">INFO  [mavlink] MAVLink only on localhost (<span class="built_in">set</span> param MAV_&#123;i&#125;_BROADCAST = 1 to <span class="built_in">enable</span> network)</span><br><span class="line">INFO  [mavlink] MAVLink only on localhost (<span class="built_in">set</span> param MAV_&#123;i&#125;_BROADCAST = 1 to <span class="built_in">enable</span> network)</span><br><span class="line">INFO  [px4] Startup script returned successfully</span><br><span class="line">pxh&gt; INFO  [tone_alarm] home <span class="built_in">set</span></span><br><span class="line">INFO  [tone_alarm] notify negative</span><br></pre></td></tr></table></figure><p>启动<code>ROS&amp;rivz</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch airsim_ros_pkgs airsim_node.launch output:=screen host:=<span class="variable">$PX4_SIM_HOST_ADDR</span></span><br><span class="line">roslaunch airsim_ros_pkgs rviz.launch</span><br></pre></td></tr></table></figure><p>通过<code>rostopic list</code>查看有没有一下主题即可说明是否连接正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">laohanba@ubuntu:~/Airsim$ rostopic list</span><br><span class="line">/airsim_node/PX4/altimeter/Barometer</span><br><span class="line">/airsim_node/PX4/distance/Distance</span><br><span class="line">/airsim_node/PX4/environment</span><br><span class="line">/airsim_node/PX4/global_gps</span><br><span class="line">/airsim_node/PX4/gps/Gps</span><br><span class="line">/airsim_node/PX4/imu/Imu</span><br><span class="line">/airsim_node/PX4/magnetometer/magnetometer</span><br><span class="line">/airsim_node/PX4/odom_local_ned</span><br><span class="line">/airsim_node/PX4/vel_cmd_body_frame</span><br><span class="line">/airsim_node/PX4/vel_cmd_world_frame</span><br><span class="line">/airsim_node/gimbal_angle_euler_cmd</span><br><span class="line">/airsim_node/gimbal_angle_quat_cmd</span><br><span class="line">/airsim_node/origin_geo_point</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf</span><br><span class="line">/tf_static</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>各个话题和订阅者功能如下：</p><ul><li><p>Publishers:<a href="https://microsoft.github.io/AirSim/airsim_ros_pkgs/#publishers">#</a></p><ul><li><p><code>/airsim_node/origin_geo_point</code> <a href="https://github.com/microsoft/AirSim/tree/main/ros/src/airsim_ros_pkgs/msg/GPSYaw.msg">airsim_ros_pkgs/GPSYaw</a> 与全球 NED 框架相对应的 GPS 坐标。这将在 airsim 的 <a href="https://microsoft.github.io/AirSim/settings/">settings.json</a> 文件中的 <code>OriginGeopoint</code> 键下进行设置</p></li><li><p><code>/airsim_node/VEHICLE_NAME/global_gps</code> <a href="https://docs.ros.org/api/sensor_msgs/html/msg/NavSatFix.html">sensor_msgs/NavSatFix</a> 这是无人机在 airsim 中的当前 GPS 坐标</p></li><li><p><code>/airsim_node/VEHICLE_NAME/odom_local_ned</code> <a href="https://docs.ros.org/api/nav_msgs/html/msg/Odometry.html">nav_msgs/Odometry</a> NED 框架（默认名称：oddom_local_ned，发射名称和框架类型可配置）中与起飞点的测距。</p></li><li><p><code>/airsim_node/VEHICLE_NAME/CAMERA_NAME/IMAGE_TYPE/camera_info</code> <a href="https://docs.ros.org/api/sensor_msgs/html/msg/CameraInfo.html">sensor_msgs/CameraInfo</a></p></li><li><p><code>/airsim_node/VEHICLE_NAME/CAMERA_NAME/IMAGE_TYPE</code> <a href="https://docs.ros.org/api/sensor_msgs/html/msg/Image.html">sensor_msgs/Image</a> RGB 或浮点图像，取决于 settings.json 中要求的图像类型。</p></li><li><p><code>/tf</code> <a href="https://docs.ros.org/api/tf2_msgs/html/msg/TFMessage.html">tf2_msgs/TFMessage</a></p></li><li><p><code>/airsim_node/VEHICLE_NAME/altimeter/SENSOR_NAME</code> <a href="https://github.com/microsoft/AirSim/blob/main/ros/src/airsim_ros_pkgs/msg/Altimeter.msg">airsim_ros_pkgs/Altimeter</a> 这是高度计当前的高度、压力和温度读数 <a href="https://en.wikipedia.org/wiki/QNH">QNH</a></p></li><li><p><code>/airsim_node/VEHICLE_NAME/imu/SENSOR_NAME</code> <a href="http://docs.ros.org/api/sensor_msgs/html/msg/Imu.html">sensor_msgs::Imu</a> IMU 传感器数据</p></li><li><p><code>/airsim_node/VEHICLE_NAME/magnetometer/SENSOR_NAME</code> <a href="http://docs.ros.org/api/sensor_msgs/html/msg/MagneticField.html">sensor_msgs::MagneticField</a> 测量磁场矢量/罗盘</p></li><li><p><code>/airsim_node/VEHICLE_NAME/distance/SENSOR_NAME</code> <a href="http://docs.ros.org/api/sensor_msgs/html/msg/Range.html">sensor_msgs::Range</a> 测量与活动者的距离，如红外线或红外信号</p></li><li><p><code>/airsim_node/VEHICLE_NAME/lidar/SENSOR_NAME</code> <a href="http://docs.ros.org/api/sensor_msgs/html/msg/PointCloud2.html">sensor_msgs::PointCloud2</a> 激光雷达点云</p></li></ul></li><li><p>Subscribers:<a href="https://microsoft.github.io/AirSim/airsim_ros_pkgs/#subscribers">#</a></p><ul><li><p><code>/airsim_node/vel_cmd_body_frame</code> <a href="https://github.com/microsoft/AirSim/tree/main/ros/src/airsim_ros_pkgs/msg/VelCmd.msg">airsim_ros_pkgs/VelCmd</a> 忽略 <code>vehicle_name</code> 字段，将其留空。今后我们将对多架无人机使用 <code>vehicle_name</code> 字段</p></li><li><p><code>/airsim_node/vel_cmd_world_frame</code> <a href="https://github.com/microsoft/AirSim/tree/main/ros/src/airsim_ros_pkgs/msg/VelCmd.msg">airsim_ros_pkgs/VelCmd</a> 忽略 <code>vehicle_name</code> 字段，将其留空。今后我们将对多架无人机使用 <code>vehicle_name</code> 字段</p></li><li><p><code>/gimbal_angle_euler_cmd</code> <a href="https://github.com/microsoft/AirSim/tree/main/ros/src/airsim_ros_pkgs/msg/GimbalAngleEulerCmd.msg">airsim_ros_pkgs/GimbalAngleEulerCmd</a> 以欧拉角为单位的万向节设定点</p></li><li><p><code>/gimbal_angle_quat_cmd</code> <a href="https://github.com/microsoft/AirSim/tree/main/ros/src/airsim_ros_pkgs/msg/GimbalAngleQuatCmd.msg">airsim_ros_pkgs/GimbalAngleQuatCmd</a> 以四元数表示的万向节设定点</p></li><li><p><code>/airsim_node/VEHICLE_NAME/car_cmd</code> <a href="https://github.com/microsoft/AirSim/blob/main/ros/src/airsim_ros_pkgs/msg/CarControls.msg">airsim_ros_pkgs/CarControls</a> 油门、刹车、转向和档位选择控制。可控制自动和手动变速箱，使用方法请参见 <a href="https://github.com/microsoft/AirSim/blob/main/ros/src/airsim_ros_pkgs/scripts/car_joy"><code>car_joy.py</code></a> 脚本</p></li></ul></li><li><p>Services:<a href="https://microsoft.github.io/AirSim/airsim_ros_pkgs/#services">#</a></p><ul><li><p><code>/airsim_node/VEHICLE_NAME/land</code> <a href="https://docs.ros.org/api/std_srvs/html/srv/Empty.html">airsim_ros_pkgs/Takeoff</a></p></li><li><p><code>/airsim_node/takeoff</code> <a href="https://docs.ros.org/api/std_srvs/html/srv/Empty.html">airsim_ros_pkgs/Takeoff</a></p></li><li><p><code>/airsim_node/reset</code> <a href="https://docs.ros.org/api/std_srvs/html/srv/Empty.html">airsim_ros_pkgs/Reset</a> 重置<em>所有</em>无人机</p></li></ul></li><li><p>Parameters:<a href="https://microsoft.github.io/AirSim/airsim_ros_pkgs/#parameters">#</a></p><ul><li><p><code>/airsim_node/world_frame_id</code> [string] Set in: <code>$(airsim_ros_pkgs)/launch/airsim_node.launch</code> 默认值：world_ned 设置为 &quot;world_enu &quot;可自动切换到 ENU 框架</p></li><li><p><code>/airsim_node/odom_frame_id</code> [string] Set in: <code>$(airsim_ros_pkgs)/launch/airsim_node.launch</code> 默认值： odom_local_ned 如果将 world_frame_id 设置为 “world_enu”，则默认 odom 名称将改为 “odom_local_enu”</p></li><li><p><code>/airsim_node/coordinate_system_enu</code> [boolean] Set in: <code>$(airsim_ros_pkgs)/launch/airsim_node.launch</code> 默认值：false 如果将 world_frame_id 设置为 “world_enu”，该设置将默认为 true</p></li><li><p><code>/airsim_node/update_airsim_control_every_n_sec</code> [double] Set in: <code>$(airsim_ros_pkgs)/launch/airsim_node.launch</code> 默认值：0.01 秒。计时器回调频率，用于从 airsim 更新无人机 Odom 和状态，以及发送控制命令。当前 RPClib 与虚幻引擎的接口最大频率为 50 赫兹。ROS 中的定时器回调以最大速率运行，因此最好不要触及此参数</p></li><li><p><code>/airsim_node/update_airsim_img_response_every_n_sec</code> [double] Set in: <code>$(airsim_ros_pkgs)/launch/airsim_node.launch</code> 默认值：0.01 秒。从 airsim 中所有摄像机接收图像的定时器回调频率。速度取决于请求图像的数量和分辨率。ROS 中的定时回调以最大可能的速度运行，因此最好不要触及此参数</p></li><li><p><code>/airsim_node/publish_clock</code> [double] Set in: <code>$(airsim_ros_pkgs)/launch/airsim_node.launch</code> 默认值：false 设置为 true 时，将发布 ros /clock 主题</p></li></ul></li></ul></blockquote><blockquote><p><strong>注：启动PX4连接成功后，可以通过QGC地面站一键起飞无人机</strong></p><p><img src="https://s2.loli.net/2024/06/12/Lg1T7aX4spxC2ze.gif" alt="gif3"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AirSim项目地址：&lt;/strong&gt;&lt;a href=&quot;https://github.com/microsoft/AirSim&quot;&gt;https://github.com/microsoft/AirSim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    <category term="从0入门自主空中机器人" scheme="https://www.mgodmonkey.cn/categories/%E4%BB%8E0%E5%85%A5%E9%97%A8%E8%87%AA%E4%B8%BB%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="无人机" scheme="https://www.mgodmonkey.cn/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
    <category term="仿真" scheme="https://www.mgodmonkey.cn/tags/%E4%BB%BF%E7%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>香橙派Aipro初体验</title>
    <link href="https://www.mgodmonkey.cn/posts/64c6093c.html"/>
    <id>https://www.mgodmonkey.cn/posts/64c6093c.html</id>
    <published>2024-05-29T07:32:22.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<h1>香橙派AIpro初体验</h1><img src="http://www.orangepi.cn/img/aipro/aipro-1.png" style="zoom:60%;" /><h2 id="1-开发板资料">1.开发板资料</h2><ul><li><strong>开发板资源</strong><ul><li><strong>产品介绍主页：</strong><a href="http://www.orangepi.cn/html/hardWare/computerAndMicrocontrollers/details/Orange-Pi-AIpro.html">http://www.orangepi.cn/html/hardWare/computerAndMicrocontrollers/details/Orange-Pi-AIpro.html</a></li><li><strong>开发板案例源码：</strong><a href="https://gitee.com/ascend/EdgeAndRobotics">https://gitee.com/ascend/EdgeAndRobotics</a></li><li><strong>工具&amp;原理图&amp;案例源码&amp;开发手册</strong>：<a href="http://www.orangepi.cn/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-AIpro.html">http://www.orangepi.cn/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-AIpro.html</a></li><li><strong>转存的镜像资源</strong>：<a href="https://pan.quark.cn/s/7f885d318cdf">夸克网盘</a> 提取码：XTw3</li></ul></li><li><strong>论坛资源</strong><ul><li><strong>Orange Pi论坛：</strong><a href="http://forum.orangepi.cn/">http://forum.orangepi.cn/</a></li><li><strong>昇腾论坛–香橙派AIpro学习资源一站式导航</strong>：<a href="https://www.hiascend.com/forum/thread-0285140173361311056-1-1.html">https://www.hiascend.com/forum/thread-0285140173361311056-1-1.html</a></li></ul></li></ul><h2 id="2-简易开箱">2.简易开箱</h2><ol><li><p>怀着激动的心打开快递盒，里面赫然躺着<strong>香橙派AIpro</strong>全家福：一个65W的充电头，一根数据线，一个Orange Pi AIpro(8G)本体，真正做到了开箱即用（零售版电源和扇热模块需要单独购买）</p><img src="https://s2.loli.net/2024/05/23/rOxE7wDAa1fLdh8.png" style="zoom:80%;" /><img src="https://s2.loli.net/2024/05/23/ZO7tc8Qe1r3NlLF.png" style="zoom:80%;" /></li><li><p>正面接口一览图如下，接口朝前从左边往右依次是Type-C电源接口，HDMI1 2.0，3.5mm音频接口，HDMI0 2.0，Type-C 3.0，两个个USB3.0和一个千兆网口，两个标准版的HDMI省去了额外购买其他型号的HDMI线，这个好评。板卡上还有一个Micro USB，方便串口调试，一个MIPI DSI接口(MIPI-DSI是一种应用于显示技术的串行接口，兼容DPI、DBI和DCS)用于连接液晶屏，两个MIPI  CSI接口(MIPI-CSI是一种应用于摄像头的串行接口)用于连接摄像头。接口类型丰富且全，唯一的缺点就是USB接口太少了，如果USB设备多一点就完全不够用了，需要额外接扩展坞来使用。</p></li></ol><img src="https://image.mgodmonkey.cn/file/af0a8b2e91ab900789a42.png" style="zoom:80%;" /><ol start="3"><li>背面接口一览图如下，背面主要是一些储存设备接口，常用的TF卡槽，支持2280规格NVMe SSD的PCle3.0 M2接口(手册说目前只支持三星的SSD固态，其余固态支持需要后续版本更新)和eMMC接口(eMMC储存模块可以在香橙派的淘宝店中购买：<a href="https://item.taobao.com/item.htm?abbucket=20&amp;id=726393710516&amp;ns=1&amp;priceTId=2147809317164340588936115ea1d4&amp;spm=a21n57.1.item.5.6fc5523caHNAab">购买链接</a>)</li></ol><p><img src="https://image.mgodmonkey.cn/file/17ad582a479ab58d4ff20.png" alt="img"></p><h2 id="3-初步使用与环境配置">3.初步使用与环境配置</h2><h3 id="3-1-镜像烧录与设备启动">3.1 镜像烧录与设备启动</h3><ol><li><p>装备一张<strong>32G</strong>以上的TF卡(TF卡的传输速率必须为<strong>class10</strong>以上)，用于烧录系统，在<a href="http://www.orangepi.cn/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-AIpro.html">官方下载页面</a>中下载**<a href="https://www.balena.io/etcher/">烧录软件BalenaEtcher</a>**，<strong>Ubuntu</strong> / <strong>openeuler</strong>镜像(百度云盘限速可以从我的<a href="https://pan.quark.cn/s/7f885d318cdf">夸克网盘</a>下载，提取码：XTw3)，用烧录软件将镜像烧录进去然后插到背面TF卡槽即可</p><p><img src="https://s2.loli.net/2024/05/25/54vO7V6fwE3XhSG.png" alt="image-20240525104643353"></p></li><li><p>接上<strong>20V PD-65W</strong>电源，电源接口是在远离网口最边上的Type-c接口，用HDMI线连接显示屏跟HDMI0(靠近USB3.0一侧的HDMI，如果HDMI0没接，只接HDMI1没有显示)，连接键鼠，下面就是板子插满各种管后的样子</p></li></ol><img src="https://s2.loli.net/2024/05/25/vGxbOnlULuSwYCy.png" alt="image-20240525111025569" style="zoom:80%;" /><ol start="3"><li><p>经测试，待机电流0.13A，功率2.6W在左右，启动电流0.55A，功率11W，开机运行电流0.37A，功率7.3W左右(值得一提的是开机风扇默认启动最高速，这种情况我只在服务器主机上见过，，，)</p><img src="https://s2.loli.net/2024/05/25/Yw2HWXGpZCS4m9a.png" alt="image-20240525173851777" style="zoom: 67%;" /></li><li><p>如果插电没有自启，按一下Reset键(相当于开机键)，如果开机黑屏，检查一下启动模式是否为TF卡启动，检查背面的两个拨动开关的位置，<strong>香橙派AIpro</strong>支持三种启动设备进行启动，其余两种启动设备启动方式自行查看用户手册</p><table><thead><tr><th style="text-align:center">拨动开关BOOT1</th><th style="text-align:center">拨动开关BOOT2</th><th style="text-align:center">对应启动设备</th></tr></thead><tbody><tr><td style="text-align:center">左</td><td style="text-align:center">左</td><td style="text-align:center">未使用</td></tr><tr><td style="text-align:center">右</td><td style="text-align:center">左</td><td style="text-align:center">STAT SSD和NVMe SSD</td></tr><tr><td style="text-align:center">左</td><td style="text-align:center">右</td><td style="text-align:center">eMMC</td></tr><tr><td style="text-align:center">右</td><td style="text-align:center">右</td><td style="text-align:center">TF卡</td></tr></tbody></table></li></ol><h3 id="3-2-开机三部曲">3.2 开机三部曲</h3><ol><li><p>开屏默认用户名为<code>HwHiAiUser</code>，密码为<code>Mind@123</code>，开机第一件事就是修改密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root <span class="comment"># root默认密码也是Mind@123</span></span><br><span class="line">sudo passwd HwHiAiUser</span><br></pre></td></tr></table></figure></li><li><p>第二件事就是查看系统内核和CPU架构，方便后续安装软件时做参考（linux内核为<strong>5.10.0</strong>,系统架构为<strong>aarch64</strong>，软件下载<strong>ARM64 / ARMv8 / aarch64</strong>版本即可）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(base) HwHiAiUser@orangepiaipro:~/Desktop$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux orangepiaipro 5.10.0+ <span class="comment">#1 SMP Mon Feb 26 15:29:07 CST 2024 aarch64 aarch64 aarch64 GNU/Linux</span></span><br><span class="line">(base) HwHiAiUser@orangepiaipro:~/Desktop$ lscpu</span><br><span class="line">Architecture:          aarch64</span><br><span class="line">  CPU op-mode(s):      64-bit</span><br><span class="line">  Byte Order:          Little Endian</span><br><span class="line">CPU(s):                4</span><br><span class="line">  On-line CPU(s) list: 0-3</span><br><span class="line">Vendor ID:             0x00</span><br><span class="line">  Model:               2</span><br><span class="line">  Thread(s) per core:  1</span><br><span class="line">  Core(s) per cluster: 4</span><br><span class="line">  Socket(s):           -</span><br><span class="line">  Cluster(s):          1</span><br><span class="line">  Stepping:            0x1</span><br><span class="line">  BogoMIPS:            96.00</span><br><span class="line">  Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp a</span><br><span class="line">                       simdhp cpuid asimdrdm jscvt fcma dcpop sha3 asimddp sha51</span><br><span class="line">                       2 sve asimdfhm ssbs sb</span><br><span class="line">NUMA:                  </span><br><span class="line">  NUMA node(s):        3</span><br><span class="line">  NUMA node0 CPU(s):   0-3</span><br><span class="line">  NUMA node1 CPU(s):   </span><br><span class="line">  NUMA node2 CPU(s):   </span><br><span class="line">Vulnerabilities:       </span><br><span class="line">  Itlb multihit:       Not affected</span><br><span class="line">  L1tf:                Not affected</span><br><span class="line">  Mds:                 Not affected</span><br><span class="line">  Meltdown:            Not affected</span><br><span class="line">  Mmio stale data:     Not affected</span><br><span class="line">  Retbleed:            Not affected</span><br><span class="line">  Spec store bypass:   Mitigation; Speculative Store Bypass disabled via prctl</span><br><span class="line">  Spectre v1:          Mitigation; __user pointer sanitization</span><br><span class="line">  Spectre v2:          Not affected</span><br><span class="line">  Srbds:               Not affected</span><br><span class="line">  Tsx async abort:     Not affected</span><br></pre></td></tr></table></figure></li><li><p>第三件事自然是安装<strong>nomachine</strong>和<strong>ssh</strong>了，这样就可以完全摆脱键鼠和显示屏独立使用了。推荐优先安装<strong>nomachine</strong>，因为<strong>nomachine</strong>会自动扫描局域网内的设备，这样就可以知道<strong>香橙派Aipro</strong>的IP地址了</p><ol><li><p>Windows上安装Windows版本的<strong>nomachine</strong>(下载链接：<a href="https://downloads.nomachine.com/windows/?id=3">前往</a>)，下载完成双击安装即可</p></li><li><p>香橙派Aipro上安装<strong>ARMv8</strong>版本<strong>deb包</strong>的<strong>nomachine</strong>(下载链接: <a href="https://downloads.nomachine.com/download/?id=118&amp;distro=ARM">前往</a>)，下载完成通过下面的指令安装即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i nomachine_8.xxx_arm64.deb<span class="comment"># 根据自己下载的文件名称和路径进行安装</span></span><br></pre></td></tr></table></figure></li><li><p>安装并启动后，在Windows的nomachine上即可看到香橙派Aipro设备，这时就可以完全摆脱显示屏和键鼠了</p><img src="https://s2.loli.net/2024/05/25/SZA6lkoMJfGs82P.png" alt="image-20240525182858207" style="zoom:67%;" /></li><li><p>双击连接<strong>香橙派Aipro</strong>，输入用户名和密码</p><blockquote><p>注：如果出现黑屏或者无法控制的情况，可以先试试连接显示屏后能否正常使用，如果能可以在淘宝买个HDMI诱骗器来使用</p></blockquote><img src="https://s2.loli.net/2024/05/25/6WpQK89ZseGVtDM.png" alt="image-20240525183103552" style="zoom:67%;" /></li><li><p>设置香橙派开机自动解锁屏幕进入桌面（如果不做这一步，就每次都需要连接显示屏登录用户后才能使用nomachine进行控制）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/lightdm/lightdm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在`[Seat:*]`部分添加以下行，然后保存退出</span></span><br><span class="line">autologin-user=HwHiAiUser</span><br><span class="line">autologin-user-timeout=0</span><br><span class="line"></span><br><span class="line">sudo visudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将末尾修改成如下，这样你的香橙派就能开机自动登录进入桌面了</span></span><br><span class="line">HwHiAiUser ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure></li><li><p>安装ssh并通过<strong>mobaxterm</strong><a href="https://mobaxterm.mobatek.net/">【下载地址】</a>进行连接，通过<code>sudo apt install openssh-server</code>来安装ssh服务，通过<strong>nomachine</strong>右键香橙派Aipro-&gt;<strong>Connection info</strong>来查看香橙派Aipro的设备IP，防止每次IP不一样的问题</p><img src="https://s2.loli.net/2024/05/25/SDPxueBrHUaqblG.png" alt="image-20240525184559052" style="zoom: 67%;" /><img src="https://s2.loli.net/2024/05/25/9wqr8TVSWpBkxOo.png" alt="image-20240525185803890" style="zoom: 80%;" /></li></ol></li></ol><h3 id="3-3-常用的编程环境">3.3 常用的编程环境</h3><blockquote><p>经过测试，发现官方的镜像已经默认安装了python，c/c++环境，并且apt软件源已经换成了华为镜像源，省去了很多麻烦，这点好评</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(base) HwHiAiUser@orangepiaipro:~$ gcc --version</span><br><span class="line">gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0</span><br><span class="line"></span><br><span class="line">(base) HwHiAiUser@orangepiaipro:~$ g++ --version</span><br><span class="line">g++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0</span><br><span class="line"></span><br><span class="line">(base) HwHiAiUser@orangepiaipro:~$ make --version</span><br><span class="line">GNU Make 4.3</span><br><span class="line"></span><br><span class="line">(base) HwHiAiUser@orangepiaipro:~$ python --version</span><br><span class="line">Python 3.9.2</span><br><span class="line"></span><br><span class="line">(base) HwHiAiUser@orangepiaipro:~$ <span class="built_in">which</span> python</span><br><span class="line">/usr/local/miniconda3/bin/python</span><br></pre></td></tr></table></figure><p><strong>ROS环境安装：</strong></p><blockquote><p>因为我目前学习的是自主空中机器人相关的知识，因此感觉这种小型主机更适合应用在智能车，无人机上，所以就需要安装<strong>ROS环境</strong>，Ubuntu22.04版本目前只支持安装<strong>ROS2</strong>以上的版本，**ROS环境安装&gt; **推荐参考我的博客网站进行一键安装：<a href="https://www.mgodmonkey.cn/posts/232d6cf1.html">ROS资源汇总-MGodmonkey的世界</a></p></blockquote><h2 id="4-案例测试">4.案例测试</h2><h3 id="4-1-ROS2-PyQt小海龟控制">4.1 ROS2-PyQt小海龟控制</h3><blockquote><p>这是当初我入门学习ROS结合PyQt搭建可视化界面写的一个小案例，感兴趣的可以前往：<a href="https://www.mgodmonkey.cn/posts/37a8d87e.html">【ROS2-PyQt小案例】</a>进行复刻</p></blockquote><h4 id="环境">环境:</h4><ul><li>ROS2：foxy</li><li>python：3.8.10</li><li>PyQt：5.10.12</li></ul><h4 id="1-初试化工作空间">1. 初试化工作空间</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/dev_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/MGod-monkey/ros2_pyqt_turtlesim_key.git</span><br></pre></td></tr></table></figure><h4 id="2-编译与运行">2. 编译与运行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dev_ws</span><br><span class="line">colcon build</span><br><span class="line"><span class="built_in">source</span> install/setup.sh</span><br><span class="line">ros2 run ros2_pyqt_turtlesim_key ros2_pyqt_turtlesim_key</span><br></pre></td></tr></table></figure><h4 id="3-其他">3.其他</h4><p>您可以通过<strong>Qt designer</strong>打开 ‘ros2_pyqt_turtlesim_key/key.ui’ 文件来编辑图形界面，并通过以下命令将 ‘.ui’ 文件转换为python文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyuic5 -o key_ui.py key.ui</span><br></pre></td></tr></table></figure><p><strong>在香橙派Aipro上运行效果如下，还是很流畅的</strong></p><img src="https://s2.loli.net/2024/05/28/YpNbTB9rOjVFwqU.gif" alt="gif1" style="zoom:67%;" /><h3 id="4-1-图像特征匹配">4.1 图像特征匹配</h3><blockquote><p>因为之前实在没有跑过什么AI相关的案例，开发板也玩的少，只能先跑我本科毕设时候做的图像特征匹配案例来试试水了(小小提一嘴，我这毕设拿了校优二等hh)，感兴趣的同样可以前往：<a href="https://github.com/MGod-monkey/FeatureMatchToolbox.git">【https://github.com/MGod-monkey/FeatureMatchToolbox.git】</a>进行复刻</p></blockquote><ol><li><p><strong>软件在香橙派Aipro上运行特征匹配算法的效果</strong></p><p><img src="https://s2.loli.net/2024/05/28/kN3YzJLGudxE1RB.gif" alt="gif4"></p></li><li><p><strong>各特征匹配算法在香橙派Aipro上运行的耗时和效果图如下，总体来说效果还是很不错的</strong></p></li></ol><p><img src="https://s2.loli.net/2024/05/28/qNbVvilFGjSoRsh.png" alt="image-20240528195531214"></p><p>3.<strong>运行SuperGule算法进行实时的匹配</strong></p><blockquote><p>实际运行下来，在处理640x480图像时有13fps左右，这效果已经远远超出了我原本的预期了，俗话说1帧能玩，2帧流畅，3帧电竞，，，</p></blockquote><p><img src="https://s2.loli.net/2024/05/29/YVpIxSjOiEMzHTs.gif" alt="gif6.gif"></p><h2 id="最后">最后</h2><p>​    非常感谢香橙派官方对本次测评的大力资助，说实话当初官方找到我的时候我的非常震惊的，因为我本身并不是专业的测评博主，只是喜欢在论坛上分享学习经验和知识的小白白，因此再次感谢香橙派官方对我信任 ，前段时间看到树莓派5B发布，四路 Arm Cortex-A76 @ 2.4GHz，512KB二级缓存，2MB L3 高速缓存，双 4kp60 HDMI 显示输出，，，，心里是狠狠悸动了一下，但看到现在国产派也在慢慢上赶，心里也是非常喜悦的（虽然本次的香橙派和华为合作研发的香橙派Aipro跟树莓派不是一个赛道的）</p><p>希望本次香橙派Aipro入门博客分享能给正在入门香橙派的看客一个经验分享，希望香橙派的生态越来越好，香橙派🐮<strong>b</strong>，华为🐮<strong>b</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;香橙派AIpro初体验&lt;/h1&gt;
&lt;img src=&quot;http://www.orangepi.cn/img/aipro/aipro-1.png&quot; style=&quot;zoom:60%;&quot; /&gt;
&lt;h2 id=&quot;1-开发板资料&quot;&gt;1.开发板资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;st</summary>
      
    
    
    
    <category term="测评" scheme="https://www.mgodmonkey.cn/categories/%E6%B5%8B%E8%AF%84/"/>
    
    <category term="香橙派" scheme="https://www.mgodmonkey.cn/categories/%E6%B5%8B%E8%AF%84/%E9%A6%99%E6%A9%99%E6%B4%BE/"/>
    
    
    <category term="测评" scheme="https://www.mgodmonkey.cn/tags/%E6%B5%8B%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>CERLAB无人机自主框架：动态目标检测与跟踪</title>
    <link href="https://www.mgodmonkey.cn/posts/2c607ad2.html"/>
    <id>https://www.mgodmonkey.cn/posts/2c607ad2.html</id>
    <published>2024-04-09T06:22:14.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em><strong>*描述*</strong></em>：欢迎来到CERLAB无人机自主框架，这是一个用于自主无人飞行器 (UAV) 的多功能模块化框架。该框架包括不同的组件 (模拟器，感知，映射，规划和控制)，以实现自主导航，未知探索和目标检查。</p><p><em><strong>*视频演示*</strong></em>: <a href="https://youtu.be/sWTQ4cnQCIE?si=809MQPjWSI2Bq4rj">YouTube</a>, <a href="https://www.bilibili.com/video/BV1KN4y1i7FV/?share_source=copy_web&amp;vd_source=1333db331406abb1b5d4cece1e253427&amp;t=0">BiliBili</a></p></blockquote><h2 id="1-论文解析">1. 论文解析</h2><div class="row">    <embed src="https://mybog.s3.bitiful.net/ros/word/Onboard_Dynamic-Object_Detection_and_Tracking_for_Autonomous_Robot_Navigation_With_RGB-D_Camera.pdf" width="100%" height="550" type="application/pdf"></div><div class="note info flat"><p>相关论文：<a class="btn-anzhiyu " href="https://mybog.s3.bitiful.net/ros/word/Perception_and_Avoidance_of_Multiple_Small_Fast_Moving_Objects_for_Quadrotors_With_Only_Low-Cost_RGBD_Camera.pdf"   title="前往下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>前往下载</span></a></p><p>论文代码：<a href="https://github.com/Zhefan-Xu/onboard_detector">https://github.com/Zhefan-Xu/onboard_detector</a></p></div><blockquote><h3 id="Chatpaper">Chatpaper</h3><h4 id="Basic-Information">Basic Information:</h4><ul><li>Title: Onboard Dynamic-Object Detection and Tracking for Autonomous Robot Navigation With RGB-D Camera (基于RGB-D相机的机载动态物体检测和跟踪用于自主机器人导航)</li><li>Authors: Zhefan Xu, Xiaoyang Zhan, Yumeng Xiu, Christopher Suzuki, Kenji Shimada</li><li>Affiliation: Department of Mechanical Engineering, Carnegie Mellon University, Pittsburgh, PA 15213 USA (美国卡内基梅隆大学机械工程系)</li><li>Keywords: RGB-D perception, vision-based navigation, visual tracking, 3D object detection, collision avoidance</li><li>URLs: <a href="https://doi.org/10.1109/LRA.2023.3334683">Paper</a>, <a href="https://github.com/Zhefan-Xu/onboard_detector">GitHub</a></li></ul><h4 id="论文简要">论文简要 :</h4><ul><li>本文提出了一种基于RGB-D相机的轻量级3D动态障碍物检测和跟踪方法，用于具有有限计算能力的小型机器人。该方法采用了新颖的集成检测策略，结合多个计算效率高但准确率较低的检测器，实现实时高准确性的障碍物检测。此外，还引入了一种基于特征的数据关联和跟踪方法，利用点云的统计特征来防止匹配错误。实验结果表明，该方法在小型四旋翼飞行器上实现了最低的位置误差和可比较的速度误差，证明了该方法在导航动态环境中能够有效改变机器人的轨迹。</li></ul><h4 id="背景信息">背景信息:</h4><ul><li>论文背景: 在拥挤的室内环境中部署自主机器人通常需要它们具备准确的动态障碍物感知能力。然而，以往在自动驾驶领域的许多研究都是针对3D物体检测问题进行的，使用了来自重型激光雷达传感器的密集点云数据，而这些基于学习的数据处理方法的高计算成本使得这些方法不适用于小型机器人，例如具有小型机载计算机的基于视觉的无人机。因此，需要针对计算能力有限的小型机器人开发一种轻量级的基于RGB-D相机的动态障碍物检测和跟踪方法。</li><li>过去方案: 以往的方法中，有些采用了单一的检测器，但这些方法在计算效率和准确性之间存在权衡。另一些方法则使用了深度图像进行障碍物检测，但深度相机的范围和视野有限，使得一些方法只能在短距离范围内进行障碍物跟踪。此外，深度相机的噪声也会影响检测算法的准确性和可靠性。</li><li>论文的Motivation: 针对上述问题，本文提出了一种基于RGB-D相机的轻量级3D动态障碍物检测和跟踪方法。该方法采用了多个计算效率高但准确率较低的检测器的集成策略，实现了实时高准确性的障碍物检测。此外，还引入了一种基于特征的数据关联和跟踪方法，利用点云的统计特征来防止匹配错误。最后，该系统还引入了一个学习模块，用于增强检测范围和动态障碍物识别。通过在小型四旋翼飞行器上的实验验证，该方法在机器人的机载计算机上实现了最低的位置误差和可比较的速度误差，证明了该方法在导航动态环境中能够有效改变机器人的轨迹。</li></ul><h4 id="方法">方法:</h4><ul><li>a. 理论背景:<ul><li>介绍了在拥挤的室内环境中，自主机器人需要准确的动态障碍物感知的需求，以及使用轻量级3D动态障碍物检测和跟踪方法的技术路线。</li></ul></li><li>b. 技术路线:<ul><li>提出了基于RGB-D相机的轻量级3D动态障碍物检测和跟踪方法，利用集成检测策略和基于特征的数据关联和跟踪方法实现实时高精度障碍物检测。</li></ul></li></ul><h4 id="结果">结果:</h4><ul><li>a. 详细的实验设置:<ul><li>在动态环境中使用两台定制的四轴飞行器进行实验，搭载Intel NUC和NVIDIA Jetson Xavier NX嵌入式计算机，算法在飞行器的嵌入式计算机上实时运行。</li></ul></li><li>b. 详细的实验结果:<ul><li>DODT方法在基准算法中表现出最低的位置误差和第二低的速度误差，集成检测降低了误报率并提高了障碍物位置和速度估计的准确性。学习模块增强了检测范围。实验结果显示算法在Intel NUC和Xavier NX平台上实现了实时性能，YOLO-MAD检测器占用了大部分处理时间。物理实验展示了成功检测和跟踪动态障碍物在机器人导航任务中的应用。</li></ul></li></ul></blockquote><h3 id="1-1-问题汇总">1.1 问题汇总</h3><ol><li><p>关于图2的系统框架：</p><ul><li>系统框架包括三个核心模块：检测模块、跟踪模块和识别模块。</li><li>检测模块由非学习和学习两部分组成，非学习部分利用深度图像和两个非学习检测器进行通用障碍物检测。</li><li>学习模块使用对齐的RGB-D图像进行直接动态障碍物检测，结果与非学习模块结合。</li><li>跟踪模块使用精细化的3D边界框来估计障碍物状态。</li><li>识别模块根据状态和跟踪历史将障碍物分类为静态或动态。</li><li>系统输出动态障碍物边界框，并在静态地图中清除动态障碍物区域以进行导航。 Pages: [“a. system overview”, “d. data association and tracking”, “e. dynamic obstacle identification”]</li></ul></li><li><p>关于U-depth检测器和DBSCAN检测器的定义，方法和作用:</p><ul><li><p><strong>U-depth检测器</strong>：</p><ul><li>定义：U-depth检测器是一种基于深度图像的方法，用于检测和跟踪动态障碍物。它通过生成U-depth图和V-depth图，结合深度信息来估计障碍物状态，实现对静态障碍物的安全导航。</li><li>方法：利用深度图像生成U-depth图和V-depth图，通过估计障碍物的速度和维度来检测和跟踪动态障碍物，将其表示为3D椭球体。采用YOLO检测器来有效避开快速和小型动态障碍物，结合图像差异来识别RGB图像中的所有动态点。</li><li>作用：U-depth检测器的作用在于提高障碍物维度估计的准确性，结合占据地图来导航动态环境，有效避开动态障碍物，从而实现机器人的安全导航。</li></ul></li><li><p><strong>DBSCAN检测器</strong>：</p><ul><li>定义：DBSCAN检测器是一种基于点云的方法，直接利用点云的几何信息来检测3D障碍物。它通过点云聚类方法结合YOLO检测器进行人体检测，提出使用点云特征向量和对象跟踪点来识别正确的对象匹配和估计其状态。<ul><li>方法：采用点云聚类方法结合YOLO检测器进行室内动态障碍物避让，利用点云特征向量和对象跟踪点来识别正确的对象匹配和估计其状态。</li><li>作用：DBSCAN检测器的作用在于提高障碍物跟踪的稳健性，通过点云信息直接检测3D障碍物，从而实现动态障碍物的避让和安全导航。 Pages: [“d. data association and tracking”, “e. dynamic obstacle identification”, “b. 3d-obstacle detectors”]</li></ul></li></ul></li></ul></li></ol><h2 id="2-环境搭建">2.环境搭建</h2><h3 id="2-1-CERLAB无人机框架搭建">2.1 CERLAB无人机框架搭建</h3><blockquote><p><strong>参考</strong>：<a href="https://www.mgodmonkey.cn/posts/349e2e18.html">CERLAB 无人机自主框架：环境搭建 | MGodmonkey の世界</a></p></blockquote><h3 id="2-2-yolo-mad环境安装（可选）">2.2 yolo-mad环境安装（可选）</h3><blockquote><p><strong>说明</strong>：如果用到<strong>yolo-mad</strong>检测器作为辅助，按照下面的教程搭建<strong>yolo-mad</strong>环境</p></blockquote><ul><li>安装torch</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是ubuntu20-torch-cpu版本的，其余系统或者GPU版本的参考官网教程</span></span><br><span class="line"><span class="comment"># 有缓存指令（网络不好的情况下建议有缓存）</span></span><br><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu</span><br><span class="line"><span class="comment"># 无缓存指令</span></span><br><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu --no-cache-dir</span><br></pre></td></tr></table></figure><blockquote><p><strong>参考</strong>：<a href="https://pytorch.org/get-started/locally/">Start Locally | PyTorch</a></p><p><strong>问题汇总</strong>：</p><ol><li><p>网络超时【urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=‘<a href="http://files.pythonhosted.org">files.pythonhosted.org</a>’, port=443): Read timed out】：下载过程中经常会遇到timeout的情况，这时候可以通过复制上面的网址，通过各种方法先下载到本地，然后通过<code>pip3 install ~/torch-2.2.2+cpu-cp38-cp38-linux_x86_64.whl torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu</code>，哪个超时下载哪个到本地安装，或者头铁一直重试，迟早有一次成功的😉</p><p><img src="https://s2.loli.net/2024/04/15/Z6vlJuo19Imqzt4.png" alt=""></p></li><li><p>【ERROR: Package ‘networkx’ requires a different Python: 3.8.10 not in ‘&gt;=3.9’】：networkx版本不兼容3.8，需要通过<code>pip3 install networkx -i https://pypi.tuna.tsinghua.edu.cn/simple</code>手动安装network3.1版本的库</p></li></ol></blockquote><h3 id="2-3-运行Demo">2.3 运行Demo</h3><ol><li>下载<strong>rosbag</strong>包：【<a href="https://pan.quark.cn/s/fc253670a15f">夸克网盘：single-object.bag</a>】【<a href="https://pan.quark.cn/s/0871121dadc3">夸克网盘：multi-objects.bag</a>】</li><li>将python3设置为系统默认python版本：<code>sudo ln -sf /usr/bin/python3 /usr/local/bin/python</code></li><li>运行代码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br><span class="line"><span class="comment"># 单人运动</span></span><br><span class="line">rosbag play -l single-object.bag</span><br><span class="line"><span class="comment"># 多人运动</span></span><br><span class="line">rosbag play -l multi-objects.bag</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行没有yolo-mad作为辅助的检测器</span></span><br><span class="line">roslaunch onboard_detector run_detector.launch</span><br><span class="line"><span class="comment"># 运行yolo-mad作为辅助（感觉效果比上面的还差）</span></span><br><span class="line">roslaunch onboard_detector detector_with_learning_module.launch</span><br></pre></td></tr></table></figure><h3 id="2-4-在自己设备上运行（待补充待更新）">2.4 在自己设备上运行（待补充待更新）</h3><blockquote><p>请调整你的摄像头设备下的配置文件，位于 <code>cfg/detector_param.yaml</code>。同时，修改 <code>scripts/yolo_detector/yolo_detector.py</code> 中的彩色图像话题名称。从参数文件中，你可以看到算法期望从机器人获取以下数据：</p><ul><li><p>深度图像：<code>/camera/depth/image_rect_raw</code></p></li><li><p>机器人姿态：<code>/mavros/local_position/pose</code></p></li><li><p>机器人里程计（可选）：<code>/mavros/local_position/odom</code></p></li><li><p>彩色图像（如果应用了YOLO则为可选）：<code>/camera/color/image_rect_raw</code></p></li><li><p>对齐深度图像（可选）：<code>/camera/aligned_depth_to_color/image_raw</code></p></li></ul></blockquote><ol><li>修改深度相机launch文件</li></ol><blockquote><p>对齐深度图像默认不生成，因此需要修改launch文件继续修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roscd realsense2_camera/launch</span><br><span class="line">nano rs_camera.launch</span><br></pre></td></tr></table></figure><p>将<code>align_depth</code>参数修改为<code>true</code>，然后<strong>Ctrl+O</strong>&amp;<strong>Ctrl+X</strong>保存退出</p><img src="https://s2.loli.net/2024/04/19/V5dNOREYgC8L3m9.png"  /></blockquote><ol start="2"><li><p>运行Fast-Drone-250或Vins-Fusion等获取无人机位姿</p><blockquote><p>参考：<a href="https://github.com/ZJU-FAST-Lab/Fast-Drone-250">【https://github.com/ZJU-FAST-Lab/Fast-Drone-250】</a>上的教程搭建环境</p><ol><li>修改<strong>odom</strong>主题：进入<code>onboard_detector/cfg/detector_param.yaml</code>文件，将<code>localization_mode</code>修改为<code>1</code>，将<code>odom_topic</code>修改为<code>/vins_fusion/imu_propagate</code></li><li>启动<strong>Vins-Fusion</strong></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ~/Fast-Drone-250/shfiles/rspx4.sh</span><br></pre></td></tr></table></figure><ol start="3"><li><p>修改深度相机的参数：<code>rostopic echo /camera/infra1/camera_info</code>，将K矩阵中的fx,fy,cx,cy填入<code>onboard_detector/cfg/detector_param.yaml</code>文件中的<code>depth_intrinsics</code>矩阵中</p></li><li><p>启动launch</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行没有yolo-mad作为辅助的检测器</span></span><br><span class="line">roslaunch onboard_detector run_detector.launch</span><br><span class="line"><span class="comment"># 运行yolo-mad作为辅助（感觉效果比上面的还差）</span></span><br><span class="line">roslaunch onboard_detector detector_with_learning_module.launch</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2024/05/07/YIcH5jlXbem1pfv.png" style="zoom: 80%;" /></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;*描述*&lt;/strong&gt;&lt;/em&gt;：欢迎来到CERLAB无人机自主框架，这是一个用于自主无人飞行器 (UAV) 的多功能模块化框架。该框架包括不同的组件 (模拟器，感知，映射，规划和控制)，以实现自主导航，未知探索和目标检</summary>
      
    
    
    
    <category term="CERLAB无人机自主框架" scheme="https://www.mgodmonkey.cn/categories/CERLAB%E6%97%A0%E4%BA%BA%E6%9C%BA%E8%87%AA%E4%B8%BB%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="无人机" scheme="https://www.mgodmonkey.cn/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>CERLAB无人机自主框架：环境搭建</title>
    <link href="https://www.mgodmonkey.cn/posts/349e2e18.html"/>
    <id>https://www.mgodmonkey.cn/posts/349e2e18.html</id>
    <published>2024-03-26T00:42:50.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<h1>CERLAB UAV Autonomy Framework</h1><blockquote><p><strong>描述</strong>：欢迎来到CERLAB无人机自主框架，这是一个用于自主无人飞行器 (UAV) 的多功能模块化框架。该框架包括不同的组件 (模拟器，感知，映射，规划和控制)，以实现自主导航，未知探索和目标检查。</p><p><strong>视频演示</strong>: <a href="https://youtu.be/sWTQ4cnQCIE?si=809MQPjWSI2Bq4rj">YouTube</a>, <a href="https://www.bilibili.com/video/BV1KN4y1i7FV/?share_source=copy_web&amp;vd_source=1333db331406abb1b5d4cece1e253427&amp;t=0">BiliBili</a></p></blockquote><h2 id="1-模块介绍">1.模块介绍</h2><p><code>autonomous_flight</code>: 集成了用于各种任务的所有其他模块的自主飞行包。<a href="https://github.com/Zhefan-Xu/autonomous_flight">详细信息</a><br><code>global_planner</code>: 自主机器人的全球航点规划器库。<a href="https://github.com/Zhefan-Xu/global_planner">详细信息</a><br><code>map_manager</code>: 自主机器人的3D映射库。<a href="https://github.com/Zhefan-Xu/map_manager">详细信息</a><br><code>onboard_detector</code>: 自主机器人的动态障碍物检测和跟踪算法。<a href="https://github.com/Zhefan-Xu/onboard_detector">详细信息</a><br><code>remote_control</code>: Rviz配置和启动文件，便于可视化。<a href="https://github.com/Zhefan-Xu/onboard_detector">详细信息</a><br><code>time_optimizer</code>: 自主机器人的最优轨迹时间分配库。<a href="https://github.com/Zhefan-Xu/time_optimizer">详细信息</a><br><code>tracking_controller</code>: 自主机器人的轨迹跟踪控制器。<a href="https://github.com/Zhefan-Xu/tracking_controller">详细信息</a><br><code>trajectory_planner</code>: 自主机器人的轨迹规划库。<a href="https://github.com/Zhefan-Xu/trajectory_planner">详细信息</a><br><code>uav_simulator</code>: 基于轻型Gazebo/ROS的无人机模拟器。<a href="https://github.com/Zhefan-Xu/uav_simulator">详细信息</a></p><h2 id="2-安装指引">2.安装指引</h2><p>该工程已经在带有<strong>ROS Melodic</strong>的<strong>Ubuntu 18.04</strong>和带有<strong>ROS Noetic</strong>的<strong>Ubuntu 20.04</strong>上进行了测试，它取决于ROS包: <a href="https://wiki.ros.org/octomap">octomap</a>，<a href="https://wiki.ros.org/mavros">mavros</a>和<a href="https://wiki.ros.org/vision_msgs">vision_msgs</a>。使用以下命令安装软件包:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step1: 安装依赖</span></span><br><span class="line">sudo apt install ros-<span class="variable">$&#123;ROS_DISTRO&#125;</span>-octomap* &amp;&amp; sudo apt install ros-<span class="variable">$&#123;ROS_DISTRO&#125;</span>-mavros* &amp;&amp; sudo apt install ros-<span class="variable">$&#123;ROS_DISTRO&#125;</span>-vision-msgs</span><br><span class="line"><span class="built_in">cd</span> /opt/ros/noetic/lib/mavros</span><br><span class="line">sudo ./install_geographiclib_datasets.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 2: 克隆工程到工作空间</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/Zhefan-Xu/CERLAB-UAV-Autonomy.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选: 切换到autonomous_flight的模拟分支</span></span><br><span class="line"><span class="comment"># 默认分支用于实际飞行和PX4模拟</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src/CERLAB-UAV-Autonomy/autonomous_flight</span><br><span class="line">git checkout simulation</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 3: 编译</span></span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br><span class="line"><span class="comment"># 一定一定一定要source下面这条啊！！！血的教训，控制不了就是因为没有source这个</span></span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/src/CERLAB-UAV-Autonomy/uav_simulator/gazeboSetup.bash</span><br></pre></td></tr></table></figure><h2 id="3-PX4仿真-实飞">3.PX4仿真&amp;实飞</h2><blockquote><p>该CERLAB无人机框架自带两个仿真模拟器，<strong>autonomous_flight</strong>和<strong>PX4</strong>仿真，如果需要切换<strong>autonomous_flight</strong>仿真，则需要通过上面的方式切换分支</p><p><strong>自主起飞选项</strong>：</p><ul><li><code>Takeoff/Hovering</code>: 起飞和悬停在指定高度。</li><li><code>Takeoff/Tracking Circle</code>: 起飞和跟踪具有给定半径和速度的圆形轨迹。</li><li><code>Navigation</code>: 静态环境中的自主导航。</li><li><code>Dynamic Navigation</code>: 动态环境中的自主导航。</li><li><code>Inspection (Octomap)</code>: 使用Octomap的自主表面检查。</li><li><code>Inspection (Dynamic Map)</code>: 使用动态地图进行自主表面检查。</li><li><code>Dynamic Exploration</code>: 未知和动态环境中的自主探索。</li></ul></blockquote><h3 id="3-1安装PX4仿真环境">3.1安装PX4仿真环境</h3><blockquote><p><strong>环境安装参考</strong>：<a href="https://www.mgodmonkey.cn/posts/cfe889db.html">从0入门自主空中机器人-4-【PX4与Gazebo入门】 | MGodmonkeyの世界</a></p><p><strong>注</strong>：</p><p><img src="https://s2.loli.net/2024/03/26/bExvNX1oTVmqhiA.png" alt=""></p><p>如果通过修改<code>.bashrc</code>来更新环境变量，请确保<strong>PX4</strong>环境路径在<code>source ~/catkin_ws/devel/setup.bash</code>下面，否则将会报错</p></blockquote><h3 id="3-2运行Demo">3.2运行Demo</h3><p>首先启动无人机模拟器，您应该能够在预定义的<strong>gazebo</strong>中看到四轴飞行器。</p><p>该项目中有两种仿真器，一个是PX4仿真，即控制通过PX4固件控制，一个是自定义控制仿真，默认克隆下来代码的是PX4仿真分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动PX4仿真</span></span><br><span class="line">roslaunch uav_simulator px4_start.launch</span><br></pre></td></tr></table></figure><blockquote><p>若首次启动gazebo仿真黑屏很久，则是加载模型过久，可以提前下载模型到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.gazebo/</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.gazebo/models <span class="comment"># 如果models目录存在，则不需要创建</span></span><br><span class="line"><span class="built_in">cd</span> ~/.gazebo/models/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载模型并解压</span></span><br><span class="line">wget http://file.ncnynl.com/ros/gazebo_models.txt</span><br><span class="line">wget -i gazebo_models.txt</span><br><span class="line"><span class="built_in">ls</span> model.tar.g* | xargs -n1 tar xzvf</span><br></pre></td></tr></table></figure></blockquote><p>a. 简单起飞和悬停 <code>Takeoff/Hovering</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun autonomous_flight takeoff_and_hover_node  <span class="comment"># takeoff at 1.0 meter height</span></span><br></pre></td></tr></table></figure><p>b. 起飞和跟踪一圈 <code>Takeoff/Tracking Circle</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch autonomous_flight takeoff_and_track_circle.launch  <span class="comment"># takeoff and tracking a circular trajectory</span></span><br></pre></td></tr></table></figure><p>c. 静态环境导航 <code>Navigation</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch remote_control navigation_rviz.launch </span><br><span class="line">roslaunch autonomous_flight navigation.launch <span class="comment"># 新建一个窗口来运行这个</span></span><br></pre></td></tr></table></figure><p>d. 动态环境导航 <code>Dynamic Navigation</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch remote_control dynamic_navigation_rviz.launch   </span><br><span class="line">roslaunch autonomous_flight dynamic_navigation.launch <span class="comment"># 新建一个窗口来运行这个</span></span><br></pre></td></tr></table></figure><p>e. 使用octomap进行静态环境检查 <code>Inspection (Octomap)</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch octomap_server octomap_mapping.launch <span class="comment"># 请牢记为 ros 主题/转换修改参数</span></span><br><span class="line">roslaunch autonomous_flight inspection.launch</span><br></pre></td></tr></table></figure><p>f. 使用动态地图进行动态环境检查 <code>Inspection (Dynamic Map)</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch autonomous_flight dynamic_inspection.launch    <span class="comment"># autonomous surface inspection</span></span><br></pre></td></tr></table></figure><p>g. 未知和动态环境探索 <code>Dynamic Exploration</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roslaunch remote_control exploration_rviz.launch  </span><br><span class="line">roslaunch autonomous_flight dynamic_exploration.launch <span class="comment"># 新建一个窗口来运行这个</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong></p><p>PX4仿真下无法控制的情况下</p><ul><li><p>启动仿真，打开QGC地面站，在参数中搜索<code>COM_RCL_EXCEPT</code></p></li><li><p>将<code>COM_RCL_EXCEPT</code>参数改为<code>4</code>并保存</p></li></ul><img src="https://s2.loli.net/2024/01/12/31SIkYCRsGbg69F.png" style="zoom: 80%;" /></blockquote><h3 id="3-3参数调整">3.3参数调整</h3><p>所有参数都在<strong>autonomous_flight/cfg</strong>文件夹中。例如，动态导航的参数可以在<strong>autonomous_flight/cfg/dynamic_navgation/*.yaml</strong>中找到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CERLAB UAV Autonomy Framework&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：欢迎来到CERLAB无人机自主框架，这是一个用于自主无人飞行器 (UAV) 的多功能模块化框架。该框架包括不同的组件 (模拟器，感</summary>
      
    
    
    
    <category term="CERLAB无人机自主框架" scheme="https://www.mgodmonkey.cn/categories/CERLAB%E6%97%A0%E4%BA%BA%E6%9C%BA%E8%87%AA%E4%B8%BB%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="无人机" scheme="https://www.mgodmonkey.cn/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>wsl连接USB设备</title>
    <link href="https://www.mgodmonkey.cn/posts/961f6207.html"/>
    <id>https://www.mgodmonkey.cn/posts/961f6207.html</id>
    <published>2024-02-15T08:57:16.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>参考教程：</strong><a href="https://learn.microsoft.com/zh-cn/windows/wsl/connect-usb">连接 USB 设备 | Microsoft Learn</a></p></blockquote><h3 id="1-安装usbipd-win">1.安装usbipd-win</h3><p>WSL 本身并不支持连接 USB 设备，因此你需要安装开源usbipd-win项目【<a href="https://github.com/dorssel/usbipd-win/releases">下载Releases · dorssel/usbipd-win (github.com)</a>】</p><h3 id="2-共享USB设备">2.共享USB设备</h3><p>通过以<em>管理员</em>模式打开<strong>PowerShell</strong>或者<strong>CMD</strong>并输入以下命令，列出所有连接到Windows的USB设备。 列出设备后，选择并复制要附加到WSL的设备总线 ID。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Program Files\usbipd-win</span><br><span class="line">usbipd list</span><br></pre></td></tr></table></figure><p>在附加 USB 设备之前，必须使用命令 <code>usbipd bind</code> 来共享设备，从而允许它附加到 WSL。 这需要管理员权限。 选择要在 WSL 中使用的设备总线 ID，然后运行以下命令。 运行命令后，请再次使用命令 <code>usbipd list</code> 验证设备是否已共享。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usbipd bind <span class="literal">--busid</span> &lt;busid&gt;</span><br></pre></td></tr></table></figure><p>若要附加USB设备，请运行以下命令。（不再需要使用提升的管理员提示）确保WSL命令提示符处于打开状态，以使WSL2轻型VM保持活动状态。请注意，只要USB设备连接到WSL，Windows将无法使用它。附加到WSL后，任何作为WSL2运行的分发版本都可以使用USB设备。使用 <code>usbipd list</code> 验证设备是否已附加。在WSL提示符下，运行<code>lsusb</code>以验证USB设备是否已列出，并且可以使用Linux工具与之交互。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usbipd attach <span class="literal">--wsl</span> <span class="literal">--busid</span> &lt;busid&gt;</span><br></pre></td></tr></table></figure><p>打开Ubuntu（或首选的WSL命令行），使用以下命令列出附加的USB设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsusb</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2024/02/15/3IhF6wLBKpYSOkq.png" alt="image.png" style="zoom:80%;" /><p><img src="https://s2.loli.net/2024/02/15/mFsLwY7QE4Rvhp3.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;参考教程：&lt;/strong&gt;&lt;a href=&quot;https://learn.microsoft.com/zh-cn/windows/wsl/connect-usb&quot;&gt;连接 USB 设备 | Microsoft Learn&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="https://www.mgodmonkey.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="wsl" scheme="https://www.mgodmonkey.cn/tags/wsl/"/>
    
    <category term="问题大全" scheme="https://www.mgodmonkey.cn/tags/%E9%97%AE%E9%A2%98%E5%A4%A7%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>DVXplorer事件相机入门</title>
    <link href="https://www.mgodmonkey.cn/posts/4528cc75.html"/>
    <id>https://www.mgodmonkey.cn/posts/4528cc75.html</id>
    <published>2024-02-14T08:33:50.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>DV官方文档：<a href="https://inivation.gitlab.io/dv/dv-docs/docs/getting-started.html#ubuntu-linux">Get Started · DV (inivation.gitlab.io)</a></p><p>DV事件相机的ROS包：<a href="https://github.com/uzh-rpg/rpg_dvs_ros">https://github.com/uzh-rpg/rpg_dvs_ros</a></p><p>事件相机的资源汇总：<a href="https://github.com/uzh-rpg/event-based_vision_resources">https://github.com/uzh-rpg/event-based_vision_resources</a></p></blockquote><h2 id="1-DV事件相机ROS包驱动程序安装">1.DV事件相机ROS包驱动程序安装</h2><p><strong>注意：将以下指令中提及的任何noetic替换为您当前ROS发行版的名称</strong></p><ul><li>安装ROS依赖</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-noetic-camera-info-manager</span><br><span class="line">sudo apt-get install ros-noetic-image-view</span><br></pre></td></tr></table></figure><ul><li>安装libcaer</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:inivation-ppa/inivation</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libcaer-dev</span><br></pre></td></tr></table></figure><ul><li>安装catkin工具</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-catkin-tools</span><br></pre></td></tr></table></figure><ul><li>创建工作空间（指令参考：<a href="https://www.mgodmonkey.cn/posts/f1cb77fb.html">ROS指令大全</a>）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> -p catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> catkin_ws</span><br><span class="line">catkin config --init --mkdirs --extend /opt/ros/noetic --merge-devel --cmake-args -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure><ul><li>克隆将用于生成 DVS/DAVIS 驱动程序包的包 （<a href="https://github.com/catkin/catkin_simple%EF%BC%89%EF%BC%9A%60catkin_simple%60">https://github.com/catkin/catkin_simple）：`catkin_simple`</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/catkin/catkin_simple.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/uzh-rpg/rpg_dvs_ros.git</span><br></pre></td></tr></table></figure><ul><li>编译包</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make <span class="comment"># 编译工作区内的所有功能包</span></span><br><span class="line"><span class="comment"># 或者选择性的编译下面的功能包</span></span><br><span class="line">catkin build dvs_renderer <span class="comment"># 渲染器（图片查看器）</span></span><br><span class="line">catkin build dvs_ros_driver <span class="comment"># DVS128</span></span><br><span class="line">catkin build davis_ros_driver <span class="comment"># DAVIS</span></span><br><span class="line">catkin build dvxplorer_ros_driver <span class="comment"># DVXplorer</span></span><br></pre></td></tr></table></figure><ul><li>更新环境</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure><h2 id="2-测试DV相机">2.测试DV相机</h2><p>连接DV相机并通过启动下面的<code>launch</code>来启动DV相机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">roslaunch dvs_renderer dvs_mono.launch <span class="comment"># DVS128</span></span><br><span class="line">roslaunch dvs_renderer davis_mono.launch <span class="comment"># DAVIS</span></span><br><span class="line">roslaunch dvs_renderer dvxplorer_mono.launch <span class="comment"># DVXplorer</span></span><br></pre></td></tr></table></figure><p>我使用的是DVXplorer相机，主题切换到<code>/dvs_rendering</code>，并在镜头前晃动即可显示下面的画面</p><p><img src="https://s2.loli.net/2024/02/16/W8z4cTmKDEquGaN.png" alt="image.png"></p><h2 id="3-使用DV-GUI来启动DV相机（可选）">3.使用DV-GUI来启动DV相机（可选）</h2><p><strong>DV-GUI</strong>是<a href="https://inivation.com/buy">用于 iniVation <strong>动态视觉传感器 （DVS/DAVIS）</strong></a> 的软件，可以通过连接到DV相机并显示其输出。它也是官方软件开发工具包，用于为基于事件的相机编写应用软件。目前支持的操作系统有Win、Macos、Ubuntu、Fedora、Arch linux、树莓派等</p><ul><li><p><code>Windows</code></p><ul><li>下载并安装DV：<a class="btn-anzhiyu " href="https://release.inivation.com/gui/latest-win-stable"   title="前往下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>前往下载</span></a></li><li>Windows下DV软件有bug，需要修改系统显示语言为<strong>English</strong>，这步一定要弄，不然无法正常使用：<a href="https://support.microsoft.com/zh-cn/windows/%E5%9C%A8-windows-%E4%B8%AD%E7%AE%A1%E7%90%86%E6%98%BE%E7%A4%BA%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE-219f28b0-9881-cd4c-75ca-dba919c52321">在 Windows 中管理显示语言设置 - Microsoft 支持</a></li></ul></li><li><p><code>Ubuntu</code></p></li></ul><blockquote><p>我们在x86_64、arm64和armhf架构上为Focal （20.04 LTS） 和Jammy （22.04 LTS）提供了一个 <a href="https://launchpad.net/~inivation-ppa/+archive/ubuntu/inivation">PPA 存储库</a>。请注意，<code>dv-gui</code>仅在 x86_64上可用，<code>dv-runtime</code>在所有支持的架构上可用。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:inivation-ppa/inivation</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install dv-gui</span><br></pre></td></tr></table></figure><p>使用<code>dv-gui</code>指令来启动软件</p><img src="https://s2.loli.net/2024/02/16/8uTgrkLSoHPbsCX.png" alt="image-20240216212114411" style="zoom:67%;" /><blockquote><p><strong>注</strong>：如果设备无法识别，或者无法查找，请确保DV相机是否正常运行并连接到电脑上，尝试拔插USB来重启DV相机；如果你在WSL中使用<code>DV-GUI</code>，请确保USB设备能够在WSL中正常识别，WSL中添加USB设备参考教程：<a href="https://www.mgodmonkey.cn/posts/961f6207.html">wsl连接USB设备</a></p><p><img src="https://s2.loli.net/2024/02/16/8bK2F54u6mpecqJ.png" alt="image.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;DV官方文档：&lt;a href=&quot;https://inivation.gitlab.io/dv/dv-docs/docs/getting-started.html#ubuntu-linux&quot;&gt;Get Started · DV (inivation.g</summary>
      
    
    
    
    <category term="技术分享" scheme="https://www.mgodmonkey.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="事件相机" scheme="https://www.mgodmonkey.cn/tags/%E4%BA%8B%E4%BB%B6%E7%9B%B8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>快速动态视觉：使用事件和深度感应检测和跟踪动态对像</title>
    <link href="https://www.mgodmonkey.cn/posts/732e43d6.html"/>
    <id>https://www.mgodmonkey.cn/posts/732e43d6.html</id>
    <published>2023-09-11T11:28:17.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://mybog.s3.bitiful.net/ros/word/FAST-Dynamic-Vision.pdf" width="100%" height="550" type="application/pdf"></div><div class="note info flat"><blockquote><p>相关论文：<a class="btn-anzhiyu " href="https://mybog.s3.bitiful.net/ros/word/FAST-Dynamic-Vision.pdf"   title="前往下载"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>前往下载</span></a></p><p>论文代码：<a href="https://github.com/ZJU-FAST-Lab/FAST-Dynamic-Vision">ZJU-FAST-Lab/FAST-Dynamic-Vision: Detecting and Tracking Dynamic Objects with Event and Depth Sensing (github.com)</a></p></blockquote></div><blockquote><h3 id="Basic-Information">Basic Information:</h3><ul><li>Title: FAST-Dynamic-Vision: Detection and Tracking Dynamic Objects with Event and Depth Sensing (FAST-Dynamic-Vision: 基于事件和深度感知的动态物体检测与跟踪)</li><li>Authors: Botao He, Haojia Li, Siyuan Wu, Dong Wang, Zhiwei Zhang, Qianli Dong, Chao Xu, Fei Gao</li><li>Affiliation: State Key Laboratory of Industrial Control Technology, Institute of Cyber-Systems and Control, Zhejiang University, Hangzhou, China (浙江大学工业控制技术国家重点实验室)</li><li>Keywords: aerial autonomy, unmanned aerial vehicles (UAVs), dynamic object detection, trajectory prediction, event camera, depth sensing</li><li>URLs: <a href="https://arxiv.org/abs/2103.05903v2">Paper</a>, <a href="https://github.com/ZJU-FAST-Lab/FAST-Dynamic-Vision">GitHub Code</a></li></ul><h3 id="论文简要">论文简要 :</h3><ul><li>本文提出了一种基于事件和深度感知的快速动态物体检测和跟踪系统，通过准确的自我运动补偿、高效的回归算法和异步融合事件和深度信息的优化方法，实现了低延迟和高精度的快速动态物体感知。通过大量实验验证了该系统的性能，并将代码开源以供相关研究使用。</li></ul><h3 id="背景信息">背景信息:</h3><ul><li>论文背景: 近年来，无人机的飞行自主性取得了很大的进展，使得无人机能够在复杂环境中灵活飞行，如矿山勘探等。然而，在动态环境中，特别是面对高速物体时的感知仍然是一个具有挑战性的问题，限制了无人机进一步应用的可能性。</li><li>过去方案: 传统的感知方法对于快速移动物体的感知存在延迟问题，无法满足实时性要求。事件相机作为一种具有微秒级时间分辨率的异步传感器，具有很大的潜力来解决这个问题。然而，目前还缺乏完整的感知系统来实现快速动态物体的检测和跟踪。</li><li>论文的Motivation: 鉴于上述问题，本文采用了事件相机作为感知传感器，并设计了一个完整的感知系统。首先，通过融合惯性测量单元（IMU）和深度数据，提出了一种先进的自我运动补偿算法，以减少由自身运动引起的背景事件。然后，通过回归算法实现了动态物体的检测。最后，通过异步融合事件和深度信息，提出了一种优化方法来预测物体的轨迹。通过大量实验验证了该系统的性能，为快速动态物体的避障提供了坚实的基础。</li></ul><h3 id="方法">方法:</h3><ul><li><p>a. 理论背景:</p><ul><li>本文介绍了一种用于检测和跟踪快速移动动态物体的感知系统，具有低延迟和高精度。</li></ul></li><li><p>b. 技术路线:</p><ul><li><p>本文提出了一种准确的自我运动补偿算法，考虑了旋转和平移运动。</p></li><li><p>使用事件相机设计了一种高效的动态物体检测回归算法。</p></li><li><p>提出了一种基于优化的方法，将事件和深度相机融合用于轨迹预测。</p></li></ul></li></ul><h3 id="结果">结果:</h3><ul><li><p>a. 详细的实验设置:</p><ul><li>在改装的飞行平台上进行了实验，该平台配备了iniVation DVXplorer动态视觉传感器和Intel Realsense D435i深度相机。</li><li>实验平台还包括运行Ubuntu 16.04的DJI Manifold2-C计算机和运行PX4飞行堆栈的CUAV Nora自动驾驶飞行控制器。</li></ul></li><li><p>b. 详细的实验结果:</p><ul><li>在UAV以超过5 m/s的速度飞行的高动态场景中评估了系统。</li><li>与单目方法相比，该系统在时间消耗和移动物体与背景之间的对比度方面表现出色。</li><li>将估计的轨迹精度与单目方法进行了比较，融合方法显示出更高的精度。</li></ul></li></ul><h3 id="总结">总结:</h3><p>这篇论文主要介绍了一种使用事件相机和深度相机进行快速移动物体检测和跟踪的方法。首先，通过计算事件相机中事件的平均时间戳，确定具有最大平均时间戳的区域，该区域代表图像平面上速度最快的区域。然后，引入迭代高斯拟合算法进行目标检测，获取目标的边界框。为了确保边界框的准确性，还提出了移动区域检索方法。接下来，使用卡尔曼滤波器在二维平面上跟踪目标的位置，并根据检测结果在深度图上进行目标分割。然后，通过最小化重投影残差来优化目标的轨迹。最后，为了验证估计结果，设计了一个场景，其中一个无人机自主检测并避开向其飞来的物体。论文的其余部分按照以下方式组织：第IV-A节介绍了高级自运动补偿算法；然后讨论了在该框架中使用的目标检测和跟踪方法（第IV-B节）；在第IV-C节中，执行了融合事件流和深度信息的三维轨迹估计器；第V节描述了实际飞行实验并与其他方法进行了比较。</p></blockquote><h2 id="1-演示视频">1.演示视频</h2><div align=center class="video">    <iframe src="//player.bilibili.com/player.html?aid=672080863&bvid=BV11U4y1p7EF&cid=308804055&p=1&autoplay=0&high_quality=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div>## 2.环境搭建<h3 id="2-1-实验平台">2.1 实验平台</h3><ol><li><strong>无人机平台</strong>：DJI Manifold2-C</li><li><strong>动态视觉传感器</strong>：IniVation DVXplorer</li><li><strong>深度相机</strong>：Intel Realsense D435i</li><li><strong>自动驾驶飞行控制器</strong>：CUAV Nora Autopilot Flight Controller</li><li><strong>无人机框架</strong>：DJI Frame Wheel F450</li></ol><h3 id="2-2-实验环境">2.2 实验环境</h3><ol><li>Ubuntu 20.04</li><li>ROS neotic</li><li>Ceres Solver：【[安装教程](<a href="http://ceres-solver.org/installation.html">Installation — Ceres Solver (ceres-solver.org)</a>)】</li><li>DV-ROS驱动：<a href="https://gitlab.com/inivation/dv/dv-ros">iniVation AG / dv-core / dv-ros · GitLab</a></li><li>OpenCV&amp;Open_Contrib：【<a href="https://docs.opencv.org/4.8.0/d7/d9f/tutorial_linux_install.html">安装教程</a>】【<a href="https://blog.csdn.net/qq_41035283/article/details/120179578">OpenCV：快速高效解决cmake时的ippicv、face_landmark.dat等文件下载失败问题_opencv tbb下载失败_RuiH.AI的博客-CSDN博客</a>】</li></ol>]]></content>
    
    
      
      
    <summary type="html">

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;https://mybog.s3.bitiful.net/ros/word/FAST-Dynamic-Vision.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;applicat</summary>
      
    
    
    
    <category term="笔记" scheme="https://www.mgodmonkey.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="算法" scheme="https://www.mgodmonkey.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>无人机基于NOKOV动捕系统获取位置数据</title>
    <link href="https://www.mgodmonkey.cn/posts/282d4d3d.html"/>
    <id>https://www.mgodmonkey.cn/posts/282d4d3d.html</id>
    <published>2023-08-15T01:59:22.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境</p><ul><li><p>机载电脑</p><ul><li>系统：<strong>Ubuntu20.04 LST</strong></li><li>ROS1：<strong>noetic</strong></li><li>飞控：<strong>PX4</strong></li><li><strong>mavros</strong></li><li><strong>QGroundControl</strong></li></ul></li><li><p>动捕系统电脑</p><ul><li>动捕配套软件：<strong>XING-NOKOV</strong></li></ul></li></ul><p><strong>关于系统、PX4、mavros、QGroundContorl等安装参考下面两篇文章：</strong></p><ul><li><a href="https://www.mgodmonkey.cn/posts/eb82f52e.html">从0入门自主空中机器人-3-【环境与常用软件安装】 | MGodmonkeyの世界</a></li><li><a href="https://www.mgodmonkey.cn/posts/cfe889db.html">从0入门自主空中机器人-4-【PX4与Gazebo入门】 | MGodmonkeyの世界</a></li></ul></blockquote><h2 id="1-准备工作">1. 准备工作</h2><h3 id="1-1-动捕系统电脑">1.1 动捕系统电脑</h3><blockquote><p>打开动捕系统软件<strong>XING-NOKOV</strong>，进行如下操作</p></blockquote><ul><li>标定与贴点：<a href="https://appmnhim1019110.h5.xiaoeknow.com/p/course/video/v_61a6d4dfe4b0cc47c3c0eb69?type=2">数据采集前准备：标定与贴点 (xiaoeknow.com)</a></li><li>刚体创建：锁帧-&gt;shift键框选5个点-&gt;右键创建刚体，名称: <strong>Tracker0</strong></li><li>网络拓扑结构</li></ul><img src="https://s2.loli.net/2023/10/03/4V56flYRTGotDsP.png" alt="image-20230815110852790" style="zoom: 80%;" /><h3 id="1-2-机载电脑">1.2 机载电脑</h3><blockquote><p>通过<strong>ssh</strong>等工具连接上机载电脑，进行如下操作</p></blockquote><ul><li>打开<strong>QGroundContorl</strong>连接上无人机飞控，并进行<strong>PX4</strong>的配置</li></ul><blockquote><p><a href="https://docs.px4.io/master/zh/advanced_config/parameter_reference.html#EKF2_AID_MASK">EKF2_AID_MASK</a> = 24</p><p><a href="https://docs.px4.io/master/zh/advanced_config/parameter_reference.html#EKF2_HGT_MODE">EKF2_HGT_MODE</a> = 2</p></blockquote><img src="https://s2.loli.net/2023/10/03/wOWbxa1vqILhuP2.png" alt="image-20230815110304074" style="zoom: 80%;" /><img src="https://s2.loli.net/2023/10/03/GoVcaJCmhbNDMSW.png" alt="image-20230815110559457" style="zoom: 80%;" /><blockquote><p><strong>PX4</strong>配置需要保存后重启<strong>QGroundContorl</strong>后才能生效</p></blockquote><ul><li>安装<strong>VRPN</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-noetic-vrpn-client-ros<span class="comment"># 这里的noetic要根据机载电脑的ros版本进行修改</span></span><br></pre></td></tr></table></figure><h2 id="2-操作步骤">2. 操作步骤</h2><blockquote><p>公众号视频参考：<a href="https://appmnhim1019110.h5.xiaoeknow.com/p/course/video/v_62b2ea28e4b07bd2d7b14382?type=2">PX4系统配置与操作演示 (xiaoeknow.com)</a></p></blockquote><ol><li><p>通过<strong>VRPN</strong>将动捕数据广播出去</p><p>打开动捕系统软件<strong>XING-NOKOV</strong>-&gt;<strong>Setting</strong>-&gt;<strong>勾选VRPN Enabled，并选中刚体Tracker0</strong>-&gt;<strong>数据单位设置为meters</strong></p></li><li><p>验证<strong>机载电脑</strong>是否能获取动捕数据，这里的<strong>10.1.1.198</strong>为动捕电脑<strong>IP</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch vrpn_client_ros sample.launch server:=10.1.1.198</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>如果未能获取到数据，先通过<code>ping 10.1.1.198</code>来检查是否存在网络问题</p></blockquote><ol start="3"><li><strong>机载电脑</strong>上运行下面的命令来将动捕数据发送给<strong>地面站QGroundContorl</strong>，这里的<strong>10.1.1.150</strong>为运行<strong>QGroundContorl</strong>主机的<strong>IP地址</strong>，一般为自己笔记本电脑的<strong>IP地址</strong></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch mavros px4.launch gcs_url:=<span class="string">&quot;udp://@10.1.1.150:14550&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>机载电脑</strong>上运行下面的命令来实现话题转发</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun topic_tools relay /vrpn_client_node/Tracker1/pose /mavros/vision_pose/pose</span><br></pre></td></tr></table></figure><ol start="5"><li><p>验证是否正常</p><ul><li>查看动捕数据是否显示：<strong>AnalyzeTools</strong> -&gt; <strong>MAVLINK Inspector</strong> -&gt; <strong>VISION_POSITION_ESTIMATE/ODOMETRY</strong></li></ul><img src="https://s2.loli.net/2023/10/03/G19cZar7JYCUF8b.png" alt="image-20230815153626076" style="zoom: 80%;" /><ul><li>查看<strong>QGroundContorl</strong>中飞行模式是否能切换为<strong>定点模式</strong></li></ul></li></ol><blockquote><p>参考：</p><ul><li><p>PX4官网：<a href="https://www.bitcraze.io/documentation/tutorials/"> 利用视觉或运动捕捉系统进行位置估计</a></p></li><li><p>Nokov应用相关博客：</p><ul><li><p><a href="https://crazyswarm.readthedocs.io/en/latest/index.html">Pixhawk+PX4+NOKOV+C++</a><a href="https://crazyswarm.readthedocs.io/en/latest/index.html">SDK动捕飞控方案</a></p></li><li><p><a href="https://blog.csdn.net/MocapLeader/article/details/125095669?spm=1001.2014.3001.5501">Pixhawk+PX4+NOKOV+VRPN动捕飞控方案</a></p></li></ul></li><li><p>NOKOV github：<a href="https://github.com/NOKOV-MOCAP">https://github.com/NOKOV-MOCAP</a></p></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;机载电脑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统：&lt;strong&gt;Ubuntu20.04 LST&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ROS1：&lt;strong&gt;noetic&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;飞控：</summary>
      
    
    
    
    <category term="知识分享" scheme="https://www.mgodmonkey.cn/categories/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="无人机" scheme="https://www.mgodmonkey.cn/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>从0入门自主空中机器人-4-【PX4与Gazebo入门】</title>
    <link href="https://www.mgodmonkey.cn/posts/cfe889db.html"/>
    <id>https://www.mgodmonkey.cn/posts/cfe889db.html</id>
    <published>2023-08-11T06:46:31.000Z</published>
    <updated>2024-07-29T02:46:46.965Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言:</strong> 从上一篇的文章 <a href="https://www.mgodmonkey.cn/posts/eb82f52e.html">从0入门自主空中机器人-3-【环境与常用软件安装】 | MGodmonkeyの世界</a> 中我们的机载电脑已经安装了系统和常用的软件，这一篇文章中我们入门一下无人机常用的开源飞控<strong>PX4</strong>，以及<strong>ROS</strong>中无人机的仿真</p></blockquote><h2 id="1-PX4的安装">1. PX4的安装</h2><h3 id="1-1-PX4固件代码的下载与编译">1.1 PX4固件代码的下载与编译</h3><blockquote><p><strong>注：推荐使用已经配置好的PX4固件包，PX4版本==1.12：<a href="https://pan.quark.cn/s/9964d20e6c40">https://pan.quark.cn/s/9964d20e6c40</a> 提取码：g3ij</strong></p></blockquote><ul><li><s>通过github下载PX4代码（下载慢时可以找一些github的镜像网站）</s></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PX4/PX4-Autopilot.git --recursive</span><br></pre></td></tr></table></figure><ul><li>安装必要的依赖</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install protobuf-compiler libeigen3-dev libopencv-dev -y</span><br><span class="line"></span><br><span class="line">bash ./PX4-Autopilot/Tools/setup/ubuntu.sh</span><br></pre></td></tr></table></figure><blockquote><p>如果安装PX4的环境比较纯净，比如说<strong>刚装的Ubuntu系统，运行bash脚本过程中会报好几次错</strong>！因为他需要安装的依赖包比较多。解决方法其实也很简单，即 <strong>【确定导致报错的依赖包名，网上检索安装这个依赖包的方法】</strong>。我们只需要将导致报错的依赖包都安装好了，运行.sh文件时就能会跳过他们。</p></blockquote><p>在安装过程中确认并通过所有的提示，即出现以下提示，完成后重新启动计算机。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Relogin or reboot computer before attempting to build NuttX targets</span><br></pre></td></tr></table></figure><blockquote><p>如果在下载或编译过程中遇到任何问题都可以参考下面的博客：</p><ul><li><a href="https://blog.csdn.net/Iamsonice/article/details/120420066?spm=1001.2014.3001.5502">Ubuntu20.04或18.04下PX4（pixhawk）源码编译环境配置教程，及构建代码各种错误解决办法_ubuntu20安装px4_Iamsonice的博客-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/438147439">PX4固件下载及环境搭建小记（Ubuntu 18.04） - 知乎 (zhihu.com)</a></li></ul></blockquote><ul><li>jmavsim仿真环境编译</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> PX4-Autopilot   </span><br><span class="line">make px4_fmu-v3_default</span><br><span class="line">make px4_sitl jmavsim <span class="comment">#jmavsim仿真环境</span></span><br></pre></td></tr></table></figure><p>编译结束会自动启动仿真，出现一下画面则说明编译正常</p><img src="https://s2.loli.net/2023/10/03/FkoJaVUWDzgyZ7w.png" alt="image-20230811151646569" style="zoom:80%;" /><ul><li>gazebo仿真编译</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make px4_sitl gazebo </span><br></pre></td></tr></table></figure><p>出现gazebo界面代表成功</p><img src="https://s2.loli.net/2023/10/03/fzrQvZhuCaUo24m.png" alt="image-20230811154610450" style="zoom:50%;" /><h2 id="2-Gazebo仿真">2. Gazebo仿真</h2><blockquote><p>仿真一般用于验证算法，比较吃性能，机载电脑上运行仿真帧率会比较低，因此仿真推荐在性能比较好的电脑上运行，推荐使用<strong>WSL2</strong>或者<strong>虚拟机</strong></p></blockquote><ul><li>向<code>~/.bashrc</code>中添加launch启动路径</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 文件夹的路径或有出入，以自己的为准进行修改</span></span><br><span class="line"><span class="built_in">source</span> ~/PX4-Autopilot/Tools/setup_gazebo.bash ~/PX4-Autopilot/ ~/PX4-Autopilot/build/px4_sitl_default</span><br><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:~/PX4-Autopilot</span><br><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$ROS_PACKAGE_PATH</span>:~/PX4-Autopilot/Tools/sitl_gazebo</span><br></pre></td></tr></table></figure><p>添加成功后执行<code>source ~/.bashrc</code>来生效脚本</p><ul><li>测试</li></ul><p>可以通过下面这几条命令来测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行结果和 make px4_sitl gazebo一样</span></span><br><span class="line">roslaunch px4 mavros_posix_sitl.launch</span><br><span class="line"><span class="comment"># 或者下面这个launch，结果场景更丰富</span></span><br><span class="line">roslaunch px4 fast_test.launch</span><br></pre></td></tr></table></figure><h2 id="3-QGC地面站">3. QGC地面站</h2><ul><li>安装QGC地面站，可以在下面的网址下载</li></ul><blockquote><p><a href="https://docs.qgroundcontrol.com/master/en/qgc-user-guide/getting_started/download_and_install.html">https://docs.qgroundcontrol.com/master/en/qgc-user-guide/getting_started/download_and_install.html</a></p></blockquote><ul><li>安装依赖</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G dialout <span class="variable">$USER</span></span><br><span class="line">sudo apt-get remove modemmanager -y</span><br><span class="line">sudo apt install gstreamer1.0-plugins-bad gstreamer1.0-libav gstreamer1.0-gl -y</span><br><span class="line">sudo apt install libfuse2 -y</span><br><span class="line">sudo apt install libxcb-xinerama0 libxkbcommon-x11-0 libxcb-cursor0 -y</span><br></pre></td></tr></table></figure><blockquote><p>注销并再次登录以启用对用户权限的更改</p></blockquote><ul><li>选择 Appimage格式下载：<a href="https://d176tv9ibo4jno.cloudfront.net/latest/QGroundControl.AppImage">下载地址</a></li><li>添加权限并启动</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./QGroundControl.AppImage</span><br><span class="line">./QGroundControl.AppImage</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/10/03/RtLNCm71qybSZXB.png" alt="image-20230811163810309"></p><h2 id="4-MOVROS的基本使用">4. MOVROS的基本使用</h2><p>使用<strong>MOVROS</strong>来实现<strong>PX4</strong>飞控无人机的自主启动、悬停和定点飞行</p><p><video width="100%" autoplay="autoplay" controls="controls" __idm_id__="1105922"><source src="https://docs.px4.io/main/assets/media/gazebo_offboard.d8b1cf73.webm" type="video/webm"></video></p><ol><li>创建工作空间以及功能包</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_init_workspace</span><br><span class="line">catkin_create_pkg offboard geometry_msgs mavros_msgs std_msgs rospy roscpp</span><br></pre></td></tr></table></figure><ol start="2"><li>创建文件<code>offboard/src/offb_node.cpp</code>并添加下面的代码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @file offb_node.cpp</span><br><span class="line"> * @brief Offboard control example node, written with MAVROS version 0.19.x, PX4 Pro Flight</span><br><span class="line"> * Stack and tested <span class="keyword">in</span> Gazebo Classic SITL</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;ros/ros.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;geometry_msgs/PoseStamped.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;mavros_msgs/CommandBool.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;mavros_msgs/SetMode.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;mavros_msgs/State.h&gt;</span></span><br><span class="line"></span><br><span class="line">mavros_msgs::State current_state;</span><br><span class="line">void state_cb(const mavros_msgs::State::ConstPtr&amp; msg)&#123;</span><br><span class="line">    current_state = *msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    ros::init(argc, argv, <span class="string">&quot;offb_node&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">    ros::Subscriber state_sub = nh.subscribe&lt;mavros_msgs::State&gt;</span><br><span class="line">            (<span class="string">&quot;mavros/state&quot;</span>, 10, state_cb);</span><br><span class="line">    ros::Publisher local_pos_pub = nh.advertise&lt;geometry_msgs::PoseStamped&gt;</span><br><span class="line">            (<span class="string">&quot;mavros/setpoint_position/local&quot;</span>, 10);</span><br><span class="line">    ros::ServiceClient arming_client = nh.serviceClient&lt;mavros_msgs::CommandBool&gt;</span><br><span class="line">            (<span class="string">&quot;mavros/cmd/arming&quot;</span>);</span><br><span class="line">    ros::ServiceClient set_mode_client = nh.serviceClient&lt;mavros_msgs::SetMode&gt;</span><br><span class="line">            (<span class="string">&quot;mavros/set_mode&quot;</span>);</span><br><span class="line"></span><br><span class="line">    //the setpoint publishing rate MUST be faster than 2Hz</span><br><span class="line">    ros::Rate rate(20.0);</span><br><span class="line"></span><br><span class="line">    // <span class="built_in">wait</span> <span class="keyword">for</span> FCU connection</span><br><span class="line">    <span class="keyword">while</span>(ros::ok() &amp;&amp; !current_state.connected)&#123;</span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    geometry_msgs::PoseStamped pose;</span><br><span class="line">    pose.pose.position.x = 0;</span><br><span class="line">    pose.pose.position.y = 0;</span><br><span class="line">    pose.pose.position.z = 2;</span><br><span class="line"></span><br><span class="line">    //send a few setpoints before starting</span><br><span class="line">    <span class="keyword">for</span>(int i = 100; ros::ok() &amp;&amp; i &gt; 0; --i)&#123;</span><br><span class="line">        local_pos_pub.publish(pose);</span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mavros_msgs::SetMode offb_set_mode;</span><br><span class="line">    offb_set_mode.request.custom_mode = <span class="string">&quot;OFFBOARD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    mavros_msgs::CommandBool arm_cmd;</span><br><span class="line">    arm_cmd.request.value = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    ros::Time last_request = ros::Time::now();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(ros::ok())&#123;</span><br><span class="line">        <span class="keyword">if</span>( current_state.mode != <span class="string">&quot;OFFBOARD&quot;</span> &amp;&amp;</span><br><span class="line">            (ros::Time::now() - last_request &gt; ros::Duration(5.0)))&#123;</span><br><span class="line">            <span class="keyword">if</span>( set_mode_client.call(offb_set_mode) &amp;&amp;</span><br><span class="line">                offb_set_mode.response.mode_sent)&#123;</span><br><span class="line">                ROS_INFO(<span class="string">&quot;Offboard enabled&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            last_request = ros::Time::now();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>( !current_state.armed &amp;&amp;</span><br><span class="line">                (ros::Time::now() - last_request &gt; ros::Duration(5.0)))&#123;</span><br><span class="line">                <span class="keyword">if</span>( arming_client.call(arm_cmd) &amp;&amp;</span><br><span class="line">                    arm_cmd.response.success)&#123;</span><br><span class="line">                    ROS_INFO(<span class="string">&quot;Vehicle armed&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                last_request = ros::Time::now();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        local_pos_pub.publish(pose);</span><br><span class="line"></span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>代码解释</strong>或者<strong>python版本</strong>见：<a href="https://docs.px4.io/main/zh/ros/mavros_offboard_cpp.html">MAVROS Offboard 控制示例 (C++) | PX4 自动驾驶用户指南</a></p></blockquote><ol start="3"><li>修改<strong>CMakeLists.txt</strong>，添加如下两行</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_executable(offboard src/offb_node.cpp)</span><br><span class="line">target_link_libraries(offboard <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>编译</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> devel/setup.sh</span><br></pre></td></tr></table></figure><ol start="5"><li>启动无人机仿真并运行节点</li></ol><p>在一个终端中运行下面指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch px4 fast_test.launch <span class="comment"># 启动仿真</span></span><br></pre></td></tr></table></figure><p>在另一个终端中启动节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun offboard offboard</span><br></pre></td></tr></table></figure><blockquote><p>更多<strong>mavros</strong>的使用以及内置的消息、服务等使用详见官方文档：<a href="http://wiki.ros.org/mavros/">mavros - ROS Wiki</a></p></blockquote><blockquote><p><strong>注：gazebo仿真时可能遇到的问题</strong></p><ol><li><strong>无人无法控制时的BUG</strong></li></ol><p>gazebo仿真终端显示如下并不断重复</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD: Unexpected <span class="built_in">command</span> 176, result 0</span><br><span class="line">INFO [commander] Failsafe mode deactivated</span><br><span class="line">INFO [commander] Failsafe mode activated</span><br></pre></td></tr></table></figure><p>且offboard节点端口不断出现如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ INFO] [1705027176.310554463, 727.708000000]: Offboard enabled</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/12/I8xSiO7z9fbYdrv.png" alt=""></p><p><strong>解决办法：</strong></p><ul><li><p>在前面的三个终端运行的时候，打开QGC地面站，在参数中搜索<code>COM_RCL_EXCEPT</code></p></li><li><p>将<code>COM_RCL_EXCEPT</code>参数改为<code>4</code>并保存</p></li></ul><img src="https://s2.loli.net/2024/01/12/31SIkYCRsGbg69F.png" style="zoom: 80%;" /><p><strong>参考博客：</strong></p><p><a href="https://blog.csdn.net/weixin_45031928/article/details/135142557">【PX4-AutoPilot教程-Offboard】MAVROS功能包控制无人机进入offboard模式飞行官方例程（C++实现）_mavros px4 实例-CSDN博客</a></p><ol start="2"><li><strong>启动single_vehicle_spawn_ssdf.launch时报错</strong></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RLException: <span class="keyword">while</span> processing /home/laohanba/PX4-Autopilot/launch/single_vehicle_spawn_ssdf.launch:</span><br><span class="line">Invalid &lt;param&gt; tag: Cannot load <span class="built_in">command</span> parameter [model_description]: no such <span class="built_in">command</span> [[<span class="string">&#x27;xmlstarlet&#x27;</span>, <span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;//plugin[@name=&quot;mavlink_interface&quot;]/mavlink_tcp_port&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;//plugin[@name=&quot;mavlink_interface&quot;]&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;elem&#x27;</span>, <span class="string">&#x27;-n&#x27;</span>, <span class="string">&#x27;mavlink_tcp_port&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;4560&#x27;</span>, <span class="string">&#x27;/home/laohanba/PX4-Autopilot/Tools/sitl_gazebo/models/iris_D435i/iris_D435i.sdf&#x27;</span>]]. </span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xmlstarlet</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>参考：</strong></p><ul><li><a href="https://docs.px4.io/main/zh/dev_setup/dev_env_linux_ubuntu.html">Ubuntu LTS/Debian Linux 的开发环境 | PX4 自动驾驶用户指南</a></li><li><a href="https://docs.qq.com/doc/DZlNOVnhaV0hkaktL">PX4固件+mavros+QGC地面站安装 (qq.com)</a></li><li><a href="https://blog.csdn.net/qq_38768959/article/details/106041494">PX4从放弃到精通（二）：ubuntu18.04配置px4编译环境及mavros环境_超维空间科技的博客-CSDN博客</a></li><li><a href="https://www.ncnynl.com/archives/201709/2009.html">PX4开发指南-2.2.2.Linux - 创客智造/爱折腾智能机器人 (ncnynl.com)</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html"> 前言: 从上一篇的文章 从0入门自主空中机器人-3-【环境与常用软件安装】 | MGodmonkeyの世界 中我们的机载电脑已经安装了系统和常用的软件，这一篇文章中我们入门一下无人机常用的开源飞控PX4，以及ROS中无人机的仿真  1. PX4的安装 1.1 PX4固件代码的下载与编译  通过github下载PX4代码（下载慢时可以找一些github的镜像网站）  git clone https...</summary>
    
    
    
    <category term="从0入门自主空中机器人" scheme="https://www.mgodmonkey.cn/categories/%E4%BB%8E0%E5%85%A5%E9%97%A8%E8%87%AA%E4%B8%BB%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="无人机" scheme="https://www.mgodmonkey.cn/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>从0入门自主空中机器人-2-2【无人机硬件选型-PX4篇】</title>
    <link href="https://www.mgodmonkey.cn/posts/39efaa44.html"/>
    <id>https://www.mgodmonkey.cn/posts/39efaa44.html</id>
    <published>2023-08-10T07:18:29.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-常用资料以及官方网站">1. 常用资料以及官方网站</h2><ul><li><p>无人机飞控PX4用户使用手册（无人机基本设置、地面站使用教程、软硬件搭建等）：<a href="https://docs.px4.io/main/en/">https://docs.px4.io/main/en/</a></p></li><li><p>PX4固件开源地址：<a href="https://github.com/PX4/PX4-Autopilot">https://github.com/PX4/PX4-Autopilot</a></p></li><li><p>飞控硬件、数传模块、GPS、分电板等—holybro官网：<a href="http://www.holybro.com/">http://www.holybro.com/</a></p></li><li><p>无人机动力系统–TMotor官网：<a href="https://uav-cn.tmotor.com/">https://uav-cn.tmotor.com/</a></p></li><li><p>无人机在线课程、开源项目—阿木实验室：<a href="https://amovlab.com/">https://amovlab.com/</a></p></li></ul><h2 id="2-机架推荐-可二次开发整机无人机">2. 机架推荐/可二次开发整机无人机</h2><ul><li><p>Holybro无人机（整机无人机以及无人机机架散件）：<a href="https://shop.holybro.com/c/development-kit_0502/2.html">【前往】</a></p></li><li><p>阿木实验室无人机：<a href="https://amovlab.taobao.com/category-1552064747.htm?spm=a1z10.5-c-s.0.0.37db7005JWCIiQ&amp;search=y&amp;parentCatId=1507493272&amp;parentCatName=%BF%AA%D4%B4%CF%EE%C4%BF%D3%EB%D5%FB%BB%FA&amp;catName=PX4%CF%B5%C1%D0">【前往】</a></p></li><li><p>FPV梦工厂（机架，专门为FPV竞赛设计）：<a href="https://shop67894743.taobao.com/?spm=a230r.7195193.1997079397.2.656a645dRmmwor">【前往】</a></p></li></ul><h2 id="3-无人机各个重要模块功能及选型">3. 无人机各个重要模块功能及选型</h2><p><img src="https://s2.loli.net/2023/10/03/ACUnrlyWkYcb5sT.png" alt="image-20230810152216490"></p><h3 id="3-1-航模电池">3.1 航模电池</h3><p><img src="https://s2.loli.net/2023/10/03/2sDSLa5M7NF438H.png" alt="image-20230810152716271"></p><ul><li>主要的参数及选型推荐</li></ul><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th><th style="text-align:center">推荐值</th></tr></thead><tbody><tr><td style="text-align:center">容量</td><td style="text-align:center">电池容量，表示电池可以放出的电量多少，以mh为单位</td><td style="text-align:center">5000mAH</td></tr><tr><td style="text-align:center">电芯节数</td><td style="text-align:center">电芯数量，决定了电池输出电压大小。通常有3S,4S,6S等，如4S电池代表一块电池内有4块电芯，4块电芯串联输出，每个电芯最高输出电压4.2V,则该电池最终最大输出16.8V</td><td style="text-align:center">4S</td></tr><tr><td style="text-align:center">放电倍率</td><td style="text-align:center">电池的倍率特性是指的电池的充放电性能，倍率越高的能够承受的放电电流就越大，倍率的单位是C</td><td style="text-align:center">50c/60c</td></tr><tr><td style="text-align:center">接口</td><td style="text-align:center">电池输出接口，通常有XT60,XT40,T插等</td><td style="text-align:center">XT60</td></tr></tbody></table><blockquote><p>推荐淘宝链接：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.22.d2f349b7KJtvRq&amp;id=681311943685&amp;ns=1&amp;abbucket=9#detail">【前往】</a></p></blockquote><h3 id="3-2-飞控">3.2 飞控</h3><p><img src="https://s2.loli.net/2023/10/03/iKnzoFpG6ZfcjXq.png" alt="image-20230810153009268"></p><ul><li>介绍</li></ul><blockquote><p>**飞控：**飞行控制器，用于飞行器底层控制，如无人机姿态、高度以及位置等。同时也可以连接传感器以及其它模块，如GPS、遥控器接收机以及数传等。</p></blockquote><ul><li><p>选型推荐</p><ul><li>型号：<strong>pixhawk 6C</strong></li><li>使用说明：<a href="https://docs.px4.io/main/en/">【前往】</a></li><li>整体介绍及接口说明：<a href="https://docs.holybro.com/autopilot/pixhawk-6c/overview">【前往】</a></li></ul><blockquote><p>推荐淘宝链接：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.16.1a6b466cVDqIXL&amp;id=679030751224&amp;ns=1&amp;abbucket=9#detail">【前往】</a></p></blockquote></li></ul><h3 id="3-3-分电板">3.3 分电板</h3><p><img src="https://s2.loli.net/2023/10/03/Qty1glEGfW3LvYx.png" alt="image-20230810153520742"></p><ul><li>介绍</li></ul><blockquote><p>**分电板：**分电板的作用是将电池供电分配给四个电调，并且将飞控的控制信号传递给电调。</p></blockquote><ul><li><p>选型推荐</p><ul><li>型号：<strong>PM07</strong></li><li>使用说明：<a href="https://docs.holybro.com/power-module-and-pdb/power-module/pm07-quick-start-guide">【前往】</a></li></ul><blockquote><p>推荐淘宝链接（和飞控一起购买）：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.16.1a6b466cVDqIXL&amp;id=679030751224&amp;ns=1&amp;abbucket=9#detail">【前往】</a></p></blockquote></li></ul><h3 id="3-4-电调">3.4 电调</h3><ul><li>介绍</li></ul><blockquote><p>**电调：**接收控制指令并控制电机旋转。</p></blockquote><ul><li>说明</li></ul><blockquote><p>电调有分体式和四合一两种型号，四合一顾名思义就是将四个分体式电调整合在一块PCB板上，四合一电调常用于穿越机上，这里所组装的四旋翼无人机推荐使用分体式电调。</p></blockquote><p><img src="https://s2.loli.net/2023/10/03/6w43rKXPpZnMT1i.png" alt="image-20230810153806629"></p><p>选型推荐</p><ul><li><p>型号：<strong>F45A</strong></p></li><li><p>使用说明：<a href="https://uav-cn.tmotor.com/html/2018/ESC_0410/76.html">【前往】</a></p><blockquote><p>推荐淘宝链接：<a href="https://item.taobao.com/item.htm?spm=a21n57.1.0.0.3806523cSZCB47&amp;id=543180212841&amp;ns=1&amp;abbucket=5#detail">【前往】</a></p></blockquote></li></ul><p><img src="https://s2.loli.net/2023/10/03/aYVXKoPRJfwNi5g.png" alt="image-20230810154350255"></p><ul><li><p>选型推荐</p><ul><li><p>型号：<strong>F55A PRO 6S 4IN1</strong></p></li><li><p>使用说明：<a href="https://uav-cn.tmotor.com/html/2018/ESC_1219/187.html">【前往】</a></p></li></ul><blockquote><p>推荐淘宝链接：<a href="https://item.taobao.com/item.htm?spm=a21n57.1.0.0.3806523cSZCB47&amp;id=719387596312&amp;ns=1&amp;abbucket=5#detail">【T-MOTOR 老虎动力】穿越机 航模电调 2代 F55A PROⅡ 6S 4IN1-淘宝网 (taobao.com)</a></p></blockquote></li></ul><h3 id="3-5-电机">3.5 电机</h3><p><img src="https://s2.loli.net/2023/10/03/kXLMx5Uf8neAVDJ.png" alt="image-20230810155304636"></p><ul><li><p>选型推荐</p><ul><li><p>型号：<strong>TmotorPro KV2200</strong></p></li><li><p>使用说明：<a href="https://uav-cn.tmotor.com/html/2018/Motor_0815/184.html">【前往】</a></p></li></ul><blockquote><p>推荐淘宝链接：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.16.7c4d2af30pLyz1&amp;id=593544036760&amp;ns=1&amp;abbucket=9#detail">【前往】</a></p></blockquote></li></ul><h3 id="3-6-螺旋桨">3.6 螺旋桨</h3><p>四旋翼飞机螺旋桨安装方向如下图所示，在安装时，螺旋桨厚的一面在旋转方向的前方：</p><p><img src="https://s2.loli.net/2023/10/03/JDNCqiOnS95HsTr.png" alt="image-20230810155624729"></p><h3 id="3-7-数传">3.7 数传</h3><p><img src="https://s2.loli.net/2023/10/03/JPCIDt38Up4kAsO.png" alt="image-20230810155848145"></p><ul><li>介绍</li></ul><blockquote><p>**数传：**用于无人机和地面站（ <a href="http://qgroundcontrol.com/">http://qgroundcontrol.com/</a> ）进行实时通讯，在飞行时传递无人机电量、飞行姿态、GPS位置等信息。</p></blockquote><ul><li><p>选型推荐</p><ul><li><p>型号：<strong>SiK Telemetry Radio V3</strong></p></li><li><p>使用说明：<a href="https://docs.holybro.com/telemetry-radio/sik-telemetry-radio-v3">【前往】</a></p></li></ul></li></ul><blockquote><p>推荐淘宝链接：<a href="https://detail.tmall.com/item.htm?abbucket=9&amp;id=640015018502&amp;ns=1&amp;spm=a230r.1.14.44.275e1f72h2RcGZ">【前往】</a></p></blockquote><h3 id="3-8-遥控器及接收机">3.8 遥控器及接收机</h3><p><img src="https://s2.loli.net/2023/10/03/muBpyqskDOv3rYe.png" alt="image-20230810155932730"></p><ul><li>选型推荐<ul><li>型号：<strong>天地飞ET16S</strong></li></ul></li></ul><blockquote><p>推荐淘宝链接：<a href="https://item.taobao.com/item.htm?id=585674375898&amp;ali_refid=a3_430620_1006:1105273393:N:t7Nl5roNKstJRQdsBQHAyLeFzSCWa1Ia:8cc6b1226529ac8b9b5457799c0ef9e6&amp;ali_trackid=1_8cc6b1226529ac8b9b5457799c0ef9e6&amp;spm=a230r.1.14.1#detail">【前往】</a></p></blockquote><h3 id="3-9-机载电脑（可选）">3.9 机载电脑（可选）</h3><blockquote><p>Intel NUC(推荐)、Jetson Tx2，树莓派。用于无人机感知、路径规划等算法运算，向飞控发送指令。</p></blockquote><h2 id="4-其它无人机散件及选型">4. 其它无人机散件及选型</h2><ul><li><p>桨保：保护桨叶在碰撞时不会折坏。</p><ul><li>参考：<a href="https://item.taobao.com/item.htm?spm=a1z0d.6639537/tb.1997196601.90.18807484bPqSeX&amp;id=550135021616">【淘宝链接】</a></li></ul></li><li><p>尼龙柱：用于固定机载电脑及其它模块。</p><ul><li>参考：<a href="https://detail.tmall.com/item_o.htm?id=535423340297">【淘宝链接】</a></li></ul></li><li><p>铝柱：用于连接无人机上下两层。</p><ul><li>参考：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.122.525111f9XQ2VUi&amp;id=693131457335&amp;ns=1&amp;abbucket=9#detail">【淘宝链接】</a></li></ul></li><li><p>减震球：用于降低在飞行时飞控模块的震动频率，保护其中的IMU。</p><ul><li>参考：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.163.28084a198uQJEJ&amp;id=584534547675&amp;ns=1&amp;abbucket=9#detail">【淘宝链接】</a></li></ul></li><li><p>锂电池充电器：</p><ul><li>参考：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.163.28084a198uQJEJ&amp;id=584534547675&amp;ns=1&amp;abbucket=9#detail">【淘宝链接】</a></li></ul></li><li><p>电池绑带：</p><ul><li>参考：<a href="https://detail.tmall.com/item.htm?abbucket=9&amp;id=696500113695&amp;ns=1&amp;skuId=5114520207331&amp;spm=a230r.1.14.167.12822e1fkSLylp">【淘宝链接】</a></li></ul></li><li><p>强力背胶魔术贴：用于固定电池。</p><ul><li>参考：<a href="https://detail.tmall.com/item.htm?abbucket=9&amp;id=696500113695&amp;ns=1&amp;skuId=5114520207331&amp;spm=a230r.1.14.167.12822e1fkSLylp">【淘宝链接】</a></li></ul></li><li><p>稳压模块：用于机载电脑和部分传感器的供电。</p><ul><li>参考：<a href="https://detail.tmall.com/item.htm?ali_refid=a3_430582_1006:1231260087:N:DZVEEzu0WOqQc0192VtMcLhdsOn917cy:64422440d684dfa33c08760a8e57cc37&amp;ali_trackid=1_64422440d684dfa33c08760a8e57cc37&amp;id=601488488830&amp;spm=a230r.1.14.1">【淘宝链接】</a></li></ul></li></ul><div class="note info flat"><p>本文参考自微信公众号：<a href="https://mp.weixin.qq.com/s/b5BIYmxXTzkaapnkMK6P8w">【交流分享】无人机资料汇总及选型推荐–PX4系列 (qq.com)</a></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-常用资料以及官方网站&quot;&gt;1. 常用资料以及官方网站&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无人机飞控PX4用户使用手册（无人机基本设置、地面站使用教程、软硬件搭建等）：&lt;a href=&quot;https://docs.px4.io/main/en/&quot;&gt;https://</summary>
      
    
    
    
    <category term="从0入门自主空中机器人" scheme="https://www.mgodmonkey.cn/categories/%E4%BB%8E0%E5%85%A5%E9%97%A8%E8%87%AA%E4%B8%BB%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="无人机" scheme="https://www.mgodmonkey.cn/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>从0入门自主空中机器人-3-【环境与常用软件安装】</title>
    <link href="https://www.mgodmonkey.cn/posts/eb82f52e.html"/>
    <id>https://www.mgodmonkey.cn/posts/eb82f52e.html</id>
    <published>2023-08-08T08:51:46.000Z</published>
    <updated>2024-07-30T12:54:38.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="关于本课程：">关于本课程：</h2><p>本次课程是一套面向对<strong>自主空中机器人</strong>感兴趣的学生、爱好者、相关从业人员的免费课程，包含了从<strong>硬件组装</strong>、<strong>机载电脑环境设置</strong>、<strong>代码部署</strong>、实机实验等全套详细流程，带你从0开始，组装属于自己的自主无人机，并让它可以在未知的环境中自由避障穿行。</p><p>本次课程的重心主要落在自主空中机器人的搭建、代码部署及调试上，关于自主空中机器人的一些理论基础，例如<strong>动力学模型</strong>，<strong>路径搜索</strong>，轨迹规划，<strong>地图构建</strong>等内容。</p><h3 id="课程视频">课程视频</h3><p><strong>B站：</strong><a href="https://www.bilibili.com/video/BV1WZ4y167me/?p=1">【完结】从0入门自主空中机器人 | 开源 | 浙江大学Fast-Lab</a></p><p><strong>深蓝学院：</strong><a href="https://www.shenlanxueyuan.com/course/470">从0入门自主空中机器人</a></p><h3 id="相关源码">相关源码</h3><p><strong>GitHub：</strong><a href="https://github.com/ZJU-FAST-Lab/Fast-Drone-250">https://github.com/ZJU-FAST-Lab/Fast-Drone-250</a></p><p><strong>Gitee：</strong><a href="https://gitee.com/pn_code/Fast-Drone-250">https://gitee.com/pn_code/Fast-Drone-250</a></p></blockquote><h2 id="1-机载电脑环境安装">1. 机载电脑环境安装</h2><blockquote><p>机载电脑推荐环境</p><p>系统：Ubuntu20.04 LST</p><p>ROS1：noetic</p><p>ROS2：foxy</p><p><strong>说明：ROS1和ROS2可以安装在同一个系统，但需要进行一点配置，见<a href="https://www.mgodmonkey.cn/posts/a344ec17.html">【ROS1和ROS2的共存问题】</a></strong></p><p><strong>目前很多算法，包括本教程都是基于ROS1的版本，但ROS2对比ROS1优势很大，而且ROS1目前已经宣布将会在2023年停止更新，因此ROS2已经是大众所趋，建议学有余力的同学在学完ROS1后可以顺带连ROS2也一起学了</strong></p></blockquote><h3 id="1-1-Ubuntu安装">1.1 Ubuntu安装</h3><p>视频教程如下：</p><div align=center class="video">    <iframe src="//player.bilibili.com/player.html?aid=382426906&bvid=BV1WZ4y167me&cid=557822079&page=7&autoplay=0&high_quality=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div><ul><li>镜像站地址： <a href="http://mirrors.aliyun.com/ubuntu-releases/20.04/">http://mirrors.aliyun.com/ubuntu-releases/20.04/</a> 下载  <strong>ubuntu-20.04.4 desktop-amd64.iso</strong></li><li>烧录软件<strong>UltraISO</strong>官网：<a href="https://cn.ultraiso.net/">https://cn.ultraiso.net/</a></li><li>分区设置：<ul><li>**EFI系统分区（主分区）**512M</li><li>**交换空间（逻辑分区）**16000M（内存大小的两倍）</li><li>**挂载点/（主分区）**剩余所有容量</li></ul></li></ul><blockquote><p>教程中推荐笔记本上也安装<strong>Ubuntu</strong>，但实际用下来并不推荐安装<strong>Ubuntu</strong>在笔记本上，很多软件<strong>Windows</strong>也有，而且笔记本的作用主要就是编辑并发送代码文件到<strong>机载电脑</strong>上，用<strong>VScode</strong>+<strong>MobaXterm</strong>+<strong>ssh</strong>+<strong>nomachine</strong>即可</p></blockquote><h3 id="1-2-ROS安装">1.2  ROS安装</h3><p>推荐使用鱼香ros的一键安装脚本：一行代码搭建机器人开发环境(ROS/ROS2/ROSDEP)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros</span><br></pre></td></tr></table></figure><blockquote><p>开源地址：<a href="https://github.com/fishros/install">https://github.com/fishros/install</a><br>问题汇总：<a href="https://www.fishros.org.cn/forum/category/7/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85">一键安装 | 鱼香ROS (fishros.org.cn)</a></p><p>更多<strong>ROS</strong>的资源及教程参考：<a href="https://www.mgodmonkey.cn/posts/232d6cf1.html">ROS资源汇总 | MGodmonkeyの世界</a></p></blockquote><h2 id="2-必备软件安装">2. 必备软件安装</h2><div align=center class="video">    <iframe src="//player.bilibili.com/player.html?aid=382426906&bvid=BV1WZ4y167me&cid=562685965&page=8&autoplay=0&high_quality=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div><h3 id="2-1-realsense驱动安装（RGB-D相机）">2.1 realsense驱动安装（RGB-D相机）</h3><blockquote><p>参考：<a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md">https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md</a></p></blockquote><ol><li><s>添加秘钥</s></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install apt-transport-https</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/apt/keyrings</span><br><span class="line">curl -sSf https://librealsense.intel.com/Debian/librealsense.pgp | sudo <span class="built_in">tee</span> /etc/apt/keyrings/librealsense.pgp &gt; /dev/null</span><br></pre></td></tr></table></figure><ol start="2"><li><s>添加安装源</s></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/librealsense.pgp] https://librealsense.intel.com/Debian/apt-repo `lsb_release -cs` main&quot;</span> | \</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/librealsense.list</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><blockquote><p>以下是README.pdf中的方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || </span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb https://librealsense.intel.com/Debian/apt-repo <span class="subst">$(lsb_release -cs)</span> main&quot;</span> -u</span><br></pre></td></tr></table></figure></blockquote><ol start="3"><li>安装包</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面两个必装</span></span><br><span class="line">sudo apt-get install librealsense2-dkms</span><br><span class="line">sudo apt-get install librealsense2-utils</span><br><span class="line">sudo apt-get install ros-noetic-realsense2-camera</span><br><span class="line"><span class="comment"># 下面两个可选，主要是开发调试用</span></span><br><span class="line">sudo apt-get install librealsense2-dev</span><br><span class="line">sudo apt-get install librealsense2-dbg</span><br></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">realsense-viewer</span></span><br></pre></td></tr></table></figure><p>通过<code>realsense-viewer</code>的指令来检查深度相机是否正确安装并显示</p><h3 id="2-2-MAVROS">2.2 MAVROS</h3><ol><li>介绍</li></ol><p>MAVROS相当于PX4飞控中的MAVLINK模块。MAVROS将话题转为MAVLINK格式消息发送给飞控，飞控中的MAVLINK模块将MAVLINK格式消息转化为uORB消息给PX4各模块间传递消息使用，也可以反过来从uORB消息一直到ROS话题。</p><p>代码示例看<a href="https://docs.px4.io/main/en/ros/mavros_offboard_cpp.html">MAVROS Offboard control example</a>就好了，讲得很清楚。</p><ol start="2"><li>安装</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-noetic-mavros   <span class="comment"># 这里的noetic是ros的版本，其他版本自行更换名称</span></span><br><span class="line"><span class="built_in">cd</span> /opt/ros/noetic/lib/mavros</span><br><span class="line">sudo ./install_geographiclib_datasets.sh</span><br></pre></td></tr></table></figure><h3 id="2-3-git、gcc、g-、python与make">2.3 git、gcc、g++、python与make</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git<span class="comment"># git</span></span><br><span class="line">sudo apt install build-essential <span class="comment"># gcc、g++</span></span><br><span class="line">sudo apt install make<span class="comment"># make</span></span><br><span class="line">sudo apt install python3<span class="comment"># python3</span></span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">gcc --version</span><br><span class="line">g++ --version</span><br><span class="line">make --version</span><br><span class="line">python3 --version</span><br></pre></td></tr></table></figure><h3 id="2-4-ceres、glog与ddyanmic-reconfigure">2.4 ceres、glog与ddyanmic-reconfigure</h3><ul><li><p>介绍</p><ul><li><p><strong>ceres</strong>是什么<br><strong>Ceres Solver</strong>是一个开源**C++**库，用于建模和解决大型复杂的优化问题。它可以用于解决具有边界约束和一般无约束优化问题的非线性最小二乘问题。它是一个成熟，功能丰富且高性能的库。Ceres Solver是谷歌2010就开始用于解决优化问题的C++库，2014年开源。在Google地图，Tango项目，以及著名的SLAM系统OKVIS和Cartographer的优化模块中均使用了Ceres Solver。</p></li><li><p><strong>glog</strong>是什么</p><p><strong>glog</strong>是<strong>google</strong>出品的<strong>c++<strong>日志库，提供了很多非常不错的功能，例如</strong>日志分等级打印</strong>、<strong>条件打印</strong>、<strong>日志格式化</strong>、<strong>日志文件滚动大小</strong>等。</p></li><li><p><strong>ddynamic-reconfigure</strong>是什么</p><p><strong>ddynamic-reconfigure</strong>是一个ROS软件包，它提供了一个动态重新配置的框架，可以在运行时修改ROS节点的参数。它可以帮助用户在<br>不停止节点的情况下，实时地调整节点的参数，从而优化节点的性能。</p></li></ul></li><li><p>下载并解压<code>3rd_party.zip</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://gitee.com/pn_code/Fast-Drone-250/blob/master/3rd_party.zip</span><br><span class="line">unzip 3rd_party.zip</span><br></pre></td></tr></table></figure><ul><li>编译安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./glog</span><br><span class="line">sudo <span class="built_in">chmod</span> 777 ./autogen.sh</span><br><span class="line">sudo <span class="built_in">chmod</span> 777 ./configure </span><br><span class="line">sudo ./autogen.sh &amp;&amp; sudo ./configure &amp;&amp; sudo make install</span><br><span class="line">sudo apt-get install liblapack-dev libsuitesparse-dev libcxsparse3 libgflags-dev libgoogle-glog-dev libgtest-dev</span><br><span class="line"><span class="built_in">cd</span> ../ceres-solver-2.0.0rc1</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">sudo make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo apt-get install ros-noetic-ddynamic-reconfigure</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>libcxsparse3</code>如果有错误，参考下面这篇博客<a href="https://blog.csdn.net/qq_42257666/article/details/124598167">【安装Ceres相关依赖时libcxsparse3.1.2报错_安装ceres相关依赖项时显示找不到_振华OPPO的博客-CSDN博客】</a></p></blockquote><h3 id="2-4-ego-plannner">2.4 ego-plannner</h3><blockquote><p>参考：<a href="https://gitee.com/iszhouxin/ego-planner.git">ZJU-FAST-Lab/ego-planner (gitee.com)</a>的**<a href="https://gitee.com/iszhouxin/ego-planner/blob/master/README.md">Readme.md</a>**中的说明</p></blockquote><ul><li>安装<strong>uav_simulator</strong>需要的<strong>Armadillo</strong>库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libarmadillo-dev</span><br></pre></td></tr></table></figure><ul><li><p>下载源码</p><p>From github</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ZJU-FAST-Lab/ego-planner.git</span><br></pre></td></tr></table></figure><p>Or from gitee</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/iszhouxin/ego-planner.git</span><br></pre></td></tr></table></figure><ul><li>编译源码</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ego-planner</span><br><span class="line">catkin_make -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure><ul><li>执行</li></ul><p>在<code>ego-planner</code>文件夹的一个终端中，打开rviz进行可视化和交互</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch ego_planner rviz.launch</span><br></pre></td></tr></table></figure><p>在<code>ego-planner</code>文件夹的另一个终端中，打开仿真</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch ego_planner run_in_sim.launch</span><br></pre></td></tr></table></figure><h2 id="3-常用软件安装">3. 常用软件安装</h2><div align=center class="video">    <iframe src="//player.bilibili.com/player.html?aid=382426906&bvid=BV1WZ4y167me&cid=562630601&page=9&autoplay=0&high_quality=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe></div><ul><li><strong>vscode</strong><ul><li>前往<a href="https://code.visualstudio.com/">【vscode官网】</a>下载<strong>Linux x64 deb</strong>包</li><li>使用<code>sudo apt install ****.deb</code>进行安装</li></ul></li><li><strong>Terminator</strong><ul><li>多窗口命令行终端</li><li>使用<code>sudo apt install terminator</code>进行安装</li></ul></li><li><strong>Plotjuggler</strong><ul><li>可视化时间时序的工具</li><li>使用<code>sudo apt install ros-noetic-plotjuggler ros-noetic-plotjuggler-ros</code>进行安装</li><li>使用<code>rosrun plotjuggler plotjuggler</code>进行查看</li></ul></li><li><strong>Net-tools</strong><ul><li>网络工具包，用于查看linux的IP地址</li><li>使用<code>sudo apt install net-tools</code>进行安装</li><li>使用<code>ifconfig</code>进行查看IP地址</li></ul></li><li><strong>ssh</strong><ul><li>使用<code>sudo apt install openssh-server</code>进行安装</li><li>使用ssh终端等工具连接上机载电脑</li></ul></li></ul><blockquote><p>以上工具的使用方式请自行前往度娘搜索</p><p>以上工具的阿里云盘下载地址：【<a href="https://www.aliyundrive.com/s/xLxgkVG5wqA">下载入口</a>】</p></blockquote><div class="row">    <embed src="https://mybog.s3.bitiful.net/ros/word/readme.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h2 id=&quot;关于本课程：&quot;&gt;关于本课程：&lt;/h2&gt;
&lt;p&gt;本次课程是一套面向对&lt;strong&gt;自主空中机器人&lt;/strong&gt;感兴趣的学生、爱好者、相关从业人员的免费课程，包含了从&lt;strong&gt;硬件组装&lt;/strong&gt;、&lt;strong&gt;机载电脑环</summary>
      
    
    
    
    <category term="从0入门自主空中机器人" scheme="https://www.mgodmonkey.cn/categories/%E4%BB%8E0%E5%85%A5%E9%97%A8%E8%87%AA%E4%B8%BB%E7%A9%BA%E4%B8%AD%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="无人机" scheme="https://www.mgodmonkey.cn/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>SLAM优秀开源方案</title>
    <link href="https://www.mgodmonkey.cn/posts/1f501926.html"/>
    <id>https://www.mgodmonkey.cn/posts/1f501926.html</id>
    <published>2023-08-02T08:34:00.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>视觉SLAM</strong><ul><li>ORB SLAM2(单双目RGB-D)：<a href="https://github.com/raulmur/ORB_SLAM2">https://github.com/raulmur/ORB_SLAM2</a></li><li>DSO(单目)：<a href="https://github.com/JakobEngel/dso">https://github.com/JakobEngel/dso</a></li><li>InfiniTAM v3(RGB-D)：<a href="https://github.com/victorprad/InfiniTAM">https://github.com/victorprad/InfiniTAM</a></li></ul></li><li><strong>视觉+惯导SLAM</strong><ul><li>VINS-Fusion(单双目+IMU)：<a href="https://github.com/HKUST-Aerial-Robotics/VINS-Fusion">https://github.com/HKUST-Aerial-Robotics/VINS-Fusion</a></li><li>OKVIS(单双目 + IMU)：<a href="https://github.com/ethz-asl/okvis">https://github.com/ethz-asl/okvis</a></li><li>ORB SLAM33(单双目 + IMU)：<a href="https://github.com/UZ-SLAMLab/ORB_SLAM3">https://github.com/UZ-SLAMLab/ORB_SLAM3</a></li></ul></li><li><strong>激光SLAM</strong><ul><li>LeGO-LOAM：<a href="https://github.com/RobustFieldAutonomyLab/LeGO-LOAM">https://github.com/RobustFieldAutonomyLab/LeGO-LOAM</a></li><li>Cartographer(LIDAR + IMU)：<a href="https://github.com/googlecartographer/cartographer">https://github.com/googlecartographer/cartographer</a></li></ul></li><li><strong>多传感器融合</strong><ul><li>LVI-SAM(LIDAR + IMU + RTK + GPS)：<a href="https://github.com/TixiaoShan/LVI-SAM">https://github.com/TixiaoShan/LVI-SAM</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;视觉SLAM&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ORB SLAM2(单双目RGB-D)：&lt;a href=&quot;https://github.com/raulmur/ORB_SLAM2&quot;&gt;https://github.com/raulmur/ORB_</summary>
      
    
    
    
    <category term="资源汇总" scheme="https://www.mgodmonkey.cn/categories/%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
    <category term="SLAM" scheme="https://www.mgodmonkey.cn/tags/SLAM/"/>
    
  </entry>
  
  <entry>
    <title>ROS-PyQt小案例</title>
    <link href="https://www.mgodmonkey.cn/posts/37a8d87e.html"/>
    <id>https://www.mgodmonkey.cn/posts/37a8d87e.html</id>
    <published>2023-07-31T12:26:52.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ROS与PyQt5结合的小demo，用于学习如何设计一个界面，并与ROS中的Service和Topic结合，从而控制多个小乌龟的运动</p></blockquote><p><img src="https://s2.loli.net/2023/10/03/7TVxjfRQZtNnqwy.gif" alt=""></p><p>环境：</p><ul><li>ROS2：foxy</li><li>python：3.8.10</li><li>PyQt：5.10.12</li></ul><blockquote><p>链接：<a href="https://github.com/MGod-monkey/ros2_pyqt_turtlesim_key">https://github.com/MGod-monkey/ros2_pyqt_turtlesim_key</a></p></blockquote>]]></content>
    
    
    <summary type="html">ROS与PyQt5结合的小demo，用于学习如何设计一个界面，并与ROS中的Service和Topic结合，从而控制多个小乌龟的运动</summary>
    
    
    
    <category term="技术分享" scheme="https://www.mgodmonkey.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>ROS1&amp;2之CmakeList.txt与package.xml</title>
    <link href="https://www.mgodmonkey.cn/posts/5d383f12.html"/>
    <id>https://www.mgodmonkey.cn/posts/5d383f12.html</id>
    <published>2023-07-26T03:37:07.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-CMakeLists-txt与package-xml的作用">1. CMakeLists.txt与package.xml的作用</h2><p>在<strong>ROS</strong>系统的功能包中 要包含 <strong>CMakeLists.txt</strong> 与 <strong>package.xml</strong> 文件来编译功能包的内容</p><p><strong>CMakeLists.txt</strong>原本是<strong>Cmake</strong>编译系统的规则文件，而<strong>Catkin</strong>编译系统基本沿用了<strong>CMake</strong>的编译风格，只是针对<strong>ROS</strong>工程添加了一些宏定义。所以在写法上，<strong>catkin</strong> 的 <strong>CMakeLists.txt</strong>与<strong>CMake</strong>的基本一致。用<strong>cmake</strong>命令创建<strong>功能包</strong>时，会自动生成<strong>CMakeList.txt</strong>文件，已配置了多数编译选项，且包含详细的注释，只需稍作修改便可编译自己的文件。</p><p>而<strong>package.xml</strong>文件是描述功能包清单的文件，包括功能包的<strong>名称</strong>、<strong>版本号</strong>、<strong>作者信息</strong>、<strong>许可信息</strong>、<strong>编译依赖</strong>和<strong>运行依赖</strong>等。</p><p>所以 <strong>CMakeLists.txt</strong> 非常重要，它指定了由源码到目标文件的规则，<strong>catkin</strong>编译系统在工作时首先会找到每个<strong>package</strong>下的 <strong>CMakeLists.txt</strong> ，然后按照规则来编译构建</p><h2 id="2-生成CMakeLists-txt">2. 生成CMakeLists.txt</h2><h3 id="2-1-ROS1">2.1 ROS1</h3><p><strong>ROS1</strong>可通过用<strong>catkin_create_pkg</strong>命令<strong>创建功能包</strong>，这会自动生成<strong>CMakeLists.txt</strong>和<strong>package.xml</strong>文件的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建工作空间</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：std msgs rospy roscpp为创建功能时指定的铱赖，test为包名</span></span><br><span class="line"><span class="comment"># 也可以先不指定，后面在CMakeLists.txt和package.xmL中手动添加</span></span><br><span class="line">catkin_create_pkg <span class="built_in">test</span> std_msgs rospy roscpp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一下在~/catkin_ws/src目录下自动生成了哪些文件夹和文件</span></span><br><span class="line">tree</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的命令生成的<strong>工作空间</strong>如下</p><p><img src="https://s2.loli.net/2023/10/03/KUqakLAr3D5ibR6.png" alt=""></p><p><code>include</code>：存放**.h**的头文件</p><p><code>src</code>：可同时存放**.cpp<strong>或</strong>.py<strong>的源文件，但一般</strong>.py**文件存放在<code>scripts</code>目录中</p><p><code>scripts</code>：习惯存放**.py<strong>的</strong>python**文件，需要自己创建</p><p><strong>注：python代码和c++代码不分家，可同时存放在同一功能包中</strong></p></blockquote><h3 id="2-2-ROS2">2.2 ROS2</h3><p><strong>ROS2</strong>可通过如下的命令来<strong>创建功能包</strong>以及必要的<strong>CMakeList.txt</strong>和<strong>package.xml</strong>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建工作空间</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/dev_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># ament_cmake和ament_python分别代表c++和python两种代码的功能包</span></span><br><span class="line"><span class="comment"># test_c和test_python代表包名</span></span><br><span class="line">ros2 pkg create --build-type ament_cmake test_c</span><br><span class="line">ros2 pkg create --build-type ament_python test_python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一下在~/dev_ws/src目录下自动生成了哪些文件夹和文件</span></span><br><span class="line">tree</span><br></pre></td></tr></table></figure><blockquote><p>通过以上命令生成的工作空间如下：</p><p><img src="https://s2.loli.net/2023/10/03/NgDJKjklTEWPo3c.png" alt=""></p><ul><li><p><code>test_c/include</code>：存放**.h**的头文件</p></li><li><p><code>test_c/src</code>：存放**.cpp<strong>的</strong>C++**源文件</p></li><li><p><code>test_python/test_python</code>：存放**.py<strong>的</strong>python**文件</p></li></ul><p><strong>注：与ROS1不同，同一功能包内只能同时包含python文件或者C++文件中的一种</strong></p></blockquote><h2 id="3-CMakeLists-txt编写">3. CMakeLists.txt编写</h2><h3 id="3-1-ROS1">3.1 ROS1</h3><ol><li>常用的<strong>ROS1</strong>中<strong>CMakeLists.txt</strong>架构如下</li></ol><blockquote><p>视频解析参考：<a href="https://www.bilibili.com/video/BV1mJ411R7Ni?p=7">中科院软件所-机器人操作系统入门（ROS入门教程）</a></p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>()<span class="comment">#CMake的最低版本号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>()<span class="comment">#项目名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>()<span class="comment">#找到编译需要的其他CMake/Catkinpackage </span></span><br><span class="line"></span><br><span class="line">catkin_python_setup()<span class="comment">#catkin新加宏，打开catkin的Python Module的支持</span></span><br><span class="line"></span><br><span class="line">add_message_files()<span class="comment">#catkin新加宏，添加自定义Message文件 </span></span><br><span class="line"></span><br><span class="line">add_service_files()         <span class="comment">#catkin新加宏，添加自定义Service文件 </span></span><br><span class="line"></span><br><span class="line">add_action_files()          <span class="comment">#catkin新加宏，添加自定义Action文件 </span></span><br><span class="line"></span><br><span class="line">generate_message()<span class="comment">#catkin新加宏，生成不同语言版本的msg/srv/action接口 </span></span><br><span class="line"></span><br><span class="line">catkin_package()<span class="comment">#catkin新加宏，生成当前package的cmake配置，供依赖本包的其他软件包调用 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>()<span class="comment">#生成库 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>()<span class="comment">#生成可执行二进制文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_dependencies</span>()<span class="comment">#定义目标文件依赖于其他目标文件，确保其他目标已被构建 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>()<span class="comment">#链接</span></span><br><span class="line"></span><br><span class="line">catkin_add_gtest()<span class="comment">#catkin新加宏，生成测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>()<span class="comment">#生成可安装目标</span></span><br></pre></td></tr></table></figure><p>需要自己配置的项目一般就下面几种：</p><ul><li><p><strong>include_directories</strong></p><ul><li>用于设置头文件的相对路径</li><li>全局路径默认为功能包所在目录，功能包的头文件一般放在功能包根目录下的include文件夹，<br>所以需要此处添加此文件夹</li><li>还包含<strong>catkin</strong>编译器默认的其他头文件路径，如：ROS默认安装路径、Linux系统路径等</li></ul></li><li><p><strong>add_exectuable</strong></p><ul><li>用于设置需要编译的代码和可执行文件</li><li>第一个参数为期望生成的可执行文件（节点）名称</li><li>后面的参数为参与编译的源文件(.cpp)，若需要多个代码文件，可依次列出，空格分隔</li></ul></li><li><p><strong>target_link_libraries</strong></p><ul><li>用于设置链接库</li><li>有些功需要使用系统或第三方库函数，通过该选项可以配置执行文件链接的库文件</li><li>第一个参数与<strong>add_exectuable</strong>相同，为可执行文件（节点）名称</li><li>后面的参数为需要链接的库，依次列出，空格分隔</li></ul></li><li><p><strong>add_dependencies</strong></p><ul><li>用于设置依赖</li><li>有时候需要自定义消息类型，消息类型会在编译过程中产生相应语言的代码。若编译的可执行文<br>件依赖这些动态生成的代码，则需要添加${PROJECT NAME}generate messages_cpp配置</li></ul></li><li><p>自定义数据类型：消息<strong>msg</strong>、服务<strong>srv</strong>、动作<strong>action</strong></p><ul><li><strong>find_package</strong>(catkin REQUIRE COMPONENTS message_generation)</li><li><strong>catkin_package</strong>(CATKIN_DEPENDS message_runtime)</li><li><strong>add_message_files</strong>(FILES xxx.msg)</li><li><strong>add_service_files</strong>(FILES xxx.srv)</li><li><strong>add_action_files</strong>(FILES xxx.action)</li><li><strong>generate_messages</strong>(DEPENDENCIES std_msgs)</li></ul></li></ul><blockquote><p>CMakeLists.txt模板参考：<a href="https://mybog.s3.bitiful.net/ros/zero/CMakeLists.txt">CMakeLists.txt</a></p><p>更多教程参考：<a href="http://wiki.ros.org/catkin/CMakeLists.txt">catkin/CMakeLists.txt - ROS Wiki</a></p></blockquote><h3 id="3-2-ROS2">3.2 ROS2</h3><p>常用的<strong>ROS2</strong>中<strong>CMakeLists.txt</strong>架构如下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>()<span class="comment">#CMake的最低版本号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>()     <span class="comment">#项目名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>()       <span class="comment">#查找系统中的依赖项</span></span><br><span class="line"></span><br><span class="line">ament_target_dependencies()          <span class="comment">#依赖于其他目标文件，确保其他目标已被构建 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>()    <span class="comment">#生成可执行二进制文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>()   <span class="comment">#生成可安装目标</span></span><br><span class="line"></span><br><span class="line">ament_package()<span class="comment">#生成功能包</span></span><br><span class="line"></span><br><span class="line">rosidl_generate_interfaces()<span class="comment"># 自定义消息类型接口</span></span><br></pre></td></tr></table></figure><p>示例模板如下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.5</span>)</span><br><span class="line"><span class="keyword">project</span>(test_c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Default to C99</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> CMAKE_C_STANDARD)</span><br><span class="line">  <span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">99</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Default to C++14</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> CMAKE_CXX_STANDARD)</span><br><span class="line">  <span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(CMAKE_COMPILER_IS_GNUCXX <span class="keyword">OR</span> CMAKE_CXX_COMPILER_ID <span class="keyword">MATCHES</span> <span class="string">&quot;Clang&quot;</span>)</span><br><span class="line">  <span class="keyword">add_compile_options</span>(-Wall -Wextra -Wpedantic)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># find dependencies</span></span><br><span class="line"><span class="keyword">find_package</span>(ament_cmake REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(rclcpp REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(std_msgs REQUIRED)</span><br><span class="line"><span class="comment"># uncomment the following section in order to fill in</span></span><br><span class="line"><span class="comment"># further dependencies manually.</span></span><br><span class="line"><span class="comment"># find_package(&lt;dependency&gt; REQUIRED)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(talker src/publisher_member_function.cpp)<span class="comment"># 修改2</span></span><br><span class="line">ament_target_dependencies(talker rclcpp std_msgs)<span class="comment"># 修改3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  talker<span class="comment"># 修改4</span></span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(BUILD_TESTING)</span><br><span class="line">  <span class="keyword">find_package</span>(ament_lint_auto REQUIRED)</span><br><span class="line">  <span class="comment"># the following line skips the linter which checks for copyrights</span></span><br><span class="line">  <span class="comment"># uncomment the line when a copyright and license is not present in all source files</span></span><br><span class="line">  <span class="comment">#set(ament_cmake_copyright_FOUND TRUE)</span></span><br><span class="line">  <span class="comment"># the following line skips cpplint (only works in a git repo)</span></span><br><span class="line">  <span class="comment"># uncomment the line when this package is not in a git repo</span></span><br><span class="line">  <span class="comment">#set(ament_cmake_cpplint_FOUND TRUE)</span></span><br><span class="line">  ament_lint_auto_find_test_dependencies()</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自定义消息类型需要添加项</span></span><br><span class="line"><span class="keyword">find_package</span>(geometry_msgs REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(rosidl_default_generators REQUIRED)</span><br><span class="line"></span><br><span class="line">rosidl_generate_interfaces(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">  <span class="string">&quot;msg/Num.msg&quot;</span><span class="comment"># 自定义1</span></span><br><span class="line">  <span class="string">&quot;msg/Sphere.msg&quot;</span><span class="comment"># 自定义2</span></span><br><span class="line">  <span class="string">&quot;srv/AddThreeInts.srv&quot;</span>     <span class="comment"># 自定义3</span></span><br><span class="line">  DEPENDENCIES geometry_msgs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ament_package()</span><br></pre></td></tr></table></figure><blockquote><p>相较于基于<strong>catkin</strong>的<strong>CMake</strong>文件，基于<strong>ament</strong>的明显简洁很多</p></blockquote><p>假设你编写了<code>~/dev_ws/src/test.cpp</code>文件后，需要修改的步骤如下：</p><ol><li>链接源代码</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> src/<span class="keyword">test</span>.cpp)<span class="comment"># test为你输入节点后执行的名称，如ros2 run test_c test（前一个test_c为包名，后一个test则为这里的设置的名称，代表具体执行的代码）</span></span><br><span class="line">ament_target_dependencies(<span class="keyword">test</span> rclcpp)<span class="comment"># 添加依赖项</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加下面这两行代码的目的是让编译器编译<code>~/dev_ws/src/test_c/test.cpp</code>这个文件</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  <span class="keyword">test</span></span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当你自定义消息类型时还需要消息类型文件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加自定义消息类型需要添加项</span></span><br><span class="line"><span class="comment"># 下面两项是固定的，geometry_msgs是用于生成消息依赖包</span></span><br><span class="line"><span class="keyword">find_package</span>(geometry_msgs REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(rosidl_default_generators REQUIRED)</span><br><span class="line"></span><br><span class="line">rosidl_generate_interfaces(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">  <span class="string">&quot;msg/Num.msg&quot;</span><span class="comment"># 自定义1</span></span><br><span class="line">  <span class="string">&quot;msg/Sphere.msg&quot;</span><span class="comment"># 自定义2</span></span><br><span class="line">  <span class="string">&quot;srv/AddThreeInts.srv&quot;</span>     <span class="comment"># 自定义3</span></span><br><span class="line">  DEPENDENCIES geometry_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-package-xml编写">4. package.xml编写</h2><p><strong>package.xml</strong>的框架如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">format</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>..<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>...<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;lanhanba@todo.todo&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">license</span>&gt;</span>...<span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>...<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>...<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>...<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">export</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build_type</span>&gt;</span>...<span class="tag">&lt;/<span class="name">build_type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">export</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>相较于<strong>CMakeList.txt</strong>，<strong>package.xml</strong>的语法就简单许多，且<strong>ROS1</strong>和<strong>ROS2</strong>的标签语法通用</p><ul><li><strong>&lt;build_depend&gt;&lt;/build_depend&gt;</strong>: 标签定义了功能包中代码编译时所依赖的其他功能包</li><li><strong>&lt;exec_depend&gt;&lt;exec_depend&gt;</strong>: 标签定义了功能包中可执行程序运行时所依赖的其他功能包</li><li><strong>自定义数据类型</strong>：话题消息<strong>msg</strong>、服务数据<strong>srv</strong>、动作数据<strong>action</strong></li></ul></blockquote><p>模板如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-model href=<span class="string">&quot;http://download.ros.org/schema/package_format3.xsd&quot;</span> schematypens=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">format</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>test_c<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>TODO: Package description<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;lanhanba@todo.todo&quot;</span>&gt;</span>lanhanba<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO: License declaration<span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ROS1 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>catkin<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build_export_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">build_export_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>roscpp<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rospy<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- ROS2_C++ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">buildtool_depend</span>&gt;</span>ament_cmake<span class="tag">&lt;/<span class="name">buildtool_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test_depend</span>&gt;</span>ament_lint_auto<span class="tag">&lt;/<span class="name">test_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test_depend</span>&gt;</span>ament_lint_common<span class="tag">&lt;/<span class="name">test_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">export</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build_type</span>&gt;</span>ament_cmake<span class="tag">&lt;/<span class="name">build_type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">export</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- ROS2_python --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test_depend</span>&gt;</span>ament_copyright<span class="tag">&lt;/<span class="name">test_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test_depend</span>&gt;</span>ament_flake8<span class="tag">&lt;/<span class="name">test_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test_depend</span>&gt;</span>ament_pep257<span class="tag">&lt;/<span class="name">test_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test_depend</span>&gt;</span>python3-pytest<span class="tag">&lt;/<span class="name">test_depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">export</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build_type</span>&gt;</span>ament_python<span class="tag">&lt;/<span class="name">build_type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">export</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- ROS2中C++功能包添加自定义消息类型还需添加下面三行（固定形式，和上面的CMake修改搭配使用，python不需要） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">depend</span>&gt;</span>rosidl_default_generators<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">depend</span>&gt;</span>geometry_msgs<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">member_of_group</span>&gt;</span>rosidl_interface_packages<span class="tag">&lt;/<span class="name">member_of_group</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-其他–Setup-py的修改">5. 其他–Setup.py的修改</h2><p>在<strong>ROS2-Python</strong>功能包中，如果添加类似<code>~/dev_ws/src/test_python/test.py</code>的<strong>python</strong>文件，则需要对功能包中的<strong><a href="http://Setup.py">Setup.py</a></strong>进行如下的修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">package_name = <span class="string">&#x27;test_python&#x27;</span></span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=package_name,</span><br><span class="line">    version=<span class="string">&#x27;0.0.0&#x27;</span>,</span><br><span class="line">    packages=[package_name],</span><br><span class="line">    data_files=[</span><br><span class="line">        (<span class="string">&#x27;share/ament_index/resource_index/packages&#x27;</span>,</span><br><span class="line">            [<span class="string">&#x27;resource/&#x27;</span> + package_name]),</span><br><span class="line">        (<span class="string">&#x27;share/&#x27;</span> + package_name, [<span class="string">&#x27;package.xml&#x27;</span>]),</span><br><span class="line">    ],</span><br><span class="line">    install_requires=[<span class="string">&#x27;setuptools&#x27;</span>],</span><br><span class="line">    zip_safe=<span class="literal">True</span>,</span><br><span class="line">    maintainer=<span class="string">&#x27;lanhanba&#x27;</span>,</span><br><span class="line">    maintainer_email=<span class="string">&#x27;lanhanba@todo.todo&#x27;</span>,</span><br><span class="line">    description=<span class="string">&#x27;TODO: Package description&#x27;</span>,</span><br><span class="line">    license=<span class="string">&#x27;TODO: License declaration&#x27;</span>,</span><br><span class="line">    tests_require=[<span class="string">&#x27;pytest&#x27;</span>],</span><br><span class="line">    entry_points=&#123;</span><br><span class="line">        <span class="string">&#x27;console_scripts&#x27;</span>: [</span><br><span class="line">            <span class="comment"># 结构如下：节点名 = 功能包名.代码文件.执行入口函数名(一般执行入口函数名都是main，也就是说python代码中一般要有main函数)</span></span><br><span class="line">            <span class="comment"># 通过ros2 run test_python test 来执行test_python.test:main下的函数</span></span><br><span class="line">            <span class="comment"># 如果有多个python代码文件都需要一一添加，名称不能一样</span></span><br><span class="line">            <span class="string">&quot;test = test_python.test:main&quot;</span>,</span><br><span class="line">            <span class="string">&quot;test2 = test_python.test2:main&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p><strong>参考：</strong></p><ul><li><p><a href="http://wiki.ros.org/catkin/CMakeLists.txt">catkin/CMakeLists.txt - ROS Wiki</a></p></li><li><p><a href="https://docs.ros.org/en/humble/Tutorials">CMakeLists.txt - ROS Humble Wiki</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/94579820">【ROS 学习笔记】CMakeLists.txt 与 package.xml - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://blog.csdn.net/shoufei403/article/details/125831552">详细分析一个ROS2 CMakeLists.txt文件_首飞爱玩机器人的博客-CSDN博客</a></p></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-CMakeLists-txt与package-xml的作用&quot;&gt;1. CMakeLists.txt与package.xml的作用&lt;/h2&gt;
&lt;p&gt;在&lt;strong&gt;ROS&lt;/strong&gt;系统的功能包中 要包含 &lt;strong&gt;CMakeLists.txt&lt;/s</summary>
      
    
    
    
    <category term="知识分享" scheme="https://www.mgodmonkey.cn/categories/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>ROS-Launch的使用方式</title>
    <link href="https://www.mgodmonkey.cn/posts/891e492b.html"/>
    <id>https://www.mgodmonkey.cn/posts/891e492b.html</id>
    <published>2023-07-20T07:52:04.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>视频参考：<a href="https://www.bilibili.com/video/BV1zt411G7Vn?p=19">https://www.bilibili.com/video/BV1zt411G7Vn?p=19</a></p></blockquote><h2 id="1-roslaunch-命令">1. roslaunch 命令</h2><p><strong>roslaunch</strong> 命令允许我们一次启动 launch 文件中定义的多个 <strong>ROS</strong> 节点，启动参数等在启动文件（<strong>launch</strong> 文件）中配置，并且如果系统之前没有启动 <strong>roscore</strong>，则 <strong>roslaunch</strong> 会自动启动它。</p><p>roslaunch 的命令行用法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch [package] [filename.launch]</span><br></pre></td></tr></table></figure><p><strong>例如：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch beginner_tutorials turtlemimic.launch</span><br></pre></td></tr></table></figure><p>其中 <strong>beginner_tutorials</strong> 是 <strong>turtlemimic.launch</strong> 文件中定义的一个节点，那 <strong>launch</strong> 文件是什么呢？我们来看下。</p><h2 id="2-解析-launch-文件">2. 解析 launch 文件</h2><p>简单来说 <strong>launch</strong> 文件就是一堆节点和参数的集合，使用 <strong>launch</strong> 文件的目的是为了一键启动。</p><p>因为目前运行在机器人上的 <strong>ROS</strong> 系统一般都要同时运行多个节点，如果我们开机启动时，一个一个的输入命令来启动每一个节点，想想就可怕，所以 <strong>ROS</strong> 系统就给我们提供了这么一个 <strong>launch</strong> 文件，可以方便我们将要启动的节点和对应的参数全部写到这个文件中，然后使用 <strong>roslaunch</strong> 命令一键启动！</p><p>一个 <strong>lanunch</strong> 文件例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- local machine already has a definition by default.</span></span><br><span class="line"><span class="comment">       This tag overrides the default definition with</span></span><br><span class="line"><span class="comment">       specific ROS_ROOT and ROS_PACKAGE_PATH values --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">machine</span> <span class="attr">name</span>=<span class="string">&quot;local_alt&quot;</span> <span class="attr">address</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">default</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ros-root</span>=<span class="string">&quot;/u/user/ros/ros/&quot;</span> <span class="attr">ros-package-path</span>=<span class="string">&quot;/u/user/ros/ros-pkg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- a basic listener node --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;listener-1&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rospy_tutorials&quot;</span> <span class="attr">type</span>=<span class="string">&quot;listener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- pass args to the listener node --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;listener-2&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rospy_tutorials&quot;</span> <span class="attr">type</span>=<span class="string">&quot;listener&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-foo arg2&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- a respawn-able listener node --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;listener-3&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rospy_tutorials&quot;</span> <span class="attr">type</span>=<span class="string">&quot;listener&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- start listener node in the &#x27;wg1&#x27; namespace --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">ns</span>=<span class="string">&quot;wg1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;listener-wg1&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;rospy_tutorials&quot;</span> <span class="attr">type</span>=<span class="string">&quot;listener&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- start a group of nodes in the &#x27;wg2&#x27; namespace --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;wg2&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- remap applies to all future statements in this scope. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;chatter&quot;</span> <span class="attr">to</span>=<span class="string">&quot;hello&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rospy_tutorials&quot;</span> <span class="attr">type</span>=<span class="string">&quot;listener&quot;</span> <span class="attr">name</span>=<span class="string">&quot;listener&quot;</span> <span class="attr">args</span>=<span class="string">&quot;--test&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rospy_tutorials&quot;</span> <span class="attr">type</span>=<span class="string">&quot;talker&quot;</span> <span class="attr">name</span>=<span class="string">&quot;talker&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- set a private parameter for the node --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;talker_1_param&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a value&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- nodes can have their own remap args --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;chatter&quot;</span> <span class="attr">to</span>=<span class="string">&quot;hello-1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- you can set environment variables for a node --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">&quot;ENV_EXAMPLE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;some value&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是一个简单的 <strong>launch</strong> 文件格式，我带你一步一步解析它的标签用法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remap</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span>  <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-launch">2.1 launch</h3><p><strong>launch</strong> 标签是 <strong>launch</strong> 文件的根节点，它只作为其他子标签的容器，没有其他功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-node">2.2 node</h3><p><strong>node</strong> 标签指定一个将要运行的 ROS 节点，<strong>node</strong> 标签可以说是 <strong>launch</strong> 文件中最重要的标签，因为我们配置 <strong>launch</strong> 文件的目的就是一次启动多个 <strong>ROS node</strong>。</p><p>常见的用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;bar1&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;foo_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">args</span>=<span class="string">&quot;--test&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;true&quot;</span> <span class="attr">output</span>=<span class="string">&quot;sceen&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>：节点名称 bar1</li><li><strong>pkg</strong>：节点所在的包 foo_pkg</li><li><strong>type</strong>：节点类型是可执行文件（节点）的名称，项目中必须要有一个相同名称的可执行节点</li><li><strong>args</strong>：命令行启动参数 --test</li><li><strong>respawn</strong>：是否自动重启，true 表示如何节点未启动，则自动重启，false 则不重启，默认 false</li><li><strong>output</strong>：是否将节点信息输出到屏幕，如果不设置该属性，则节点信息会被写入到日志文件</li></ul><p>在 <strong>node</strong> 标签下页可以嵌套使用以下标签：</p><ul><li><strong>env</strong>：为节点设置环境变量</li><li><strong>remap</strong>：为节点设置重映射参数</li><li><strong>rosparam</strong>：为节点加载 rosparam 文件</li><li><strong>param</strong>：为节点设置参数</li></ul><h3 id="2-3-param">2.3 param</h3><p>在项目中某些参数需要经常改变，如果在程序中写死了，以后我们每次修改参数都需要重新 <strong>build</strong> 一遍程序，非常麻烦，<strong>param</strong> 便签给我们提供了一个传递参数的方法。</p><p><strong>param</strong> 标签定义一个将要被设置到参数服务器的参数，它的参数值可以通过文本文件、二进制文件或命令等属性来设置，另外 <strong>param</strong> 标签可以嵌入到 <strong>node</strong> 标签中，以此来作为该 <strong>node</strong> 的私有参数。</p><p>常见用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;publish_frequency&quot;</span> <span class="attr">type</span>=<span class="string">&quot;double&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>：参数名称 publish_frequency</li><li><strong>type</strong>：参数类型 double，str，int，bool，yaml</li><li><strong>value</strong>：参数值 10.0</li></ul><p><strong>param</strong> 标签也可以为一组 <strong>group</strong> 节点同时设置参数。</p><h3 id="2-4-remap">2.4 remap</h3><p><strong>remap</strong> 标签提供了一种节点名称的重映射方法，每个 <strong>remap</strong> 标签包含一个元素名称和一个新名称，在系统运行后原始名称会被替换为新名称。</p><p>常见用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;chatter&quot;</span> <span class="attr">to</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>from</strong>：原始名称</li><li><strong>to</strong>：新名称</li></ul><p>可以这样理解这个替换标签：你有一个节点订阅了「<strong>chatter</strong>」主题，但是你只有一个节点发布「<strong>hello</strong>」主题，而「<strong>hello</strong>」和「<strong>chatter</strong>」的类型相同，所以我们可以将「<strong>chatter</strong>」简单地替换为「<strong>hello</strong>」，从而实现订阅「<strong>hello</strong>」主题。</p><h3 id="2-5-machine">2.5 machine</h3><p><strong>machine</strong> 标签定义了节点所运行的机器信息，如果只是在本地运行节点则不需要配置这个标签，它主要使用在 <strong>SSH</strong> 和远程机器，不过也可以用来配置本地机器的相关信息。</p><p>常见用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">machine</span> <span class="attr">name</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">address</span>=<span class="string">&quot;foo-address&quot;</span> <span class="attr">env-loader</span>=<span class="string">&quot;/opt/ros/kinetic/env.sh&quot;</span> <span class="attr">user</span>=<span class="string">&quot;someone&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">machine</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">name</span>=<span class="string">&quot;footalker&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;test_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;talker.py&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>：机器名称</li><li><strong>address</strong>：机器的网络地址</li><li><strong>env-loader</strong>：设置机器的环境变量，必须是一个设置了所有要求变量的 shell 脚本</li><li><strong>user</strong>：用户名称</li></ul><h3 id="2-6-rosparam">2.6 rosparam</h3><p><strong>rosparam</strong> 标签允许节点从参数服务器上 <strong>load</strong>、<strong>dump</strong> 和 <strong>delete YAML</strong> 文件，也可以使用在远程机器上，需要注意的是 <strong>delete</strong> 必须在 <strong>load</strong> 或者 <strong>dump</strong> 之后进行。</p><p>常见用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 参数较多使用 yaml 文件</span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">file</span>=<span class="string">&quot;$(find rosparam)/example.yaml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">param</span>=<span class="string">&quot;my/param&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 传递数组</span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">param</span>=<span class="string">&quot;a_list&quot;</span>&gt;</span>[1, 2, 3, 4]<span class="tag">&lt;/<span class="name">rosparam</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span>&gt;</span></span><br><span class="line">    a: 1</span><br><span class="line">    b: 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">rosparam</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;whitelist&quot;</span> <span class="attr">default</span>=<span class="string">&quot;[3, 2]&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">param</span>=<span class="string">&quot;whitelist&quot;</span> <span class="attr">subt_value</span>=<span class="string">&quot;True&quot;</span>&gt;</span>$(arg whitelist)<span class="tag">&lt;/<span class="name">rosparam</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>command</strong>：load，dump，delete</li><li><strong>file</strong>：参数文件的路径</li><li><strong>param</strong>：参数名称</li><li><strong>subt_value</strong>：是否允许在 YAML 中替换参数</li></ul><p>补充下 <strong>yaml</strong> 文件基本用法，<strong>yaml</strong> 文件就是单纯的来存储启动参数，格式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a: 1</span><br><span class="line">str: hello</span><br><span class="line">c: 2.0</span><br></pre></td></tr></table></figure><p>其中不需要指定变量类型，<strong>yaml</strong> 文件会自动确定类型。使用 <strong>yaml</strong> 文件的目的就是方便配置参数，如果有很多参数需要配置，不需要写很多 <strong>rosparam</strong> 命令。</p><p><strong>yaml</strong> 文件还有挺多复杂的写法，后续项目中用到再总结出来。</p><h3 id="2-7-include">2.7 include</h3><p><strong>include</strong> 类似编程语言中的 <strong>include</strong> 预处理，它可以导入其他 <strong>roslaunch</strong> 的启动文件到当前 <strong>include</strong> 标签所在的位置。</p><p>常见用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find package_name)/launch_file_name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目中使用绝对路径不太方便，可以使用 find 来查找。</p><h3 id="2-8-env">2.8 env</h3><p><strong>env</strong> 标签可以在启动的节点上设置环境变量，这个标签基本只会使用在 <strong>launch</strong>、<strong>include</strong>、<strong>node</strong>、<strong>machine</strong> 这 4 个标签内部，当使用在 <strong>launch</strong> 内部时，<strong>env</strong> 设置的环境标量会应用到内部定义的节点。</p><p>常见用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">&quot;ENV_EXAMPLE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;some value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>：环境变量名称</li><li><strong>value</strong>：环境变量值</li></ul><h3 id="2-9-test">2.9 test</h3><p><strong>test</strong> 标签在语法上类似 <strong>node</strong> 标签，但在功能上只表示当前的节点作为测试节点去运行。</p><p>常见用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span> <span class="attr">test-name</span>=<span class="string">&quot;test_1&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;my_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;test_1.py&quot;</span> <span class="attr">time-limit</span>=<span class="string">&quot;10.0&quot;</span> <span class="attr">args</span>=<span class="string">&quot;--test1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>test-name</strong>：测试节点名称</li><li><strong>pkg</strong>：测试节点所在的包</li><li><strong>type</strong>：测试节点类型</li><li><strong>time-limit</strong>：超时时间</li><li><strong>arg</strong>：测试节点启动的命令参数</li></ul><h3 id="2-10-arg">2.10 arg</h3><p><strong>arg</strong> 标签表示启动参数，该标签允许创建更多可重用和可配置的启动文件，其可以通过命令行、include 标签、定义在高级别的文件这 3 种方式配置值。</p><p><strong>arg</strong> 标签声明的参数不是全局的，只能在声明的单个启动文件中使用，可以当成函数的局部参数来理解。</p><p>常见用法如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 1. 命令行传递启动参数</span><br><span class="line">roslaunch my_file.launch my_arg:=my_value</span><br><span class="line"># 2. 定义时赋值</span><br><span class="line">&lt;arg name=&quot;arg_name&quot; default=&quot;arg_name&quot;&gt;</span><br><span class="line">&lt;arg name=&quot;arg_name&quot; value=&quot;arg_name&quot;&gt;</span><br></pre></td></tr></table></figure><p>这两者有点区别，命令行传递的 <strong>arg</strong> 参数可以覆盖 <strong>default</strong>，但不能覆盖 <strong>value</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 3. 通过 launch 文件传递，两个 launch 文件中的 arg 参数值必须相同！</span><br><span class="line"></span><br><span class="line"># my_file.launch</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;include.launch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;hoge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fuga&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># include.launch</span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;hoge&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fuga&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意 <strong>arg</strong> 和 <strong>param</strong> 标签的区别：</p><ul><li><strong>arg</strong>：启动时参数，只在启动文件 launch 中有意义</li><li><strong>param</strong>：运行时参数，存储在参数服务器中</li></ul><h3 id="2-11-group">2.11 group</h3><p><strong>group</strong> 标签可以方便的将一组配置应用到组内的所有节点，它也具有命名空间 <strong>ns</strong> 特点，可以将不同的节点放入不同的 <strong>namespace</strong>。</p><p>常见用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">&quot;namespace&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;pkg_name1&quot;</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;pkg_name2&quot;</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配合 <strong>if</strong> 和 <strong>unless</strong> 使用：</p><ul><li><strong>if=value</strong>：value 为 true 则包含内部信息</li><li><strong>unless=value</strong>：value 为 false 则包含内部信息</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">if</span>=<span class="string">&quot;$(arg foo1)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;pkg_name1&quot;</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">unless</span>=<span class="string">&quot;$(arg foo2)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;pkg_name2&quot;</span> <span class="attr">...</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当 <strong>foo1 == true</strong> 时包含其标签内部</li><li>当 <strong>foo2 == false</strong> 时包含其标签内部</li></ul><blockquote><p>更多标签内容参考官方文档：<a href="https://wiki.ros.org/roslaunch/XML">https://wiki.ros.org/roslaunch/XML</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;视频参考：&lt;a href=&quot;https://www.bilibili.com/video/BV1zt411G7Vn?p=19&quot;&gt;https://www.bilibili.com/video/BV1zt411G7Vn?p=19&lt;/a&gt;&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    <category term="知识分享" scheme="https://www.mgodmonkey.cn/categories/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>rosrun tf view_frames时报错TypeError: cannot use a string pattern on a bytes-likeobject</title>
    <link href="https://www.mgodmonkey.cn/posts/bf2c6ce0.html"/>
    <id>https://www.mgodmonkey.cn/posts/bf2c6ce0.html</id>
    <published>2023-07-19T11:20:48.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误过程">错误过程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@laohanba-NUC11TNKi7:~/Doc<span class="comment"># rosrun tf view_frames </span></span><br><span class="line">Listening to /tf <span class="keyword">for</span> 5.0 seconds</span><br><span class="line">Done Listening</span><br><span class="line">b<span class="string">&#x27;dot - graphviz version 2.43.0 (0)\n&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/opt/ros/noetic/lib/tf/view_frames&quot;</span>, line 119, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    generate(dot_graph)</span><br><span class="line">  File <span class="string">&quot;/opt/ros/noetic/lib/tf/view_frames&quot;</span>, line 89, <span class="keyword">in</span> generate</span><br><span class="line">    m = r.search(vstr)</span><br><span class="line">TypeError: cannot use a string pattern on a bytes-like object</span><br></pre></td></tr></table></figure><h2 id="解决方法">解决方法</h2><blockquote><p>修改<code>/opt/ros/noetic/lib/tf/view_frames</code>文件中的代码</p><p>文件路径或有出入，<strong>noetic</strong>要根据自己的<strong>ROS</strong>版本进行修改</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/ros/noetic/lib/tf/view_frames</span><br></pre></td></tr></table></figure><p>在大概89行的位置添加如下一行</p><p><img src="https://s2.loli.net/2023/10/03/mTRxtQna6h8rpYK.png" alt="image-20230719200946372"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vstr = str(vstr)</span><br></pre></td></tr></table></figure><p>再次运行就能正常生成坐标系文件了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@laohanba-NUC11TNKi7:~/Doc<span class="comment"># rosrun tf view_frames </span></span><br><span class="line">Listening to /tf <span class="keyword">for</span> 5.0 seconds</span><br><span class="line">Done Listening</span><br><span class="line">b<span class="string">&#x27;dot - graphviz version 2.43.0 (0)\n&#x27;</span></span><br><span class="line">Detected dot version 2.43</span><br><span class="line">frames.pdf generated</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;错误过程&quot;&gt;错误过程&lt;/h2&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;</summary>
      
    
    
    
    <category term="问题大全" scheme="https://www.mgodmonkey.cn/categories/%E9%97%AE%E9%A2%98%E5%A4%A7%E5%85%A8/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>ROS1和ROS2共存的问题</title>
    <link href="https://www.mgodmonkey.cn/posts/a344ec17.html"/>
    <id>https://www.mgodmonkey.cn/posts/a344ec17.html</id>
    <published>2023-07-19T09:29:22.000Z</published>
    <updated>2024-07-25T01:44:39.776Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>说明：ROS1最高支持到Ubuntu20.04，ROS2最低支持Ubuntu20.04，综上，推荐使用的Ubuntu版本为20.04</p></div><h2 id="1-安装">1.安装</h2><blockquote><p>参考鱼c一键安装脚本来安装：<a href="https://www.mgodmonkey.cn/posts/232d6cf1.html">ROS资源汇总</a></p></blockquote><blockquote><p>说明：<strong>ROS1</strong>安装的版本为<strong>noetic</strong>，<strong>ROS2</strong>安装的版本为<strong>foxy</strong></p></blockquote><h2 id="2-配置">2.配置</h2><p>默认情况下ROS1和<strong>ROS2</strong>存在版本切换的问题，因为同一终端里无法同时使用<strong>ROS1</strong>和<strong>ROS2</strong>。</p><p>因此可通过修改<code>~/.bashrc</code>文件来选择每个终端中使用的ROS版本。</p><ol><li><p>打开并编辑<code>~/.bashrc</code>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>往<code>~/.bashrc</code>文件的末尾添加以下代码(crtl+o-&gt;enter-&gt;crtl+x保存退出)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ros noetic(1) or ros2 foxy(2)?&quot;</span></span><br><span class="line"><span class="built_in">read</span> edition</span><br><span class="line">ps=<span class="variable">$PS1</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$edition</span>&quot;</span> -eq <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">source</span> /opt/ros/noetic/setup.bash</span><br><span class="line">  <span class="comment"># echo &quot;ros noetic(1) has been chosen！&quot;</span></span><br><span class="line">  PS1=<span class="string">&quot;(ros1-noetic)<span class="variable">$ps</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">source</span> /opt/ros/foxy/setup.bash</span><br><span class="line">  <span class="comment"># echo &quot;ros2 foxy(2) has been chosen！&quot;</span></span><br><span class="line">  PS1=<span class="string">&quot;(ros2-foxy)<span class="variable">$ps</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ol><p>这样每次新建终端都会询问你使用的<strong>ROS</strong>版本，这时输入<strong>1</strong>或<strong>2</strong>来切换<strong>ROS</strong>版本即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ros noetic(1) or ros2 foxy(2)?</span><br><span class="line">2</span><br><span class="line">ros2 foxy(2) has been chosen！</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;说明：ROS1最高支持到Ubuntu20.04，ROS2最低支持Ubuntu20.04，综上，推荐使用的Ubuntu版本为20.04&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;1-安装&quot;&gt;1.安装&lt;/h2&gt;
&lt;blockq</summary>
      
    
    
    
    <category term="问题大全" scheme="https://www.mgodmonkey.cn/categories/%E9%97%AE%E9%A2%98%E5%A4%A7%E5%85%A8/"/>
    
    
    <category term="ros" scheme="https://www.mgodmonkey.cn/tags/ros/"/>
    
  </entry>
  
</feed>
